task buildConfig(type: Zip) {
    destinationDir = file("../${mdwOutputDir}")
    archiveName = "mdw-config-${mdwVersion}.zip"
    from "config"
    include "*.yaml"
    include "*.json"
    include "*.properties"
}

task buildAll(type: GradleBuild) {
    dependsOn buildConfig
    buildFile = "build.gradle"
    tasks = ["build"]
}

task cleanAll(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["clean"]
}

task publishMdw(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["publishBuild"]
    startParameter.projectProperties = [publishBaseUrl: mdwMavenRepoUrl, publishUser: mdwMavenUser, publishPassword: mdwMavenPassword ]
}

task publishMdwSnapshot(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["publishBuild"]
    startParameter.projectProperties = [publishBaseUrl: mdwMavenRepoUrl, publishUser: mdwMavenUser, publishPassword: mdwMavenPassword ]
}

task publishSnapshot {
    dependsOn(publishMdwSnapshot)
}

task publishFormal {
    dependsOn(publishMdw)
}

subprojects {
    apply plugin: "java"
    apply plugin: "eclipse-wtp"
    
    eclipse {
        classpath {
            defaultOutputDir = file("build/classes")
        }
    }
    
    sourceCompatibility = 1.8
    version = "${mdwVersion}"

    libsDirName = "../../${mdwOutputDir}"

    sourceSets {
        main {
            java {
                srcDir "src"
            }
            output.classesDir = "build/classes"
        }
    }
    
    repositories {
        maven {
            url devRepoUrl
        }
    }
    
    // copy into output dir rather than including directly in jar
    // this works better in local development where deployment happens from build/classes
    task copyMeta(type: Copy) {
        from("src") {
            include "META-INF/mdw/**"
            include "META-INF/spring/**"
            exclude "META-INF/**/.metadata"
            exclude "META-INF/**/.*ignore"
        }
        into sourceSets.main.output.classesDir
    }
    
    processResources {
        dependsOn copyMeta
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
        exclude "META-INF"
        exclude "**/.metadata/"
        exclude "**/.*ignore"
    }    
}

task cleanJavadocs(type: Delete) {
    delete "../mdw-hub/web/javadoc"
}

task packageSources(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["sourcesJar"]
}

task javadocs(type: Javadoc) {
    dependsOn "cleanJavadocs"
    source subprojects.collect {project -> project.sourceSets.main.java }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    title = "MDW 6 API JavaDocs"
    maxMemory = "256m"
    options.links "http://docs.oracle.com/javase/8/docs/api/"
    options.bottom "<i>Copyright &#169; 2016 CenturyLink, Inc.</i>"
    destinationDir = file('../mdw-hub/web/javadoc')
}

task exportAssetPackages(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["exportAssetPackages"]
    startParameter.projectProperties = [publishBaseUrl: "n/a", publishUser: "n/a", publishPassword: "n/a" ]
}

task versions {
    doLast {
        println "Java Version: " + System.getProperty("java.version")
        println GradleVersion.current().prettyPrint()
        println "MDW Version: ${mdwVersion}"
    }
}

// deploy a build for testing on lxdenvmtc143
task deployTomcatMdwDev(type: GradleBuild) {
	buildFile = "deploy.gradle"
	tasks = ["deployMdw"]
	startParameter.projectProperties = [deployWarDir: "/prod/ecom2/local/apps/tomcat/tomcat7-mdw6/webapps",
										tomcatBinDir: "/prod/ecom2/local/apps/tomcat/tomcat7-mdw6/bin",
										testServerUrl: "http://lxdenvmtc143.dev.qintra.com:8515/mdw/Services/AppSummary"]
}

task testTomcatMdwdev(type: GradleBuild) {
  buildFile = "test.gradle"
  tasks = ["autoTestAndPublish"]
  startParameter.projectProperties = [testServerUrl: "${tomcatTestServerUrl}"]
}