plugins {
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id 'de.marcphilipp.nexus-publish' version '0.1.1'
}

configurations {
    assets {
        extendsFrom archives
    }
}

if ('true'.equals(findProperty('devBuild'))) {
    subprojects {
        tasks.withType(Javadoc).all { enabled = false }
    }
}

task env {
    tasks.withType(Exec) {
        environment << [MDW_HOME: 'cli']
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'de.marcphilipp.nexus-publish'

    sourceCompatibility = 1.8
    version = "${mdwVersion}"

    libsDirName = "../../${mdwOutputDir}"

    sourceSets {
        main {
            java {
                srcDir "src"
            }
        }
    }

    repositories {
        mavenCentral()
    }

    jar {
        from("src") {
            include "META-INF/mdw/**"
            include "META-INF/spring/**"
            exclude "META-INF/**/.metadata"
            exclude "META-INF/**/.*ignore"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
        exclude "META-INF"
        exclude "**/.metadata/"
        exclude "**/.*ignore"
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'MDW'
                    description = 'MDW is a workflow framework specializing in microservice orchestration'
                    url = 'http://centurylinkcloud.github.io/mdw/'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'mdw.development'
                            name = 'MDW Development Team'
                            email = 'mdw.development@centurylink.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/CenturyLinkCloud/mdw.git'
                        developerConnection = 'scm:git:ssh://github.com:CenturyLinkCloud/mdw.git'
                        url = 'https://github.com/CenturyLinkCloud/mdw.git'
                    }
                }
            }
        }
    }
}

task cleanJavadocs(type: Delete) {
    delete "../docs/_docs/javadoc"
}

task packageSources(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["sourcesJar"]
}

allprojects {
    signing {
        required {
            !mdwVersion.endsWith('-SNAPSHOT')
        }
        sign publishing.publications
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.noTimestamp = "true"
    }
}

task javadocs(type: Javadoc) {
    dependsOn "cleanJavadocs"
    source subprojects.collect {project -> project.sourceSets.main.java }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    title = "MDW 6 API JavaDocs"
    maxMemory = "256m"
    options.links "http://docs.oracle.com/javase/8/docs/api/"
    options.bottom "<i>Copyright &#169; 2019 CenturyLink, Inc.</i>"
    destinationDir = file('../docs/_docs/javadoc')
}

task zipAssetPackages(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["zipAllAssets"]
}

task updateRestApiDefinition(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["updateRestApiDefinition"]
}

task updateMdwVerInFiles(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["updateMdwVerInFiles"]
}

task versions {
    doLast {
        println "Java Version: " + System.getProperty("java.version")
        println GradleVersion.current().prettyPrint()
        println "MDW Version: ${mdwVersion}"
    }
}

allprojects {
    group = "com.centurylink.mdw"
    version = "${mdwVersion}"
    ext.ossrhUsername = System.getenv("OSSRH_JIRA_USERNAME")
    ext.ossrhPassword = System.getenv("OSSRH_JIRA_PASSWORD")
}

/**
 * The artifact for this build is mdw-templates (only because each maven artifact
 * needs a build project, and we don't want one especially for templates).
 */
/**
 * Ant zip is the workaround to ensure .gitignore is included.
 */
task zipTemplates(type: Zip) {
    destinationDir = file("../${mdwOutputDir}")
    archiveName = "mdw-templates-${mdwVersion}.zip"
    from "templates"
    include "**/*"
    exclude ".DS_Store"
    doLast {
        ant.zip(destfile: "../${mdwOutputDir}/mdw-templates-${mdwVersion}.zip") {
            fileset(dir: 'templates', defaultexcludes: "no")
        }
    }
}

artifacts {
    archives zipTemplates
}

task buildAll(type: GradleBuild) {
    dependsOn(packageSources, zipTemplates)
    buildFile = "build.gradle"
    tasks = ["build"]
}

task buildDev(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["build"]
    startParameter.projectProperties = [devBuild: 'true']
}

task javaNoTabs(type: JavaExec) {
    classpath = files(project(':mdw-services').sourceSets.main.compileClasspath)
    main = 'com.centurylink.mdw.util.file.Grep'
    args = ['\t', '**/*.java']
    workingDir = '..'
}

task jsNoTabs(type: JavaExec) {
    classpath = files(project(':mdw-services').sourceSets.main.compileClasspath)
    main = 'com.centurylink.mdw.util.file.Grep'
    args = ['\t', 'mdw-hub/web/js/**/*.js mdw-hub/web/js/*.js']
    workingDir = '..'
}

task jsxNoTabs(type: JavaExec) {
    classpath = files(project(':mdw-services').sourceSets.main.compileClasspath)
    main = 'com.centurylink.mdw.util.file.Grep'
    args = ['\t', 'mdw-workflow/assets/**/*.jsx']
    workingDir = '..'
}

task htmlNoTabs(type: JavaExec) {
    classpath = files(project(':mdw-services').sourceSets.main.compileClasspath)
    main = 'com.centurylink.mdw.util.file.Grep'
    args = ['\t', 'mdw-hub/web/**/*.html']
    workingDir = '..'
}

task cssNoTabs(type: JavaExec) {
    classpath = files(project(':mdw-services').sourceSets.main.compileClasspath)
    main = 'com.centurylink.mdw.util.file.Grep'
    args = ['\t', 'mdw-hub/web/css/**/*.css']
    workingDir = '..'
}

task codeFormat {
    dependsOn(javaNoTabs, jsNoTabs, jsxNoTabs, htmlNoTabs, cssNoTabs)
}

task checkAssetVersions(type: Exec) {
    def mdwCmd
    if (System.properties['os.name'].startsWith('Windows')) {
        mdwCmd = 'cli\\bin\\mdw.bat'
    }
    else {
        mdwCmd = 'cli/bin/mdw'
    }
    def cmds = [mdwCmd, 'vercheck', '--tag=' + mdwPrevTag, '--warn']
    commandLine cmds
}

task testAll(type: GradleBuild) {
    dependsOn(buildAll, codeFormat, checkAssetVersions)
    buildFile = "test.gradle"
    tasks = ["test"]
}
testAll.mustRunAfter(buildAll)
codeFormat.mustRunAfter(buildAll)
checkAssetVersions.mustRunAfter(buildAll)

task test {
    dependsOn testAll
}

task cleanAll(type: GradleBuild) {
    dependsOn cleanJavadocs
    buildFile = "build.gradle"
    tasks = ["clean"]
}

task publishAll(type: GradleBuild) {
    dependsOn buildAll // testAll
    buildFile = "publish.gradle"
    tasks = ["publishMdwBuild"]
}
publish.mustRunAfter(buildAll) // testAll
publishAll.mustRunAfter(buildAll) // testAll

publishing {
    // find asset zips
    def assetArtifacts = [:]
    fileTree(dir: "../${mdwAssetOutputDir}", include: '**/*.zip').each { assetZip ->
        def baseName = (assetZip.name - '.zip') - '-SNAPSHOT'
        def artifactName = baseName.substring(0, baseName.lastIndexOf('-'))  // remove version
        def assetArtifact = artifacts.add('archives', assetZip) {
            type 'zip'
        }
        assetArtifacts[artifactName] = assetArtifact
    }

    publications {
        templates(MavenPublication) {
            // main artifact: templates
            artifactId = 'mdw-templates'
            artifact zipTemplates

            pom {
                name = 'MDW'
                description = 'MDW is a workflow framework specializing in microservice orchestration'
                url = 'http://centurylinkcloud.github.io/mdw/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mdw.development'
                        name = 'MDW Development Team'
                        email = 'mdw.development@centurylink.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/CenturyLinkCloud/mdw.git'
                    developerConnection = 'scm:git:ssh://github.com:CenturyLinkCloud/mdw.git'
                    url = 'https://github.com/CenturyLinkCloud/mdw.git'
                }
            }
        }
        // asset zip artifacts
        assetArtifacts.each { artifactName, theArtifact ->
            "${artifactName}"(MavenPublication) {
                groupId = 'com.centurylink.mdw.assets'
                artifactId = artifactName
                artifact theArtifact

                pom {
                    name = 'MDW'
                    description = 'MDW is a workflow framework specializing in microservice orchestration'
                    url = 'http://centurylinkcloud.github.io/mdw/'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'mdw.development'
                            name = 'MDW Development Team'
                            email = 'mdw.development@centurylink.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/CenturyLinkCloud/mdw.git'
                        developerConnection = 'scm:git:ssh://github.com:CenturyLinkCloud/mdw.git'
                        url = 'https://github.com/CenturyLinkCloud/mdw.git'
                    }
                }

            }
        }
    }

    nexusStaging {
        delayBetweenRetriesInMillis = 5000
        packageGroup = "com.centurylink"
        stagingProfileId = "20378d64ebd7b6"
        serverUrl = "https://oss.sonatype.org/service/local"
        username = System.getenv("OSSRH_JIRA_USERNAME")
        password = System.getenv("OSSRH_JIRA_PASSWORD")
    }

}
