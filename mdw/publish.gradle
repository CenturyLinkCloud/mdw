// publishes build output to a maven repository
// eg: mdw repo or maven central

plugins {
    id "org.ajoberstar.grgit" version "1.7.1"
  }


repositories {
    mavenCentral()
}

configurations {
    publish
}

dependencies {
    publish fileTree(dir: 'libs', include: '*.jar')
    publish files("../${mdwOutputDir}/mdw-common-${mdwVersion}.jar")
    publish group: "org.apache.xmlbeans", name: "xmlbeans", version: "2.4.0"
    publish group: "org.json", name: "json", version: "20160810"
    publish group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: "3.4.1.201406201815-r"
	// limberest
	publish group: "io.limberest", name: "limberest", version: "1.0.01"

}

task buildBaseConfigs() {
    doLast {
        def appConfigXml = file("../mdw-common/src/META-INF/mdw/spring/application-context.xml")
        file("../${mdwOutputDir}/application-context-${mdwVersion}.xml").bytes = appConfigXml.bytes;
    }
}

task cleanPackages(type: Delete) {
    delete fileTree(dir: "../${mdwAssetOutputDir}")
}

task updateRestApiDefinition {
    description = "Update RestApiDefinition with Version number"
    
    def mdwPkgVer = mdwVersion;
    if (mdwVersion.endsWith("-SNAPSHOT"))
        mdwPkgVer = mdwPkgVer.substring(0, mdwPkgVer.length() - 9)
    println "setting Rest API version to  " + mdwPkgVer
    fileTree(dir: "../mdw-services/src/com/centurylink/mdw/service/api", include:'RestApiDefinition.java').each { pkgFile ->
        doLast {
            pkgFile.setWritable(true)
            def pkgJson = pkgFile.text            
            pkgFile.withWriter { w ->
                w << pkgJson.replaceAll("version=\\\".*?\\\"", "version=\"${mdwPkgVer}\"");
            }
        }
    } 
}
// export all the packages in the mdw-workflow/assets directory
task exportAssetPackages {
    description = "Export Asset Packages"

    // superCats are categorized as the parent package 
    // (eg com.centurylink.mdw.tests.camel is category "tests" instead of "camel")
    def superCats = ["services", "tests"]
    
    def assetRootPath = file("../${mdwAssetRoot}").toString()
    def mdwPkgVer = mdwVersion;
    if (mdwVersion.endsWith("-SNAPSHOT"))
        mdwPkgVer = mdwPkgVer.substring(0, mdwPkgVer.length() - 9)
    println "Exporting asset packages from " + assetRootPath + ":" 
    fileTree(dir: "../${mdwAssetRoot}", include:'**/.mdw/package.json', exclude:'Archive/**/*').each { pkgFile ->
        doLast {
            def pkgName = pkgFile.parentFile.parent.substring(assetRootPath.length() + 1).replace('/','.').replace('\\','.')
            def pkgCat = pkgName.substring(pkgName.lastIndexOf('.') + 1)
            superCats.find { 
                if (pkgName.endsWith(it + "." + pkgCat)) {
                    pkgCat = it
                    return true
                }
                return false
            }
            println "    " + pkgCat + ": " + pkgName
            println "        setting package.json version: ${mdwPkgVer}"
            pkgFile.setWritable(true)
            def pkgJson = pkgFile.text
            pkgFile.withWriter { w ->
                w << pkgJson.replaceAll("\\\"version\\\": \\\".*?\\\"", "\"version\": \"${mdwPkgVer}\"");
            }
            if (pkgName.equals("com.centurylink.mdw.db")) {
                javaexec {
                    maxHeapSize "1280m"
                    classpath configurations.publish
                    main = "com.centurylink.mdw.dataaccess.file.ImporterExporterJson"
                    args "../${mdwAssetRoot}", pkgName, "../${mdwAssetOutputDir}/${pkgCat}/${pkgName}-${mdwVersion}.json"
                }
            }
            else {
                javaexec {
                    classpath configurations.publish
                    main = "com.centurylink.mdw.dataaccess.file.ImporterExporterJson"
                    args "../${mdwAssetRoot}", pkgName, "../${mdwAssetOutputDir}/${pkgCat}/${pkgName}-${mdwVersion}.json"
                }
            }
        }
    }
}
exportAssetPackages.mustRunAfter cleanPackages

task buildPackages(type: Copy) {
    dependsOn(cleanPackages, exportAssetPackages)
}

task checkAllowed() {
    doLast {
        assert publishUser != null : "Missing property: publishUser"
        assert publishPassword != null : "Missing property: publishPassword"
        // TODO disallow non-snapshot publish except from Jenkins
    }
}

task publishBase(type: HttpPut) {
    dependsOn(checkAllowed, buildBaseConfigs)
    from "../${mdwOutputDir}/application-context-${mdwVersion}.xml"
    baseUrl "${publishBaseUrl}/mdw/${mdwVersion}"
    user publishUser
    password publishPassword
}

task publishTemplate(type: HttpPut) {
    dependsOn checkAllowed
    from "../${mdwOutputDir}/mdw-templates-${mdwVersion}.zip"
    baseUrl "${publishBaseUrl}/mdw-templates/${mdwVersion}"
    user publishUser
    password publishPassword
}
task publishWar(type: HttpPut) {
    dependsOn checkAllowed
    from "../${mdwOutputDir}/mdw-${mdwVersion}.war"
    baseUrl "${publishBaseUrl}/mdw/${mdwVersion}"
    withSources true
    user publishUser
    password publishPassword
}

// must be run after build.gradle target buildAll
task publishJars(type: HttpPut) {
    dependsOn(checkAllowed)
    from "../${mdwOutputDir}/mdw-common-${mdwVersion}.jar"
    from "../${mdwOutputDir}/mdw-services-${mdwVersion}.jar"
    from "../${mdwOutputDir}/mdw-workflow-${mdwVersion}.jar"
    groupUrl "${publishBaseUrl}"
    withSources true
    user publishUser
    password publishPassword
}

// TODO: consider using standard Maven repository structure
// (especially if we end up rehosting asset discovery to a different repo)
task publishAssets(type: HttpPut) {
    dependsOn(checkAllowed, buildPackages)
    from "../${mdwAssetOutputDir}"
    assetsUrl "${publishBaseUrl}/assets"
    user publishUser
    password publishPassword
}

task publishBuild(dependsOn: [publishBase, publishTemplate, publishJars, publishWar, publishAssets]) {
    doLast {
        println "*** MDW build ${mdwVersion} published to ${publishBaseUrl} ***"
    }
}

task publishToMavenCentral(type: GradleBuild) {
      buildFile = "build.gradle"
      tasks = ["uploadArchives"]
  }


import org.ajoberstar.grgit.*

task tagRelease {
  description = 'Tags the current head with the project\'s version.'
  doLast {      
    grgit.tag.add {
      name = version
      message = "Release of v${mdwVersion}"
      //pointsTo = "b7ec814aa58db0bb61ab19e580ff9259b2a4db1d"
    }
  }
}

task pushToOrigin {
  dependsOn tagRelease
  description = 'Pushes current branch committed changes to origin repo.'
  doLast {
    grgit.push(tags: true)
  }
}