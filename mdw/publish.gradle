// publishes build output to a maven repository
plugins {
    id "io.codearte.nexus-staging" version "0.20.0"
    id "de.marcphilipp.nexus-publish" version "0.1.1"
}

nexusStaging {
    delayBetweenRetriesInMillis = 5000
    packageGroup = "com.centurylink"
    stagingProfileId = "20378d64ebd7b6"
    serverUrl = "https://oss.sonatype.org/service/local"
    username = System.getenv("OSSRH_JIRA_USERNAME")
    password = System.getenv("OSSRH_JIRA_PASSWORD")
}

task updateRestApiDefinition {
    description = "Update RestApiDefinition with Version number"
    
    def mdwPkgVer = mdwVersion;
    if (mdwVersion.endsWith("-SNAPSHOT"))
        mdwPkgVer = mdwPkgVer.substring(0, mdwPkgVer.length() - 9)
    println "setting Rest API version to  " + mdwPkgVer
    fileTree(dir: "../mdw-services/src/com/centurylink/mdw/service/api", include:'RestApiDefinition.java').each { pkgFile ->
        doLast {
            pkgFile.setWritable(true)
            def pkgJson = pkgFile.text            
            pkgFile.withWriter { w ->
                w << pkgJson.replaceAll("version=\\\".*?\\\"", "version=\"${mdwPkgVer}\"");
            }
        }
    } 
}

task cleanAssetZips(type: Delete) {
    delete fileTree(dir: "../${mdwAssetOutputDir}")
}

task zipAssetPackages {
    dependsOn cleanAssetZips
    description = "Export Asset Packages"
    file("../${mdwAssetOutputDir}").mkdirs()
        
    def assetRootPath = file("../${mdwAssetRoot}").toString()
   
    println "Exporting asset packages from " + assetRootPath + ":"
    
    fileTree(dir: "../${mdwAssetRoot}", include:'**/.mdw/package.yaml', exclude:'Archive/**/*').each { pkgFile ->
        def pkgName = pkgFile.parentFile.parent.substring(assetRootPath.length() + 1).replace('\\','/')      
        def pkgCat = pkgName.replace('com/centurylink/mdw/','').replace('/', '-')
           
        println "    " + pkgCat + ": " + pkgName
              
        task "zipAsset$pkgCat"(type: Zip) {
            destinationDir = file("../${mdwAssetOutputDir}")
            archiveName = "${pkgCat}-${mdwVersion}.zip"
            from "../${mdwAssetRoot}"
            include "${pkgName}/**"
            doLast {
                ant.zip(destfile: "../${mdwAssetOutputDir}/${pkgCat}-${mdwVersion}.zip") {
                    fileset(dir: "../${mdwAssetRoot}", includes: "${pkgName}/**", defaultexcludes: "no", 
                            excludes: "com/centurylink/mdw/node/node_modules/,**/build/,**/.gradle/")
                }
            }
        }
    }
}
zipAssetPackages.mustRunAfter(cleanAssetZips)

task zipAllAssets(dependsOn: tasks.matching { Task task -> task.name.startsWith("zipAsset")}) {
}

task uploadMdwBuild(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["publish"]
}

task publishMdwBuild(type: GradleBuild) {
    dependsOn uploadMdwBuild
//    if (!mdwVersion.endsWith("-SNAPSHOT"))
//        dependsOn closeAndReleaseRepository
}
closeAndReleaseRepository.mustRunAfter uploadMdwBuild

task updateHubPackageJson {
      description = "Update mdw-hub/package.json with version number"
      
      def mdwPkgVer = mdwVersion;
      if (mdwVersion.endsWith("-SNAPSHOT"))
          mdwPkgVer = mdwPkgVer.substring(0, mdwPkgVer.length() - 9)
      fileTree(dir: "../mdw-hub", include:"package.json").each { pkgFile ->
          println "Updating file  " + pkgFile.name + " with version= " + mdwPkgVer
          
          doLast {
              pkgFile.setWritable(true)
              def pkgJson = pkgFile.text
              pkgFile.withWriter { w ->
                  w << pkgJson.replaceAll("\\\"version\\\": \\\".*?\\\"", "\\\"version\\\": \"${mdwPkgVer}\"");
              }
          }
      }
}

task updateMdwVerInAssetPackages {
    description = "Update Asset Package Version: " + mdwVersion
    def assetRootPath = file("../${mdwAssetRoot}").toString()
    def mdwPkgVer = mdwVersion;
    if (mdwVersion.endsWith("-SNAPSHOT"))
        mdwPkgVer = mdwPkgVer.substring(0, mdwPkgVer.length() - 9)
    println "Update MDW version in asset packages in asset root: " + assetRootPath + ":"
    fileTree(dir: "../${mdwAssetRoot}", include:'**/.mdw/package.yaml', exclude:'Archive/**/*').each { pkgFile ->
        doLast {
            def pkgName = pkgFile.parentFile.parent.substring(assetRootPath.length() + 1).replace('/','.').replace('\\','.')
            println "        setting package.yaml version: ${mdwPkgVer} for ${pkgName}"
            pkgFile.setWritable(true)
            def pkgJson = pkgFile.text
            pkgFile.withWriter { w ->
                w << pkgJson.replaceAll("version: [0-9]\\.[0-9]\\.[0-9][0-9]", "version: ${mdwPkgVer}");
            }
        }
    }
}

task updateMdwVerInFiles {
    dependsOn(updateHubPackageJson, updateRestApiDefinition, updateMdwVerInAssetPackages)
}