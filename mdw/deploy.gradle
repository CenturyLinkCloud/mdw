apply plugin: "java"

repositories {
  mavenCentral()
}

configurations {
    deploy
}

dependencies {
	deploy group: "com.centurylink.mdw", name: "mdw-designer-core", version: "${mdwDesignerVersion}"
	deploy files("../${mdwOutputDir}/mdw-common-${mdwVersion}.jar")
	deploy files("../${mdwOutputDir}/mdw-schemas-${mdwVersion}.jar")
	deploy group: "org.apache.xmlbeans", name: "xmlbeans", version: "2.4.0"
}

task stopTomcat(type: ServerStop) {
	workingDir tomcatBinDir
	
	if (System.properties["os.name"].startsWith("Windows"))
		commandLine "stop.bat"
	else
		commandLine "./stop.sh"
	
	ignoreExitValue true
	verifyUrl testServerUrl
}

task deleteAssets(type: Delete) {
    def assetDir = new File(deployAssetDir + "/com")  //Do not delete Archive folder but delete .mdw folders
    println "assetDir" +  assetDir
    assetDir.deleteDir()
}

deleteAssets.mustRunAfter stopTomcat

task deployMdwAssets(type: Copy) {
	from("../mdw-workflow/assets") {
	}
	into deployAssetDir
}

task deleteWars(type: Delete) {
	delete "${deployWarDir}/mdw.war"
	delete "${deployWarDir}/mdw"
}
deleteWars.mustRunAfter stopTomcat

task deployMdwWar(type: Copy) {
    from "../mdw/deploy/app"
    into "${deployWarDir}"
    include "mdw-${mdwVersion}.war"
    rename("mdw-${mdwVersion}.war", "mdw.war")
}
deployMdwWar.mustRunAfter deleteWars


task addJavadocsToWar(type: Jar) {
	destinationDir file(deployWarDir)
	archiveName "mdw.war"
	from zipTree("${deployWarDir}/mdw-${mdwVersion}.war")
	from("../mdw-hub/web") {
		include "javadoc/**"
	}
}

task deployJavadocs(type: Delete) {
	dependsOn addJavadocsToWar
	delete file("${deployWarDir}/mdw-${mdwVersion}.war")
}
deployJavadocs.mustRunAfter deployMdwWar


// doesn't work on windows (blocks build task thread)
// http://forums.gradle.org/gradle/topics/exec_task_issues_details
// We should try this https://github.com/bmuschko/gradle-tomcat-plugin
task startTomcat(type: Exec) {
    sleep(45 * 1000)
    workingDir tomcatBinDir
    if (System.properties["os.name"].startsWith("Windows"))
        commandLine "start.bat"
    else
        commandLine "./start.sh"
        
    //verifyUrl testServerUrl   //TODO restore the functionality once issue 112 is resolved
    //timeout 90
    
    // store the output instead of printing to the console:
    standardOutput = errorOutput = new ByteArrayOutputStream()
    // extension method startTomcat.output() can be used to obtain the output:
    ext.output = {
      return standardOutput.toString()
    }
}
startTomcat.mustRunAfter(stopTomcat, deployMdwWar, deployJavadocs, deployMdwAssets)

task deployMdw(dependsOn: [stopTomcat, deleteAssets, deleteWars, deployMdwAssets, deployMdwWar, startTomcat]) {
    doLast {
	    println "*** MDW build ${mdwVersion} published to ${deployAssetDir}, ${deployWarDir} ***"
    }
}