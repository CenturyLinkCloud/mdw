apply plugin: "java"

repositories {
    maven {
        url devRepoUrl
    }
}

configurations {
    deploy
}

dependencies {
    deploy files("../${mdwOutputDir}/mdw-common-${mdwVersion}.jar")
    deploy files("../${mdwOutputDir}/mdw-schemas-${mdwVersion}.jar")
    deploy group: "org.apache.xmlbeans", name: "xmlbeans", version: "2.4.0"
}

//task stopTomcat(type: ServerStop) {
//    workingDir tomcatBinDir
//    
//    if (System.properties["os.name"].startsWith("Windows"))
//        commandLine "stop.bat"
//    else
//        commandLine "./stop.sh"
//    
//    ignoreExitValue true
//    verifyUrl testServerUrl
//}

task cleanWars(type: Delete) {
    delete "${deployWarDir}/mdw-admin.war"
    delete "${deployWarDir}/mdw-admin"
}
//cleanWars.mustRunAfter stopTomcat

task deployMdwAdminWar(type: Copy) {
    from "../mdw/deploy/app"
    into "${deployWarDir}"
    include "mdw-admin-${mdwVersion}.war"
    rename("mdw-admin-${mdwVersion}.war", "mdw-admin.war")
}
deployMdwAdminWar.mustRunAfter cleanWars

// doesn't work on windows (blocks build task thread)
// http://forums.gradle.org/gradle/topics/exec_task_issues_details
//task startTomcat(type: ServerStart) {
//    workingDir tomcatBinDir
//    if (System.properties["os.name"].startsWith("Windows"))
//        commandLine "start.bat"
//    else
//        commandLine "./start.sh"
//        
//    verifyUrl testServerUrl
//    timeout 90
//    
//    // store the output instead of printing to the console:
//    standardOutput = errorOutput = new ByteArrayOutputStream()
//    // extension method startTomcat.output() can be used to obtain the output:
//    ext.output = {
//      return standardOutput.toString()
//    }
//}
//startTomcat.mustRunAfter(stopTomcat, deployMdwAdminWar)

// currently does not stop or start the server since this is done by MDW 5.5 deploy
task deployMdwAdmin(dependsOn: [cleanWars, deployMdwAdminWar]) << {
    println "*** MDW-ADMIN build ${mdwVersion} published to ${deployWarDir} ***"
}