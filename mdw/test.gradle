// MDW automated tests (build must have been run already) 

def getMdwCmd() {
    if (System.properties['os.name'].startsWith('Windows')) {
        return 'cli\\bin\\mdw.bat'
    }
    else {
        return 'cli/bin/mdw'
    }
}

task env {
    tasks.withType(Exec) {
        environment << [MDW_HOME: 'cli']
    }
}

task install(type: Copy) {
    from "deploy/app/mdw-boot-${mdwVersion}.jar"
    into  bootJarLoc
}

task start(type: Exec) {
    dependsOn install
    commandLine getMdwCmd(), 'run', '--daemon', '--wait=90', '--retries=5'
}

def testSuccess = true

task stop(type: Exec) {
    commandLine getMdwCmd(), 'stop'
    doLast {
        if (!testSuccess)
            ant.fail('TEST FAILURE(S)')
    }
}

// CLI tests do not cover 'mdw run' or 'mdw test' as these are exercised by runTests.
task cliTests(type: Exec) {
    doFirst {
        println '\nRunning CLI Tests...'
    }
    workingDir './cli/tests'
    environment << [MDW_HOME: '../', PATH: "${environment.PATH}:../bin:../bats/bin"]
    commandLine 'bats', '.'
}

task runTests(type: Exec) {
    def cmd = [getMdwCmd(), 'test', '--stubbing', '--threads=10',
        '--include="**/*.test"',
        '--exclude="com/centurylink/mdw/kafka/KafkaProducer.test,com/centurylink/mdw/tests/workflow/LdapAdapter.test,com/centurylink/mdw/tests/services/InflightHandling.test"'
    ]
    commandLine = cmd
    ignoreExitValue true
    doLast {
        testSuccess = (execResult.exitValue == 0)
    }
}
task test(dependsOn: [cliTests, start, runTests, stop]) {
}
runTests.mustRunAfter start
stop.mustRunAfter runTests
