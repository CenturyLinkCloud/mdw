'use strict';

const fs = require('fs');
const path = require('path');
const jsdiff = require('diff');
const compare = require('./lib/compare');
const subst = require('./lib/subst');
const log = require('./lib/logger');

console.log('comparing...');

var values = {
  'base-url': 'http://localhost:8080/mdw/Services',
  'group-name': 'GroupA'
};

var verify = function(values) {
  var logger = new (log.Logger)({
    level: 'debug',
    file: 'e:/workspaces/mdw6/mdw-workflow/testResults/com.centurylink.mdw.tests.services/workgroups_{group-name}.log',
    retain: false
  });
  
  var expectedFile = 'e:/workspaces/mdw6/mdw-workflow/assets/com/centurylink/mdw/tests/services/workgroups_{group-name}.yaml';
  if (!fs.existsSync(expectedFile))
    throw new Error('Expected result file not found: ' + expectedFile);
  var actualFile = 'e:/workspaces/mdw6/mdw-workflow/testResults/com.centurylink.mdw.tests.services/workgroups_{group-name}.yaml';
  if (!fs.existsSync(actualFile))
    throw new Error('Result file not found: ' + expectedFile);
  logger.debug('Comparing: ' + expectedFile + '\n  with: ' + actualFile);
  var expected = fs.readFileSync(expectedFile, 'utf-8');
  var expectedYaml = subst.trimComments(expected);
  var actual = fs.readFileSync(actualFile, 'utf-8');
  var actualYaml = subst.trimComments(actual);
  var diffs = compare.diffLines(subst.extractCode(expectedYaml), subst.extractCode(actualYaml), values, {
    newlineIsToken: false, 
    ignoreWhitespace: false
  });
//  var diffs = jsdiff.diffLines(subst.extractCode(expectedYaml), subst.extractCode(actualYaml), {
//    newlineIsToken: false, 
//    ignoreWhitespace: false
//  });
  var firstDiffLine = 0;
  var diffMsg = '';
  if (diffs) {
    let line = 1;
    let actLine = 1;
    var i = 0;
    diffs.forEach(diff => {
      console.log(i + ": " + JSON.stringify(diff));
    });
    for (let i = 0; i < diffs.length; i++) {
      var diff = diffs[i];
      if (diff.removed) {
        var correspondingAdd = (i < diffs.length - 1 && diffs[i + 1].added) ? diffs[i + 1] : null;
        if (!diff.ignored) {
          if (!firstDiffLine)
            firstDiffLine = line;
          diffMsg += line;
          if (diff.count > 1)
            diffMsg += '-' + (line + diff.count - 1);
          diffMsg += '\n';
          diffMsg += subst.prefix(diff.value, '- ', expectedYaml, line - 1);
          if (correspondingAdd) {
            diffMsg += subst.prefix(correspondingAdd.value, '+ ', actualYaml, actLine - 1);
          }
          diffMsg += '===\n';
        }
        line += diff.count;
        if (correspondingAdd) {
          i++; // corresponding add already covered
          actLine += correspondingAdd.count;
        }
      }
      else if (diff.added) {
        if (!diff.ignored) {
          // added with no corresponding remove
          if (!firstDiffLine)
            firstDiffLine = line;
          diffMsg += line + '\n';
          diffMsg += subst.prefix(diff.value, '+ ', actualYaml, actLine - 1);
          diffMsg += '===\n';
        }
        actLine += diff.count; 
      }
      else {
        line += diff.count;
        actLine += diff.count;
      }
    }
  }
  if (firstDiffLine) {
    logger.error('FAILED: Results differ from line ' + firstDiffLine + ':\n' + diffMsg);
  }
  else {
    logger.info('PASSED');
  }
}

var other = function() {
  var act = '  time: 40\nx';
  var regex = '  time: ([0-9]*)\n';
  var match = act.match(new RegExp(regex));
  if (match) {
    if (act.length > match[0].length) {
      var rem = act.substring(match[0].length);
      console.log("REM: '" + rem + "'");
    }
    else {
      console.log(true);
    }
  }
  else {
    console.log(false);
  }
}

var mkdirs = function(dir) {
  dir.replace(/\\/gm, '/').split(/\//).reduce((acc, seg, i) => {
    var path = acc + seg;
    if (!path.endsWith(':')) {
      if (!fs.existsSync(path)) {
        fs.mkdirSync(path);
      }
    }
    return path + '/';
  }, '');
}
// other();
// verify(values);
mkdirs('../tempx/deep/deeper');


