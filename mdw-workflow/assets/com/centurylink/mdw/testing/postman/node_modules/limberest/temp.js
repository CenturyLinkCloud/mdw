'use strict';
const fs = require('fs-extra');
const compare = require('./lib/compare');
const subst = require('./lib/subst');
const winston = require('winston');


function T() {
  this.logger = new (winston.Logger)({
    transports: [
      new (winston.transports.Console)({
        level: 'debug',
        colorize: true,
        humanReadableUnhandledException: true,
        handleExceptions: true
      }),
      new (winston.transports.File)({
        filename: '../mdw6/mdw-workflow/testResults/com.centurylink.mdw.tests.services/temp.log', 
        level: 'debug',
        json: false,
        humanReadableUnhandledException: true,
        handleExceptions: true,
        formatter: function(options) {
          return options.message ? options.message : '';
        }
      })
    ]
  });
};

T.prototype.test = function() {
  var s = 'one\r\ntwo\n\nthree\n\n';
  console.log("RES: " + subst.prefix(s, '+'));
};

T.prototype.verify = function(values) {
  var expectedFile = '../mdw6/mdw-workflow/assets/com/centurylink/mdw/tests/services/workgroups_{group-name}.yaml';
  if (!fs.existsSync(expectedFile))
    throw new Error('Expected result file not found: ' + expectedFile);
  var actualFile = '../mdw6/mdw-workflow/testResults/com.centurylink.mdw.tests.services/workgroups_{group-name}.yaml';
  if (!fs.existsSync(actualFile))
    throw new Error('Result file not found: ' + expectedFile);
  this.logger.debug('Comparing: ' + expectedFile + '\n  with: ' + actualFile);
  var expectedYaml = fs.readFileSync(expectedFile, 'utf-8');
  var actualYaml = fs.readFileSync(actualFile, 'utf-8');
  var diffs = compare.diffLines(expectedYaml, actualYaml, values, {newlineIsToken: false, ignoreWhitespace: false});
  //var diffs = require('diff').diffLines(expectedYaml, actualYaml, {newlineIsToken: false, ignoreWhitespace: false});
  
  var firstDiffLine = 0;
  var diffMsg = '';
  if (diffs) {
    let line = 1;
    for (let i = 0; i < diffs.length; i++) {
      var diff = diffs[i];
      if (diff.removed && !diff.ignored) {
        if (!firstDiffLine)
          firstDiffLine = line;
        var correspondingAdd = (i < diffs.length - 1 && diffs[i + 1].added) ? diffs[i + 1] : null;
        diffMsg += line;
        if (diff.count > 1)
          diffMsg += '-' + (line + diff.count - 1);
        diffMsg += '\n';
        diffMsg += subst.prefix(diff.value, '- ');
        if (correspondingAdd) {
          diffMsg += subst.prefix(correspondingAdd.value, '+ ');
          i++; // corresponding add already covered
        }
        diffMsg += '===\n';
        line += diff.count;
      }
      else if (diff.added && !diff.ignored) {
        // added with no corresponding remove
        if (!firstDiffLine)
          firstDiffLine = line;
        diffMsg += this.prefix(diff.value, '+ ');
        diffMsg += '===\n';
      }
      else {
        line += diff.count;
      }
    };
  }
  if (firstDiffLine) {
    this.logger.error('Case "' + this.name + '" FAILED: Results differ from line ' + firstDiffLine + ':\n' + diffMsg);
    return {status: 'Failed', message: 'Results differ from line ' + firstDiffLine};
  }
  else {
    this.logger.info('Case "' + this.name + '" PASSED');
    return {status: 'Passed', message: 'Test succeeded'};
  }
};

//new T().test();
new T().verify({
  'group-name': 'GroupA'
});