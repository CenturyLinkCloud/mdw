{
  "activities": [
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=76,y=255,w=60,h=40"},
      "id": "A1",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessStartActivity",
      "name": "Start",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "lx=172,ly=273,type=Elbow,xs=140&204,ys=275&275"},
        "event": "FINISH",
        "id": "T4",
        "to": "A5"
      }]
    },
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=572,y=247,w=60,h=40"},
      "id": "A2",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessFinishActivity",
      "name": "Stop\nEM"
    },
    {
      "attributes": {
        "WORK_DISPLAY_INFO": "x=404,y=239,w=100,h=60",
        "processname": "ctl.aprilia.service.testing/EMNotify",
        "processversion": "[0.1,1)",
        "synchronous": "true",
        "variables": "{\"emNotifyRequest\":\"$emRequest\",\"ocPrimaryKeyId\":\"$ocPrimaryKeyId\"}"
      },
      "id": "A4",
      "implementor": "com.centurylink.mdw.workflow.activity.process.InvokeSubProcessActivity",
      "name": "Send Em\r\nNotification",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "lx=259,ly=269,type=ElbowV,xs=459&459&272&272,ys=295&357&357&305"},
        "event": "FINISH",
        "id": "T6",
        "to": "A5"
      }]
    },
    {
      "attributes": {
        "Java": "/**\n * Copyright (c) 2018 CenturyLink, Inc. All Rights Reserved.\n */\n\npackage ctl.aprilia;\n\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.apache.xmlbeans.XmlOptions;\n\nimport com.centurylink.mdw.common.service.ServiceException;\nimport com.centurylink.mdw.java.JavaExecutionException;\nimport com.centurylink.mdw.java.JavaExecutor;\nimport com.centurylink.mdw.java.MdwJavaException;\nimport com.centurylink.mdw.model.workflow.ActivityRuntimeContext;\nimport com.centurylink.mdw.util.StringHelper;\nimport com.crof.crof.Notify;\nimport com.crof.crof.NotifyDocument;\nimport com.qwest.xmlSchema.BusinessObjectT;\nimport com.qwest.xmlSchema.CustomerOrderResponseDocument;\nimport com.qwest.xmlSchema.OrderCustomerAccountDocument.OrderCustomerAccount;\nimport com.qwest.xmlSchema.OrderItemT;\nimport com.qwest.xmlSchema.SingleLocationComponentT;\n\nimport ctl.aprilia.helpers.DBUtil;\nimport ctl.aprilia.helpers.XPathParserHelper;\nimport ctl.aprilia.model.testing.CodResponse;\nimport ctl.aprilia.model.testing.E2EDecisionResponseHelper;\nimport ctl.aprilia.model.testing.RegisterOrderEventJSON;\n\n/**\n * Dynamic Java executor.\n */\npublic class BuildJsonRequest_A5 implements JavaExecutor {\n\n\tActivityRuntimeContext context;\n\tpublic void initialize(ActivityRuntimeContext context) throws MdwJavaException {\n\t\tthis.context = context;\n\t}\n\n\tpublic Object execute(Map<String, Object> variables) throws JavaExecutionException {\n\t\tString path = \"SINGLE\";\n\t\ttry {\n\t\t\tString notificationType = (String) variables.get(\"notificationType\");\n\t\t\tString mobJeopardyMsg = (String) variables.get(\"mobJeopardyMsg\");\n\t\t\tString focNotification = (String) variables.get(\"focNotification\");\n\t\t\tString commitDate = null;\n\t\t\tString mobErrorText = null;\n\t\t\tString actionCode = null;\n\t\t\tString usoOrderNo = null;\n\n\t\t\tString salesOrderId = (String) variables.get(\"salesOrderId\");\n\n\t\t\tE2EDecisionResponseHelper e2eDecisionResponseHelper = (E2EDecisionResponseHelper) variables\n\t\t\t\t\t.get(\"decisionResponse\");\n\t\t\tCodResponse codResponse = e2eDecisionResponseHelper.getCodResponse();\n\t\t\tif (codResponse != null) {\n\t\t\t\tif (\"A\".equalsIgnoreCase(codResponse.getActionCode())) {\n\t\t\t\t\tactionCode = \"INS\";\n\t\t\t\t} else if (\"C\".equalsIgnoreCase(codResponse.getActionCode())) {\n\t\t\t\t\tactionCode = \"MAC\";\n\t\t\t\t} else if (\"D\".equalsIgnoreCase(codResponse.getActionCode())) {\n\t\t\t\t\tactionCode = \"DIS\";\n\t\t\t\t} else {\n\t\t\t\t\tactionCode = \"INS\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!StringHelper.isEmpty(focNotification)) {\n\t\t\t\tNotifyDocument notifyDoc = NotifyDocument.Factory.parse(focNotification);\n\t\t\t\tNotify notify = notifyDoc.getNotify();\n\t\t\t\tusoOrderNo = XPathParserHelper.getValue(focNotification, \"/Notify/Notification/CONFIRMATION/CKT/ORD\");\n\t\t\t\tcommitDate = XPathParserHelper.getValue(focNotification, \"/Notify/Notification/CONFIRMATION/CN/PTD\");\n\t\t\t}\n\n\t\t\tif (!StringHelper.isEmpty(mobJeopardyMsg)) {\n\t\t\t\tNotifyDocument notifyDoc = NotifyDocument.Factory.parse(mobJeopardyMsg);\n\t\t\t\tNotify notify = notifyDoc.getNotify();\n\n\t\t\t\tif (notify != null && \"JEOPARDY\".equalsIgnoreCase(notificationType)\n\t\t\t\t\t\t&& notify.getMessageElements() != null\n\t\t\t\t\t\t&& notify.getMessageElements().getErrorListArray().length > 0) {\n\t\t\t\t\tmobErrorText = notify.getMessageElements().getErrorListArray(0).getErrorText();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMap<String, String> inputEventMap = new HashMap<String, String>();\n\t\t\tString eventName = (String) variables.get(\"eventName\");\n\t\t\tString jobStep = (String) variables.get(\"jobStep\");\n\t\t\tString jobStepState = (String) variables.get(\"jobStepState\");\n\t\t\tString jepCode = (String) variables.get(\"jepCode\");\n\t\t\tString categoryCD = (String) variables.get(\"categoryCD\");\n\t\t\tif (!StringHelper.isEmpty(eventName)) {\n\t\t\t\tinputEventMap.put(\"EventName\", eventName);\n\t\t\t} else {\n\t\t\t\tinputEventMap.put(\"EventName\", \"\");\n\t\t\t}\n\t\t\tif (!StringHelper.isEmpty(jobStep)) {\n\t\t\t\tinputEventMap.put(\"JobStep\", jobStep);\n\t\t\t}\n\t\t\tif (!StringHelper.isEmpty(jobStepState)) {\n\t\t\t\tinputEventMap.put(\"JobStepState\", jobStepState);\n\t\t\t}\n\t\t\tif (!StringHelper.isEmpty(jepCode)) {\n\t\t\t\tinputEventMap.put(\"JepCode\", jepCode);\n\t\t\t}\n\t\t\tif (!StringHelper.isEmpty(categoryCD)) {\n\t\t\t\tinputEventMap.put(\"CategoryCD\", categoryCD);\n\t\t\t}\n\n\t\t\tRegisterOrderEventJSON emNotifyRequest = new RegisterOrderEventJSON();\n\t\t\temNotifyRequest.setParentSourceSystemCD(\"SLS\");\n\n\t\t\tif (\"ORD_CREATED\".equalsIgnoreCase(notificationType) || \"NETWORK_READY\".equalsIgnoreCase(notificationType)\n\t\t\t\t\t|| \"SERVICE_ACCEPTED\".equalsIgnoreCase(notificationType)) {\n\t\t\t\treturn this.sendEmNotification(variables, inputEventMap, codResponse, notificationType, salesOrderId,\n\t\t\t\t\t\tactionCode);\n\t\t\t} else if (\"ORD_COMPLETED\".equalsIgnoreCase(notificationType)\n\t\t\t\t\t|| \"ORD_CLOSE\".equalsIgnoreCase(notificationType)) {\n\t\t\t\treturn this.sendEmNotification(variables, inputEventMap, codResponse, notificationType, salesOrderId,\n\t\t\t\t\t\tactionCode);\n\t\t\t} else if (\"CONFIRMATION\".equalsIgnoreCase(notificationType)) {\n\t\t\t\tinputEventMap.put(\"FlowName\", \"Provision_Local_Network\");\n\t\t\t\tinputEventMap.put(\"ActivityName\", \"Receive Notification from MOB\");\n\t\t\t\tinputEventMap.put(\"Milestone\", \"Received Local Firm Order Commitment Date\");\n\t\t\t\tinputEventMap.put(\"CommitmentDate\", commitDate);\n\t\t\t\tinputEventMap.put(\"USO_ORDER_NO\", usoOrderNo);\n\n\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\t\t\t\tthis.addAttributes(variables, false, false, emNotifyRequest);\n\t\t\t} else if (\"DLR_NOTIFICATION\".equalsIgnoreCase(notificationType)) {\n\n\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\t\t\t\tthis.addAttributes(variables, false, false, emNotifyRequest);\n\t\t\t} else if (\"ERROR\".equalsIgnoreCase(notificationType)) {\n\n\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\t\t\t\tthis.addAttributes(variables, false, false, emNotifyRequest);\n\t\t\t} else if (\"JEOPARDY\".equalsIgnoreCase(notificationType)) {\n\t\t\t\tinputEventMap.put(\"FlowName\", \"Provision_Local_Network\");\n\t\t\t\tinputEventMap.put(\"ActivityName\", \"Receive Notification from MOB\");\n\t\t\t\tinputEventMap.put(\"JeopReason\", mobErrorText);\n\n\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\t\t\t\tthis.addAttributes(variables, false, false, emNotifyRequest);\n\t\t\t} else if (\"ORD_REJECT\".equalsIgnoreCase(notificationType)) {\n\n\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\t\t\t\tthis.addAttributes(variables, false, false, emNotifyRequest);\n\t\t\t} else if (\"OTHER\".equalsIgnoreCase(notificationType)) {\n\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\t\t\t\t\n\t\t\t\tString atlSeidToSend = (String) variables.get(\"atlSeidToSend\");\n\t\t\t\tif(!StringHelper.isEmpty(atlSeidToSend)) {\n\t\t\t\t\temNotifyRequest.setParentSourceSystemOrderID(salesOrderId);\n\t\t\t\t\tMap<String, Object> altSeids = codResponse.getAltSeids();\n\t\t\t\t\tif(altSeids != null && !altSeids.isEmpty() && altSeids.containsKey(atlSeidToSend)) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tString altSeid = (String) altSeids.get(atlSeidToSend);\n\t\t\t\t\t\tString sourceSystemId = \"3\" + altSeid.substring(1);\n\t\t\t\t\t\t\n\t\t\t\t\t\temNotifyRequest.setSourceSystemOrderID(sourceSystemId);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.addAttributes(variables, false, false, emNotifyRequest);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvariables.put(\"emRequest\", emNotifyRequest);\n\t\t} catch (Exception exception) {\n\t\t\tcontext.logException(\"Exception executing \" + this.getClass().getName(), exception);\n\t\t\tthrow new JavaExecutionException(exception.getMessage());\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate void addAttributes(Map<String, Object> variables, boolean addServiceId, boolean addAccountId,\n\t\t\tRegisterOrderEventJSON emNotifyRequest) throws Exception {\n\t\tCustomerOrderResponseDocument doc = null;\n\n\t\tString codResponse = (String) variables.get(\"codResponse\");\n\t\tif (codResponse.contains(\"&lt;\"))\n\t\t\tcodResponse = StringEscapeUtils.unescapeXml(codResponse);\n\n\t\tcodResponse = codResponse.substring(codResponse.indexOf(\"<CustomerOrderResponse\"),\n\t\t\t\t(codResponse.indexOf(\"<\/CustomerOrderResponse>\") + 24));\n\n\t\tXmlOptions xmlOptions = new XmlOptions();\n\t\txmlOptions.setDocumentType(CustomerOrderResponseDocument.type);\n\t\txmlOptions.setCharacterEncoding(\"UTF-8\");\n\n\t\tdoc = CustomerOrderResponseDocument.Factory.parse(codResponse, xmlOptions);\n\n\t\temNotifyRequest.setParentSourceSystemOrderID((String) variables.get(\"salesOrderId\"));\n\n\t\tif (doc.getCustomerOrderResponse() != null && doc.getCustomerOrderResponse().getCustomerOrder() != null) {\n\t\t\temNotifyRequest.setSourceSystemOrderID(\n\t\t\t\t\tdoc.getCustomerOrderResponse().getCustomerOrder().getServiceOrderId().getStringValue());\n\n\t\t\tif (addServiceId) {\n\t\t\t\tList<String> serviceList = new ArrayList<>();\n\t\t\t\tfor (OrderCustomerAccount orderCustomerAccount : doc.getCustomerOrderResponse().getCustomerOrder()\n\t\t\t\t\t\t.getOrderCustomer().getOrderCustomerAccountArray()) {\n\t\t\t\t\tfor (OrderItemT orderItemDocument : orderCustomerAccount.getOrderItemArray()) {\n\t\t\t\t\t\tfor (BusinessObjectT businessObjectT : orderItemDocument.getBusinessObjectArray()) {\n\t\t\t\t\t\t\tif (businessObjectT.toString().contains(\"xsi:type=\\\"SingleLocationComponentT\\\"\")) {\n\t\t\t\t\t\t\t\tSingleLocationComponentT ctObj = SingleLocationComponentT.Factory\n\t\t\t\t\t\t\t\t\t\t.parse(BusinessObjectT.Factory.parse(businessObjectT.toString()).toString());\n\t\t\t\t\t\t\t\tif (ctObj.getCustomerProductComponentName().equalsIgnoreCase(\"LOCAL LOOP CHARGE\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName().equalsIgnoreCase(\"IQ NETWORKING\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName().equalsIgnoreCase(\"EQUIPMENT\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName()\n\t\t\t\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"NETWORK MANAGEMENT SERVICES\")) {\n\t\t\t\t\t\t\t\t\tserviceList.add(\"serviceID::\" + ctObj.getServiceElementId().getStringValue());\n\t\t\t\t\t\t\t\t\tserviceList.add(\"serviceIDType::ATLSEID\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\temNotifyRequest.setServiceList(serviceList);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate String sendEmNotification(Map<String, Object> variables, Map<String, String> inputEventMap,\n\t\t\tCodResponse codResponse, String notificationType, String salesOrderId, String actionCode) {\n\t\tString completedNotifications = \"\";\n\t\tString path = \"MULTIPLE\";\n\t\tif (codResponse != null) {\n\n\t\t\tcompletedNotifications = (String) variables.get(\"completedNotifications\");\n\t\t\tList<String> notifications = new ArrayList<String>();\n\t\t\tif (!StringHelper.isEmpty(completedNotifications)) {\n\t\t\t\tnotifications = Arrays.asList(completedNotifications.split(\",\"));\n\t\t\t}\n\n\t\t\tMap<String, Object> altSeids = codResponse.getAltSeids();\n\t\t\tif (altSeids != null && altSeids.size() > 0) {\n\t\t\t\tSet<String> keySet = altSeids.keySet();\n\n\t\t\t\tif (notifications.containsAll(keySet)) {\n\t\t\t\t\tpath = \"STOP\";\n\t\t\t\t} else {\n\t\t\t\t\tif (altSeids != null && !altSeids.isEmpty()) {\n\t\t\t\t\t\tSet<Entry<String, Object>> entrySet = altSeids.entrySet();\n\t\t\t\t\t\tfor (Entry<String, Object> entry : entrySet) {\n\t\t\t\t\t\t\tif (!notifications.contains(entry.getKey())) {\n\t\t\t\t\t\t\t\tif (!StringHelper.isEmpty(completedNotifications)) {\n\t\t\t\t\t\t\t\t\tcompletedNotifications = completedNotifications + entry.getKey() + \",\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcompletedNotifications = entry.getKey() + \",\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tvariables.put(\"completedNotifications\", completedNotifications);\n\n\t\t\t\t\t\t\t\tString altSeid = (String) entry.getValue();\n\t\t\t\t\t\t\t\tString sourceSystemId = \"3\" + altSeid.substring(1);\n\n\t\t\t\t\t\t\t\tRegisterOrderEventJSON emNotifyRequest = new RegisterOrderEventJSON();\n\t\t\t\t\t\t\t\temNotifyRequest.setSourceSystemOrderID(sourceSystemId);\n\t\t\t\t\t\t\t\temNotifyRequest.setParentSourceSystemOrderID(salesOrderId);\n\t\t\t\t\t\t\t\temNotifyRequest.setParentSourceSystemCD(\"SLS\");\n\t\t\t\t\t\t\t\temNotifyRequest.setActionCode(actionCode);\n\t\t\t\t\t\t\t\temNotifyRequest.setOrderType(\"E\");\n\t\t\t\t\t\t\t\temNotifyRequest.setServiceType(codResponse.getProductTemplateId());\n\n\t\t\t\t\t\t\t\tList<String> serviceList = new ArrayList<>();\n\t\t\t\t\t\t\t\tif (!StringHelper.isEmpty(codResponse.getSvcCatId())) {\n\t\t\t\t\t\t\t\t\tserviceList.add(\"serviceID::\" + codResponse.getSvcCatId());\n\t\t\t\t\t\t\t\t\tserviceList.add(\"serviceIDType::SVCCATID\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tserviceList.add(\"serviceID::\" + altSeid);\n\t\t\t\t\t\t\t\tserviceList.add(\"serviceIDType::ATLSEID\");\n\t\t\t\t\t\t\t\tserviceList.add(\"serviceID::APRILIA\");\n\t\t\t\t\t\t\t\tserviceList.add(\"serviceIDType::SYSTEM_INDICATOR\");\n\n\t\t\t\t\t\t\t\temNotifyRequest.setServiceList(serviceList);\n\n\t\t\t\t\t\t\t\tinputEventMap.put(\"CKT_ACTION\", codResponse.getActionCode());\n\n\t\t\t\t\t\t\t\temNotifyRequest.setVariablesMap(inputEventMap);\n\n\t\t\t\t\t\t\t\tvariables.put(\"emRequest\", emNotifyRequest);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tBoolean updateAproTable = (Boolean)variables.get(\"updateAproTable\");\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\tif(updateAproTable != null && updateAproTable) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tDBUtil dbUtil = new DBUtil();\n\t\t\t\t\t\t\t\t\t\tString values = \"('\" + sourceSystemId + \"','\" + salesOrderId + \"','\" + altSeid\n\t\t\t\t\t\t\t\t\t\t\t\t+ \"')\";\n\t\t\t\t\t\t\t\t\t\tString query = \"insert into OC_SALESORDER_APRO(APRO_SERVICE_ORDER_ID, SALES_ORDER_ID, ATL_SEID) VALUES \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ values;\n\t\t\t\t\t\t\t\t\t\tcontext.logDebug(\"printing---------\" + query);\n\t\t\t\t\t\t\t\t\t\tdbUtil.insertRecords(query);\n\t\t\t\t\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn path;\n\t}\n\n}\n",
        "Output Documents": "[\"emRequest\"]",
        "WORK_DISPLAY_INFO": "x=207,y=229,w=104,h=72"
      },
      "id": "A5",
      "implementor": "com.centurylink.mdw.workflow.activity.java.DynamicJavaActivity",
      "name": "Build Json \r\nRequest",
      "transitions": [
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "lx=398,ly=51,type=ElbowV,xs=240&240&601&601,ys=225&45&45&243"},
          "event": "FINISH",
          "id": "T5",
          "resultCode": "STOP",
          "to": "A2"
        },
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "lx=331,ly=273,type=Elbow,xs=315&400,ys=269&269"},
          "event": "FINISH",
          "id": "T7",
          "resultCode": "MULTIPLE",
          "to": "A4"
        },
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "lx=261,ly=191,type=ElbowV,xs=260&260&373,ys=230&150&150"},
          "event": "FINISH",
          "id": "T8",
          "resultCode": "SINGLE",
          "to": "A6"
        }
      ]
    },
    {
      "attributes": {
        "WORK_DISPLAY_INFO": "x=377,y=115,w=100,h=60",
        "processname": "ctl.aprilia.service.testing/EMNotify",
        "processversion": "[0.1,1)",
        "synchronous": "true",
        "variables": "{\"emNotifyRequest\":\"$emRequest\",\"ocPrimaryKeyId\":\"$ocPrimaryKeyId\"}"
      },
      "id": "A6",
      "implementor": "com.centurylink.mdw.workflow.activity.process.InvokeSubProcessActivity",
      "name": "Send Em\r\nNotification",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "lx=443,ly=146,type=ElbowH,xs=481&601&601,ys=150&150&243"},
        "event": "FINISH",
        "id": "T9",
        "to": "A2"
      }]
    }
  ],
  "attributes": {
    "ArrowStyle": "ArrowEnd",
    "NodeStyle": "BoxIcon",
    "PROCESS_VISIBILITY": "PUBLIC",
    "WORK_DISPLAY_INFO": "x=50,y=50,w=89,h=27"
  },
  "variables": {
    "atlSeidToSend": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "categoryCD": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "codResponse": {
      "category": "INPUT",
      "type": "com.centurylink.mdw.model.StringDocument"
    },
    "completedNotifications": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "decisionResponse": {
      "category": "INPUT",
      "type": "com.centurylink.mdw.model.Jsonable"
    },
    "emRequest": {
      "category": "LOCAL",
      "type": "com.centurylink.mdw.model.Jsonable"
    },
    "eventName": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "focNotification": {
      "category": "INPUT",
      "type": "com.centurylink.mdw.model.StringDocument"
    },
    "jepCode": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "jobStep": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "jobStepState": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "mobJeopardyMsg": {
      "category": "INPUT",
      "type": "com.centurylink.mdw.model.StringDocument"
    },
    "notificationType": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "ocPrimaryKeyId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "salesOrderId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "updateAproTable": {
      "category": "INPUT",
      "type": "java.lang.Boolean"
    }
  }
}