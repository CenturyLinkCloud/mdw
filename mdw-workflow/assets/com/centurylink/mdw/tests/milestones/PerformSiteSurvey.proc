{
  "activities": [
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=35,y=52,w=60,h=40"},
      "id": "A1",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessStartActivity",
      "name": "Start",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=130,ly=73,xs=99&162,ys=73&73"},
        "event": "FINISH",
        "id": "T30",
        "to": "A17"
      }]
    },
    {
      "attributes": {
        "Java": "/**\n * Copyright (c) 2018 CenturyLink, Inc. All Rights Reserved.\n */\n\npackage ctl.aprilia;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.centurylink.mdw.dataaccess.DatabaseAccess;\nimport com.centurylink.mdw.java.JavaExecutionException;\nimport com.centurylink.mdw.java.JavaExecutor;\nimport com.centurylink.mdw.java.MdwJavaException;\nimport com.centurylink.mdw.model.workflow.ActivityRuntimeContext;\nimport com.centurylink.mdw.util.StringHelper;\n\nimport ctl.aprilia.model.testing.CodResponse;\nimport ctl.aprilia.model.testing.E2EDecisionResponseHelper;\nimport ctl.aprilia.model.testing.SiteSurveyValidation;\n\n/**\n * Dynamic Java executor.\n */\npublic class ParserSiteSurvey_A3 implements JavaExecutor {\n\n\tpublic void initialize(ActivityRuntimeContext context) throws MdwJavaException {\n\t\t// TODO Auto-generated method stub\n\t}\n\n\tpublic Object execute(Map<String, Object> variables) throws JavaExecutionException {\n\t\tString responseStatus = \"PROCEED\";\n\t\tif (variables.get(\"siteSurveyParsedResponse\") != null && variables.get(\"decisionResponse\") != null) {\n\t\t\tString codTransportType = null;\n\t\t\tString ipmeAccType = null;\n\t\t\tE2EDecisionResponseHelper e2eDecisionResponseHelper = (E2EDecisionResponseHelper) variables\n\t\t\t\t\t.get(\"decisionResponse\");\n\t\t\tCodResponse codResponse = e2eDecisionResponseHelper.getCodResponse();\n\t\t\tif (codResponse != null) {\n\t\t\t\tcodTransportType = codResponse.getTransProc();\n\t\t\t\tipmeAccType = codResponse.getIpmeAccTyp();\n\t\t\t}\n\n\t\t\tCalendar receiveOrderDate = (Calendar) variables.get(\"receiveOrderDate\");\n\t\t\tDate rcvOrderDate = receiveOrderDate.getTime();\n\n\t\t\tSiteSurveyValidation siteSurveyValidation = new SiteSurveyValidation();\n\n\t\t\tString statusCode = null;\n\t\t\tString statusMessage = null;\n\t\t\tString indicator = null;\n\t\t\tboolean dsrFound = true;\n\t\t\tboolean highCostPresent = false;\n\t\t\tboolean transportTypeMatch = false;\n\t\t\tHashMap<String, String> siteResponse = (HashMap<String, String>) variables.get(\"siteSurveyParsedResponse\");\n\t\t\tif (siteResponse.containsKey(\"STATUS_CODE\") && siteResponse.get(\"STATUS_CODE\") != null\n\t\t\t\t\t&& siteResponse.containsKey(\"STATUS_MESSAGE\")) {\n\t\t\t\tstatusCode = siteResponse.get(\"STATUS_CODE\");\n\t\t\t\tstatusMessage = siteResponse.get(\"STATUS_MESSAGE\");\n\n\t\t\t\tif (\"-1\".equals(statusCode) && statusMessage.contains(\"Unable to locate DSRID in SFAINT\")) {\n\t\t\t\t\tdsrFound = false;\n\t\t\t\t\tresponseStatus = \"INCOMPLETE\";\n\t\t\t\t} else if (\"-2\".equals(statusCode)\n\t\t\t\t\t\t&& statusMessage.contains(\"Unable to locate Site Survey Record in ASSF\")) {\n\t\t\t\t\tdsrFound = false;\n\t\t\t\t\tresponseStatus = \"INCOMPLETE\";\n\t\t\t\t} else if (\"0\".equals(statusCode) && \"Success\".equalsIgnoreCase(statusMessage)) {\n\t\t\t\t\tif (siteResponse.containsKey(\"CLEAR_PATH_NEEDED\") && siteResponse.containsKey(\"FIBER_BUILD_REQUIRED\")) \n\t\t\t\t\t{\n\t\t\t\t\t\tresponseStatus = \"COMPLETE\";\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponseStatus = \"INCOMPLETE\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindicator = responseStatus;\n\n\t\t\t\tif (\"INCOMPLETE\".equalsIgnoreCase(responseStatus)) {\n\t\t\t\t\tDate orderConfigurableDate = (Date) variables.get(\"orderConfigurableDate\");\n\n\t\t\t\t\tCalendar cal = Calendar.getInstance();\n\t\t\t\t\tDate today = cal.getTime();\n\t\t\t\t\tif (today.compareTo(orderConfigurableDate) >= 0) {\n\t\t\t\t\t\tsiteSurveyValidation.setPastDate(true);\n\t\t\t\t\t\tvariables.put(\"pastDate\", true);\n\t\t\t\t\t\tvariables.put(\"isBuild\", false);\n\t\t\t\t\t\tvariables.put(\"highCostPresent\", false);\n\t\t\t\t\t\tvariables.put(\"clearPath\", false);\n\t\t\t\t\t\tresponseStatus = \"PROCEED\";\n\t\t\t\t\t\tindicator = \"Past Date\";\n\t\t\t\t\t\treturn responseStatus;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\"COMPLETE\".equalsIgnoreCase(responseStatus)) {\n\t\t\t\t\tif (siteResponse.containsKey(\"CLEAR_PATH_NEEDED\")\n\t\t\t\t\t\t\t&& \"YES\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_NEEDED\"))) {\n\t\t\t\t\t\tvariables.put(\"clearPath\", true);\n\t\t\t\t\t\tif (siteResponse.containsKey(\"PERFORMED_BY\")\n\t\t\t\t\t\t\t\t&& !StringHelper.isEmpty(siteResponse.get(\"PERFORMED_BY\"))) {\n\t\t\t\t\t\t\tString siteSurveyProvider = siteResponse.get(\"PERFORMED_BY\").toUpperCase();\n\t\t\t\t\t\t\tif (siteSurveyProvider.contains(\"CUSTOMER\") && siteSurveyProvider.contains(\"CENTURYLINK\")) {\n\t\t\t\t\t\t\t\tsiteSurveyProvider = \"CUSTOMER\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariables.put(\"siteSurveyProvider\", siteSurveyProvider);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvariables.put(\"clearPath\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (siteResponse.containsKey(\"CLEAR_PATH_NEEDED\") && siteResponse.containsKey(\"CLEAR_PATH_PERFORMED_BY\")\n\t\t\t\t\t\t&& siteResponse.containsKey(\"CLEAR_PATH_TECHNICIAN\")\n\t\t\t\t\t\t&& \"YES\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_NEEDED\"))\n\t\t\t\t\t\t&& \"Customer\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_PERFORMED_BY\"))\n\t\t\t\t\t\t&& \"Unknown\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_TECHNICIAN\"))) {\n\t\t\t\t\tvariables.put(\"isMailtoRI\", true);\n\n\t\t\t\t} else {\n\t\t\t\t\tvariables.put(\"isMailtoRI\", false);\n\t\t\t\t}\n\n\t\t\t\tif (\"COMPLETE\".equalsIgnoreCase(responseStatus) && siteResponse.containsKey(\"HIGH_COST_PRESENT\")\n\t\t\t\t\t\t&& siteResponse.get(\"HIGH_COST_PRESENT\") != null) {\n\t\t\t\t\tif (\"Yes\".equalsIgnoreCase(siteResponse.get(\"HIGH_COST_PRESENT\"))) {\n\t\t\t\t\t\thighCostPresent = true;\n\t\t\t\t\t\tindicator = \"High Cost Present\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\"COMPLETE\".equalsIgnoreCase(responseStatus) && codTransportType != null\n\t\t\t\t\t\t&& siteResponse.containsKey(\"TRANSPORT_TYPE\") && siteResponse.get(\"TRANSPORT_TYPE\") != null) {\n\n\t\t\t\t\tif (\"ETHERNET\".equalsIgnoreCase(codTransportType) && \"NA\".equalsIgnoreCase(ipmeAccType)\n\t\t\t\t\t\t\t&& (\"MTU\".equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\"))\n\t\t\t\t\t\t\t\t\t|| \"SWITCHED ETHERNET\".equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\")))) {\n\t\t\t\t\t\ttransportTypeMatch = true;\n\t\t\t\t\t} else if (\"ETHERNET\".equalsIgnoreCase(codTransportType) && \"GPON\".equalsIgnoreCase(ipmeAccType)\n\t\t\t\t\t\t\t&& \"GPON\".equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\"))) {\n\t\t\t\t\t\ttransportTypeMatch = true;\n\t\t\t\t\t} else if (codTransportType.equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\"))) {\n\t\t\t\t\t\ttransportTypeMatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!transportTypeMatch) {\n\t\t\t\t\t\tindicator = \"Transport Type is not matching\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsiteSurveyValidation.setHighCostIndiPresent(highCostPresent);\n\t\t\t\tsiteSurveyValidation.setTransportTypeSame(transportTypeMatch);\n\t\t\t\tsiteSurveyValidation.setDsridFound(dsrFound);\n\n\t\t\t\tif (siteSurveyValidation != null) {\n\t\t\t\t\te2eDecisionResponseHelper.setSiteSurveyValidation(siteSurveyValidation);\n\t\t\t\t}\n\t\t\t\tString isBuildRequired = \"NO\";\n\t\t\t\tif (siteResponse.containsKey(\"FIBER_BUILD_REQUIRED\")\n\t\t\t\t\t\t&& siteResponse.get(\"FIBER_BUILD_REQUIRED\").toUpperCase().equals(\"YES\"))\n\t\t\t\t\tisBuildRequired = \"YES\";\n\t\t\t\tvariables.put(\"isBuild\", isBuildRequired);\n\t\t\t\tvariables.put(\"decisionResponse\", e2eDecisionResponseHelper);\n\n\t\t\t\tvariables.put(\"dsrFound\", dsrFound);\n\t\t\t\tvariables.put(\"highCostPresent\", highCostPresent);\n\t\t\t\tvariables.put(\"transportTypeMatch\", transportTypeMatch);\n\n\t\t\t\tthis.logSiteSurvey(variables, rcvOrderDate, indicator);\n\t\t\t}\n\t\t}\n\t\treturn responseStatus;\n\t}\n\n\tprivate void logSiteSurvey(Map<String, Object> variables, Date rcvOrderDate, String indicator) {\n\t\tHashMap<String, String> siteResponse = (HashMap<String, String>) variables.get(\"siteSurveyParsedResponse\");\n\t\tString siteSurveyParsedResponse = siteResponse.toString();\n\t\tString statusCode = siteResponse.get(\"STATUS_CODE\");\n\t\tString statusMessage = siteResponse.get(\"STATUS_MESSAGE\");\n\t\tString salesOrderId = (String) variables.get(\"salesOrderId\");\n\t\tString siteOpportunityId = (String) variables.get(\"siteOpportunityId\");\n\t\tString siteLocationName = (String) variables.get(\"siteLocationName\");\n\t\tif (!StringHelper.isEmpty(siteLocationName)) {\n\t\t\tsiteLocationName = siteLocationName.replaceAll(\"%20\", \" \");\n\t\t}\n\t\tString requestId = (String) variables.get(\"requestId\");\n\n\t\tDate completionDate = null;\n\t\tif (siteResponse.containsKey(\"SS_COMP_DATE\") && !StringHelper.isEmpty(siteResponse.get(\"SS_COMP_DATE\"))) {\n\t\t\tcompletionDate = new Date(Long.parseLong(siteResponse.get(\"SS_COMP_DATE\")));\n\t\t}\n\t\tDate modifiedDate = new Date();\n\n\t\tDatabaseAccess databaseAccess = new DatabaseAccess(\"FiberPlusDataSource\");\n\t\ttry {\n\t\t\tdatabaseAccess.openConnection();\n\t\t} catch (SQLException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\tString aprilia_report_query = \"SELECT REPORT_ID FROM aprilia_report WHERE REPORT_NAME ='Site Survey'\";\n\n\t\ttry {\n\t\t\tResultSet resultSet = databaseAccess.runSelect(aprilia_report_query);\n\t\t\tif (resultSet != null && resultSet.next()) {\n\t\t\t\tlong reportId = resultSet.getLong(\"REPORT_ID\");\n\t\t\t\tresultSet = null;\n\t\t\t\tString report_uniquer_key_query = \"INSERT INTO report_unique_key (UNIQUE_KEY_NAME_1, UNIQUE_KEY_VALUE_1, UNIQUE_KEY_NAME_2, UNIQUE_KEY_VALUE_2, UNIQUE_KEY_NAME_3, UNIQUE_KEY_VALUE_3) VALUES (?, ?, ?, ?, ?, ?)\";\n\t\t\t\tObject[] arguments_1 = { \"REQUESTID\", requestId, \"SALESORDERID\", salesOrderId, \"OPPORTUNITYID\",\n\t\t\t\t\t\tsiteOpportunityId };\n\t\t\t\tint update = databaseAccess.runUpdate(report_uniquer_key_query, arguments_1);\n\t\t\t\tif (update > 0) {\n\n\t\t\t\t\tString uniqueKeyQuery = \"SELECT MAX(REPORT_UNIQUE_KEY_ID) as unique_key_id FROM report_unique_key\";\n\t\t\t\t\tresultSet = databaseAccess.runSelect(uniqueKeyQuery);\n\t\t\t\t\tif (resultSet != null && resultSet.next()) {\n\t\t\t\t\t\tlong report_unique_key_id = resultSet.getLong(\"unique_key_id\");\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\tString aprilia_report_field_query = \"INSERT INTO aprilia_report_field (REPORT_ID, LOCATIONNAME, RESPONSE, INDICATOR, STATUSMESSAGE , STATUSCODE, ORDERRECEIVEDATE, COMPLETIONDATE, LASTUPDATEDATE, REPORT_UNIQUE_KEY_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\t\t\t\t\t\tObject[] arguments_2 = { reportId, siteLocationName, siteSurveyParsedResponse, indicator,\n\t\t\t\t\t\t\t\tstatusMessage, statusCode, rcvOrderDate, completionDate, modifiedDate,\n\t\t\t\t\t\t\t\treport_unique_key_id };\n\t\t\t\t\t\tdatabaseAccess.runUpdate(aprilia_report_field_query, arguments_2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n",
        "Output Documents": "[\"decisionResponse\",\"siteSurveyParsedResponse\"]",
        "WORK_DISPLAY_INFO": "x=481,y=157,w=93,h=65"
      },
      "id": "A3",
      "implementor": "com.centurylink.mdw.workflow.activity.java.DynamicJavaActivity",
      "name": "Parser Site Survey",
      "transitions": [
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=409,ly=187,xs=477&386,ys=180&180"},
          "event": "FINISH",
          "id": "T88",
          "resultCode": "PROCEED",
          "to": "A39"
        },
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=531,ly=241,xs=525&525,ys=227&268"},
          "event": "FINISH",
          "id": "T97",
          "resultCode": "COMPLETE",
          "to": "A42"
        }
      ]
    },
    {
      "attributes": {
        "ClassName": "PerformSiteSurvey_A17",
        "Java": "/**\n * Copyright (c) 2018 CenturyLink, Inc. All Rights Reserved.\n */\n\npackage ctl.aprilia;\n\nimport java.io.ByteArrayInputStream;\n\nimport org.apache.commons.lang3.StringUtils;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathFactory;\n\nimport org.apache.commons.lang.StringEscapeUtils;\nimport org.apache.xmlbeans.XmlException;\nimport org.apache.xmlbeans.XmlOptions;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport java.util.*;\nimport com.centurylink.mdw.java.JavaExecutionException;\nimport com.centurylink.mdw.java.JavaExecutor;\nimport com.centurylink.mdw.java.MdwJavaException;\nimport com.centurylink.mdw.model.workflow.ActivityRuntimeContext;\nimport com.qwest.xmlSchema.BusinessObjectT;\nimport com.qwest.xmlSchema.CustomerOrderResponseDocument;\nimport com.qwest.xmlSchema.CustomerProductComponentPriceT;\nimport com.qwest.xmlSchema.OrderCustomerAccountDocument.OrderCustomerAccount;\nimport com.qwest.xmlSchema.OrderItemT;\nimport com.qwest.xmlSchema.SingleLocationComponentT;\nimport com.qwest.xmlSchema.SalesOrderCommentT;\nimport ctl.aprilia.helpers.SiteSurveyResponseParser;\nimport ctl.aprilia.helpers.BasicJavaUtils;\nimport ctl.aprilia.model.testing.CodResponse;\nimport ctl.aprilia.model.testing.E2EDecisionResponseHelper;\n\n/**\n * Dynamic Java executor.\n */\npublic class PerformSiteSurvey_A17 implements JavaExecutor {\n\n\tpublic void initialize(ActivityRuntimeContext context) throws MdwJavaException {\n\t\t// TODO Auto-generated method stub\n\t}\n\n\tpublic Object execute(Map<String, Object> variables) throws JavaExecutionException {\n\t\tif (variables.get(\"codResponseDocument\") != null) {\n\t\t\tString response = (String) variables.get(\"codResponseDocument\");\n\t\t\tCodResponse codResponse = processData(response);\n\t\t\ttry {\n\t\t\t\tif (\"CPE\".equalsIgnoreCase(codResponse.getProductTemplateId())) {\n\t\t\t\t\tcodResponse.setCpe(true);\n\t\t\t\t}\n\n\t\t\t\tMap<String, Object> altSeids = new HashMap<String, Object>();\n\n\t\t\t\tXmlOptions xmlOptions = new XmlOptions();\n\t\t\t\txmlOptions.setDocumentType(CustomerOrderResponseDocument.type);\n\t\t\t\txmlOptions.setCharacterEncoding(\"UTF-8\");\n\n\t\t\t\tCustomerOrderResponseDocument doc = CustomerOrderResponseDocument.Factory.parse(response, xmlOptions);\n\t\t\t\tboolean istrue = false;\n\t\t\t\tint index = 0;\n\t\t\t\tString description = null;\n\n\t\t\t\t// Get seids\n\n\t\t\t\tfor (OrderCustomerAccount orderCustomerAccount : doc.getCustomerOrderResponse().getCustomerOrder()\n\t\t\t\t\t\t.getOrderCustomer().getOrderCustomerAccountArray()) {\n\t\t\t\t\tfor (OrderItemT orderItemDocument : orderCustomerAccount.getOrderItemArray()) {\n\t\t\t\t\t\tfor (BusinessObjectT businessObjectT : orderItemDocument.getBusinessObjectArray()) {\n\t\t\t\t\t\t\tif (businessObjectT.toString().contains(\"xsi:type=\\\"SingleLocationComponentT\\\"\")) {\n\t\t\t\t\t\t\t\tSingleLocationComponentT ctObj = SingleLocationComponentT.Factory\n\t\t\t\t\t\t\t\t\t\t.parse(BusinessObjectT.Factory.parse(businessObjectT.toString()).toString());\n\t\t\t\t\t\t\t\tif (ctObj.getCustomerProductComponentName().equalsIgnoreCase(\"LOCAL LOOP CHARGE\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName().equalsIgnoreCase(\"IQ NETWORKING\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName().equalsIgnoreCase(\"EQUIPMENT\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName()\n\t\t\t\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"NETWORK MANAGEMENT SERVICES\")\n\t\t\t\t\t\t\t\t\t\t|| ctObj.getCustomerProductComponentName()\n\t\t\t\t\t\t\t\t\t\t\t\t.equalsIgnoreCase(\"BUSINESS APPLICATIONS\")) {\n\t\t\t\t\t\t\t\t\taltSeids.put(ctObj.getCustomerProductComponentName().toUpperCase(),\n\t\t\t\t\t\t\t\t\t\t\tctObj.getServiceElementId().getStringValue());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (businessObjectT.toString().contains(\"xsi:type=\\\"SalesOrderCommentT\\\"\")) {\n\t\t\t\t\t\t\t\tSalesOrderCommentT saleorderobj = SalesOrderCommentT.Factory\n\t\t\t\t\t\t\t\t\t\t.parse(BusinessObjectT.Factory.parse(businessObjectT.toString()).toString());\n\t\t\t\t\t\t\t\tString[] comments = saleorderobj.getCommentTextArray();\n\n\t\t\t\t\t\t\t\tfor (String comment : comments) {\n\t\t\t\t\t\t\t\t\tif (comment.contains(\"DSR\")) {\n\t\t\t\t\t\t\t\t\t\tvariables.put(\"dcrValue\", getDSRValue(comment));\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!altSeids.isEmpty()) {\n\t\t\t\t\tcodResponse.setAltSeids(altSeids);\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * OrderItemT[] orderItemArray =\n\t\t\t\t * doc.getCustomerOrderResponse().getCustomerOrder().getOrderCustomer()\n\t\t\t\t * .getOrderCustomerAccountArray()[0].getOrderItemArray(); for (int i = 0; i <\n\t\t\t\t * orderItemArray.length; i++) { if (orderItemArray[i].toString().contains(\n\t\t\t\t * \"CustomerProductComponentName>PACKAGES<\/\") &&\n\t\t\t\t * orderItemArray[i].toString().contains(\"type=\\\"SingleLocationComponentT\\\"\")) {\n\t\t\t\t * istrue = true; } if (istrue && (i + 1 < orderItemArray.length)) {\n\t\t\t\t * BusinessObjectT[] businessObjectArray = orderItemArray[i +\n\t\t\t\t * 1].getBusinessObjectArray(); for (BusinessObjectT businessObjectT :\n\t\t\t\t * businessObjectArray) { if (businessObjectT.toString().contains(\n\t\t\t\t * \"type=\\\"CustomerProductComponentPriceT\\\"\")) { CustomerProductComponentPriceT\n\t\t\t\t * customerProductComponentPriceT = CustomerProductComponentPriceT.Factory\n\t\t\t\t * .parse(businessObjectT.toString()); istrue = false; description =\n\t\t\t\t * customerProductComponentPriceT.getBillingProductComponentID()\n\t\t\t\t * .getStringValue(); break; } } } }\n\t\t\t\t * codResponse.setCustomerProductComponentPriceDescription(description);\n\t\t\t\t */\n\n\t\t\t\tString siteLocationName = codResponse.getLocationName();\n\t\t\t\tvariables.put(\"locationNameDataList\", Arrays.asList(siteLocationName.split(\" \")));\n\t\t\t\tsiteLocationName = siteLocationName.replace(\" \", \"%20\");\n\t\t\t\tsiteLocationName = StringEscapeUtils.escapeHtml(siteLocationName);\n\t\t\t\tvariables.put(\"siteLocationName\", siteLocationName);\n\t\t\t\tvariables.put(\"trnsportTypeFromCOD\", codResponse.getTransProc());\n\t\t\t\tSystem.out.println(\"Maild Id\" + codResponse.getEmailId());\n\t\t\t\tvariables.put(\"riemailId\", codResponse.getEmailId());\n\n\t\t\t\tString streetNo = valueInvalid(codResponse.getStreetNumber()) ? \"\"\n\t\t\t\t\t\t: codResponse.getStreetNumber().concat(\" \");\n\t\t\t\tString streetDirPrefix = valueInvalid(codResponse.getStreetDirectionalPrefix()) ? \"\"\n\t\t\t\t\t\t: codResponse.getStreetDirectionalPrefix().concat(\" \");\n\t\t\t\tString streetName = valueInvalid(codResponse.getStreetName()) ? \"\"\n\t\t\t\t\t\t: codResponse.getStreetName().concat(\" \");\n\t\t\t\tString streetType = valueInvalid(codResponse.getStreetType()) ? \"\" : codResponse.getStreetType();\n\n\t\t\t\tString serviceAddLine1 = streetNo + streetDirPrefix + streetName + streetType;\n\n\t\t\t\tvariables.put(\"serviceAddLine1\", serviceAddLine1.replace(\" \", \"%20\"));\n\t\t\t\tvariables.put(\"svcCity\", codResponse.getCity().replace(\" \", \"%20\"));\n\t\t\t\tvariables.put(\"svcAddressState\", codResponse.getStateProvince());\n\t\t\t\tvariables.put(\"svcAddressPostal\", codResponse.getPostalCode());\n\n\t\t\t\tE2EDecisionResponseHelper e2eDecisionResponseHelper = new E2EDecisionResponseHelper();\n\t\t\t\tif (codResponse != null) {\n\t\t\t\t\te2eDecisionResponseHelper.setCodResponse(codResponse);\n\t\t\t\t}\n\n\t\t\t\tvariables.put(\"decisionResponse\", e2eDecisionResponseHelper);\n\t\t\t\tvariables.put(\"receiveOrderDate\", Calendar.getInstance());\n\t\t\t\tvariables.put(\"orderRecievedDate\", Calendar.getInstance().getTime());\n\n\t\t\t\tCalendar calender = Calendar.getInstance();\n\t\t//\t\tcalender.add(Calendar.DATE, 4);\n\t\t\t\tDate configurableDate = calender.getTime();\n\t\t\t\tvariables.put(\"orderConfigurableDate\", configurableDate);\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new JavaExecutionException(e.getMessage(), e.getCause());\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate String getDSRValue(String comment) {\n        try {\n               if (comment.contains(\"DSR\")) {\n                     int i = comment.indexOf(\"DSR\") + 3;\n                     while (i < comment.length() - 1) {\n                            if (Character.isLetter(comment.charAt(i)))\n                                   if (comment.substring(i, i + 3).equals(\"DSR\"))\n                                          i = i + 2;\n                                   else {\n                                          comment = comment.substring(i);\n                                          return getDSRValue(comment);\n                                   }\n                            if (isNum(comment.charAt(i) + \"\")) {\n                                   String value = comment.substring(i, i + 6);\n                                   if (isNum(value)) {\n                                          if (i + 7 > comment.length())\n                                                 return value;\n                                          else if (!isNum(comment.substring(i, i + 7)))\n                                                 return value;\n                                          else {\n                                                 comment = comment.substring(i + 6);\n                                                 return getDSRValue(comment);\n                                          }\n                                   }\n                            }\n                            i++;\n                     }\n               } else\n                     return \"\";\n        } catch (Exception ex) {\n               return \"\";\n        }\n        return \"\";\n }\n\n private boolean isNum(String charAt) {\n        try {\n               Integer.parseInt(charAt + \"\");\n               return true;\n        } catch (Exception ex) {\n               return false;\n        }\n\n }\n\n\n\tprivate String getValueforAttribute(String data, String expression, String attributeName) throws Exception {\n\t\tString value = null;\n\t\tList<Map<String, String>> object = getObject(data, expression);\n\t\tfor (Map<String, String> map : object) {\n\t\t\tif (map.containsValue(attributeName))\n\t\t\t\treturn map.get(\"AttributeValue\");\n\t\t}\n\t\treturn value;\n\n\t}\n\n\tprivate String getValue(String data, String expression) throws Exception {\n\t\tList<String> response = getList(data, expression);\n\t\treturn response.size() > 0 ? response.get(0) : \"NULL\";\n\t}\n\n\tprivate List<String> getList(String data, String expression) throws Exception {\n\t\tList<String> response = new ArrayList<String>();\n\t\ttry {\n\t\t\tDocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder dBuilder;\n\n\t\t\tdBuilder = dbFactory.newDocumentBuilder();\n\n\t\t\tDocument doc = dBuilder.parse(new ByteArrayInputStream(data.getBytes()));\n\t\t\tdoc.getDocumentElement().normalize();\n\n\t\t\tXPath xPath = XPathFactory.newInstance().newXPath();\n\n\t\t\tNodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n\n\t\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\t\tNode nNode = nodeList.item(i);\n\n\t\t\t\tif (nNode.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\t\t\tElement eElement = (Element) nNode;\n\t\t\t\t\tresponse.add(eElement.getTextContent());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new Exception(e.getMessage());\n\t\t}\n\t\treturn response;\n\t}\n\n\tpublic List<Map<String, String>> getObject(String data, String expression) throws Exception {\n\t\tList<Map<String, String>> response = new ArrayList<Map<String, String>>();\n\t\ttry {\n\t\t\tDocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder dBuilder;\n\n\t\t\tdBuilder = dbFactory.newDocumentBuilder();\n\n\t\t\tDocument doc = dBuilder.parse(new ByteArrayInputStream(data.getBytes()));\n\t\t\tdoc.getDocumentElement().normalize();\n\n\t\t\tXPath xPath = XPathFactory.newInstance().newXPath();\n\n\t\t\tNodeList nodeList = (NodeList) xPath.compile(expression).evaluate(doc, XPathConstants.NODESET);\n\n\t\t\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\t\t\tNode nNode = nodeList.item(i);\n\t\t\t\tMap<String, String> nodeData = new HashMap<String, String>();\n\n\t\t\t\tif (nNode.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\t\t\tElement eElement = (Element) nNode;\n\t\t\t\t\tNodeList childNodes = eElement.getChildNodes();\n\t\t\t\t\tfor (int k = 0; k < childNodes.getLength(); k++) {\n\t\t\t\t\t\tNode n = childNodes.item(k);\n\t\t\t\t\t\tif (n.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\t\t\t\t\tnodeData.put(n.getNodeName(), n.getTextContent());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresponse.add(nodeData);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new Exception(e.getMessage());\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate boolean valueInvalid(String field) {\n\t\treturn StringUtils.isEmpty(field) || \"NULL\".equals(field);\n\t}\n\n\tprivate String getEmail(String data, String expression, String condition) throws Exception {\n\t\tList<Map<String, String>> contacts = getObject(data, expression);\n\t\tfor (Map<String, String> map : contacts) {\n\t\t\tif (map.containsValue(condition)) {\n\t\t\t\treturn map.get(\"qb:Email\");\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate CodResponse processData(String data) {\n\t\ttry {\n\t\t\tCodResponse codResponse = new CodResponse();\n\t\t\tcodResponse.setProductTemplateId(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem[1]/BusinessObject[@type='CustomerProductT']/ProductTemplateId\"));\n\t\t\tcodResponse.setLocationName(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/LocationName\"));\n\t\t\tcodResponse.setServiceOrderNumber(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='CustomerProductT']/ServiceOrderNumber\"));\n\t\t\tcodResponse.setActionCode(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem[1]/ActionCode\"));\n\t\t\tcodResponse.setCustomerProductComponentName(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='SingleLocationComponentT']/CustomerProductComponentName\"));\n\t\t\tList<String> billingProductList = getList(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject/BillingProductComponentID\");\n\t\t\tif (billingProductList.contains(\"FIBERP DO\"))\n\t\t\t\tcodResponse.setCustomerProductComponentPriceDescription(\"FIBERP DO\");\n\n\t\t\telse if (billingProductList != null && billingProductList.size() > 0)\n\t\t\t\tcodResponse.setCustomerProductComponentPriceDescription(billingProductList.get(0));\n\t\t\telse\n\t\t\t\tcodResponse.setCustomerProductComponentPriceDescription(\"NO_BillingProductComponentID_FOUND\");\n\n\t\t\tcodResponse.setWanPortBl(getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ProvisioningElementT'][@subClass='Ethernet Port']/AttributeGroup/AttributeNode\",\n\t\t\t\t\t\"WAN_PORT_BL\"));\n\t\t\tcodResponse.setIpmeAccTyp(getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ProvisioningElementT'][@subClass='QPA Ethernet LL Access']/AttributeGroup/AttributeNode\",\n\t\t\t\t\t\"IPME_ACC_TYP\"));\n\t\t\tcodResponse.setIpAddrTyp(getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ProvisioningElementT'][@subClass='VLAN Virtual Circuit']/AttributeGroup/AttributeNode\",\n\t\t\t\t\t\"IP_ADDR_TYP\"));\n\t\t\tcodResponse.setRouteProtoc(getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ProvisioningElementT'][@subClass='Routing Information']/AttributeGroup/AttributeNode\",\n\t\t\t\t\t\"ROUTE_PROTOC\"));\n\t\t\tcodResponse.setLanIpAb(getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ProvisioningElementT'][@subClass='Routing Information']/AttributeGroup/AttributeNode\",\n\t\t\t\t\t\"LAN_IP_AB\"));\n\t\t\tString noIpAddr = getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ProvisioningElementT'][@subClass='Routing Information']/AttributeGroup/AttributeNode\",\n\t\t\t\t\t\"NO_OF_IPADDR\");\n\t\t\tcodResponse.setNoIpAddr(noIpAddr != null ? noIpAddr + \".0\" : noIpAddr);\n\t\t\tcodResponse.setEmailId(getEmail(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ContactT']\",\n\t\t\t\t\t\"RI\"));\n\t\t\tcodResponse.setTransProc(getValueforAttribute(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='CustomerProductComponentAttributeT']\",\n\t\t\t\t\t\"TRANS_PROTOC\"));\n\n\t\t\tcodResponse.setCompanyName(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/CompanyName\"));\n\n\t\t\tcodResponse.setWireCenterCLLI(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/ServingWireCenterCLLI/CLLI8\"));\n\t\t\tcodResponse.setSvcCatId(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem[1]/BusinessObject[@type='CustomerProductT']/CustomerProductId\"));\n\t\t\tcodResponse.setStreetNumber(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/StreetNumber\"));\n\t\t\tcodResponse.setStreetName(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/StreetName\"));\n\t\t\tcodResponse.setStreetType(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/StreetType\"));\n\t\t\tcodResponse.setStreetDirectionalPrefix(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/StreetDirectionalPrefix\"));\n\t\t\tcodResponse.setStateProvince(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/StateProvince\"));\n\t\t\tcodResponse.setCity(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/City\"));\n\t\t\tcodResponse.setPostalCode(getValue(data,\n\t\t\t\t\t\"/CustomerOrderResponse/CustomerOrder/OrderCustomer/OrderCustomerAccount/OrderItem/BusinessObject[@type='ServiceAddressT']/DomesticAddress/ParsedAddress/PostalCode\"));\n\t\t\tif (codResponse.getLanIpAb() != null && codResponse.getLanIpAb().equalsIgnoreCase(\"NO\")\n\t\t\t\t\t&& codResponse.getNoIpAddr() != \"8.0\")\n\t\t\t\tcodResponse.setNoIpAddr(\"8.0\");\n\t\t\treturn codResponse;\n\t\t} catch (Exception ex) {\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n",
        "Output Documents": "[\"decisionResponse\",\"siteSurveyParsedResponse\",\"receiveOrderDate\",\"locationList\",\"locationNameDataList\"]",
        "WORK_DISPLAY_INFO": "x=166,y=33,w=177,h=59"
      },
      "id": "A17",
      "implementor": "com.centurylink.mdw.workflow.activity.java.DynamicJavaActivity",
      "name": "Parser Cod Response",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=408,ly=73,xs=347&470,ys=73&73"},
        "event": "FINISH",
        "id": "T103",
        "to": "A44"
      }]
    },
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=156,y=154,w=60,h=40"},
      "id": "A26",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessFinishActivity",
      "name": "Stop\nPSS1"
    },
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=943,y=402,w=60,h=40"},
      "id": "A34",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessFinishActivity",
      "name": "Stop"
    },
    {
      "attributes": {
        "WORK_DISPLAY_INFO": "x=796,y=282,w=100,h=60",
        "processname": "com.centurylink.mdw.tests.milestones/EMGenric.proc",
        "processversion": "[0.1,1)",
        "synchronous": "true",
        "variables": "{\"salesOrderId\":\"$salesOrderId\",\"jobStepState\":\"JOB_OPN\",\"jobStep\":\"CSSC\",\"decisionResponse\":\"$decisionResponse\",\"notificationType\":\"OTHER\",\"ocPrimaryKeyId\":\"$ocPrimaryKeyId\",\"atlSeidToSend\":\"IQ NETWORKING\",\"codResponse\":\"$codResponseDocument\"}"
      },
      "id": "A37",
      "implementor": "com.centurylink.mdw.workflow.activity.process.InvokeSubProcessActivity",
      "name": "Send notification\r\n to EM",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=936,ly=356,xs=900&973,ys=313&399"},
        "event": "FINISH",
        "id": "T100",
        "to": "A34"
      }]
    },
    {
      "attributes": {
        "WORK_DISPLAY_INFO": "x=282,y=141,w=100,h=60",
        "processname": "com.centurylink.mdw.tests.milestones/EMGenric.proc",
        "processversion": "[0.1,1)",
        "synchronous": "true",
        "variables": "{\"salesOrderId\":\"$salesOrderId\",\"jobStepState\":\"JOB_OPN\",\"jobStep\":\"CSSC\",\"decisionResponse\":\"$decisionResponse\",\"notificationType\":\"OTHER\",\"ocPrimaryKeyId\":\"$ocPrimaryKeyId\",\"atlSeidToSend\":\"IQ NETWORKING\",\"codResponse\":\"$codResponseDocument\"}"
      },
      "id": "A39",
      "implementor": "com.centurylink.mdw.workflow.activity.process.InvokeSubProcessActivity",
      "name": "Send notification\r\n to EM",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=249,ly=175,xs=278&220,ys=175&175"},
        "event": "FINISH",
        "id": "T99",
        "to": "A26"
      }]
    },
    {
      "attributes": {
        "Expression": "transportTypeMatch?'YES':'NO'",
        "SCRIPT": "Groovy",
        "WORK_DISPLAY_INFO": "x=453,y=271,w=117,h=118"
      },
      "id": "A42",
      "implementor": "com.centurylink.mdw.workflow.activity.script.ScriptEvaluator",
      "name": "Is Transport Type \r\nMatch?",
      "transitions": [
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=683,ly=313,xs=574&792,ys=313&313"},
          "event": "FINISH",
          "id": "T101",
          "resultCode": "YES",
          "to": "A37"
        },
        {
          "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=510,ly=409,xs=510&510,ys=394&425"},
          "event": "FINISH",
          "id": "T102",
          "resultCode": "NO",
          "to": "A43"
        }
      ]
    },
    {
      "attributes": {
        "CompletionCode": "BAU_ORDER",
        "TerminationAction": "Complete Process",
        "WORK_DISPLAY_INFO": "x=468,y=428,w=84,h=45"
      },
      "id": "A43",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessFinishActivity",
      "name": "BAU_ORDER"
    },
    {
      "attributes": {
        "WORK_DISPLAY_INFO": "x=474,y=53,w=100,h=60",
        "processname": "com.centurylink.mdw.tests.milestones/Kid.proc",
        "processversion": "[0.1,1)",
        "synchronous": "true"
      },
      "id": "A44",
      "implementor": "com.centurylink.mdw.workflow.activity.process.InvokeSubProcessActivity",
      "name": "Invoke Site Survey",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=527,ly=136,xs=527&527,ys=118&154"},
        "event": "FINISH",
        "id": "T104",
        "to": "A3"
      }]
    }
  ],
  "attributes": {
    "ArrowStyle": "ArrowEnd",
    "NodeStyle": "BoxIcon",
    "PROCESS_VISIBILITY": "PUBLIC",
    "WORK_DISPLAY_INFO": "x=128,y=550,w=173,h=26"
  },
  "variables": {
    "clearPath": {
      "category": "OUTPUT",
      "type": "java.lang.Boolean"
    },
    "codResponseDocument": {
      "category": "INPUT",
      "type": "com.centurylink.mdw.model.StringDocument"
    },
    "comment": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "content": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "dcrValue": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "decisionResponse": {
      "category": "INOUT",
      "type": "com.centurylink.mdw.model.Jsonable"
    },
    "dsrFound": {
      "category": "LOCAL",
      "type": "java.lang.Boolean"
    },
    "highCostPresent": {
      "category": "OUTPUT",
      "type": "java.lang.Boolean"
    },
    "iqSalesOrderId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "isBuild": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "isMailtoRI": {
      "category": "LOCAL",
      "type": "java.lang.Boolean"
    },
    "jeopCode": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "jobStep": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "locationNameDataList": {
      "category": "LOCAL",
      "type": "java.util.List<String>"
    },
    "message": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "ocPrimaryKeyId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "orderConfigurableDate": {
      "category": "LOCAL",
      "type": "java.util.Date"
    },
    "orderRecievedDate": {
      "category": "LOCAL",
      "type": "java.util.Date"
    },
    "parseSiteResponseStr": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "pastDate": {
      "category": "LOCAL",
      "type": "java.lang.Boolean"
    },
    "receiveOrderDate": {
      "category": "LOCAL",
      "type": "java.lang.Object"
    },
    "requestId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "restSiteUrlResponse": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "riemailId": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "salesOrderId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "serviceAddLine1": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "siteLocationName": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "siteOpportunityId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "siteSurveyParsedResponse": {
      "category": "OUTPUT",
      "type": "java.util.Map<String,String>"
    },
    "siteSurveyProvider": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "svcAddressPostal": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "svcAddressState": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "svcCity": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "transportTypeMatch": {
      "category": "OUTPUT",
      "type": "java.lang.Boolean"
    },
    "trnsportTypeFromCOD": {
      "category": "LOCAL",
      "type": "java.lang.String"
    }
  }
}