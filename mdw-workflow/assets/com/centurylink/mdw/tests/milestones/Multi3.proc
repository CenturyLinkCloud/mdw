{
  "activities": [
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=49,y=62,w=60,h=40"},
      "id": "A1",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessStartActivity",
      "name": "StartM3",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=140,ly=82,xs=113&168,ys=82&82"},
        "event": "FINISH",
        "id": "T108",
        "to": "A44"
      }]
    },
    {
      "attributes": {
        "Java": "/**\n * Copyright (c) 2018 CenturyLink, Inc. All Rights Reserved.\n */\n\npackage ctl.aprilia;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.centurylink.mdw.dataaccess.DatabaseAccess;\nimport com.centurylink.mdw.java.JavaExecutionException;\nimport com.centurylink.mdw.java.JavaExecutor;\nimport com.centurylink.mdw.java.MdwJavaException;\nimport com.centurylink.mdw.model.workflow.ActivityRuntimeContext;\nimport com.centurylink.mdw.util.StringHelper;\n\nimport ctl.aprilia.model.testing.CodResponse;\nimport ctl.aprilia.model.testing.E2EDecisionResponseHelper;\nimport ctl.aprilia.model.testing.SiteSurveyValidation;\n\n/**\n * Dynamic Java executor.\n */\npublic class ParserSiteSurvey_A3 implements JavaExecutor {\n\n\tpublic void initialize(ActivityRuntimeContext context) throws MdwJavaException {\n\t\t// TODO Auto-generated method stub\n\t}\n\n\tpublic Object execute(Map<String, Object> variables) throws JavaExecutionException {\n\t\tString responseStatus = \"PROCEED\";\n\t\tif (variables.get(\"siteSurveyParsedResponse\") != null && variables.get(\"decisionResponse\") != null) {\n\t\t\tString codTransportType = null;\n\t\t\tString ipmeAccType = null;\n\t\t\tE2EDecisionResponseHelper e2eDecisionResponseHelper = (E2EDecisionResponseHelper) variables\n\t\t\t\t\t.get(\"decisionResponse\");\n\t\t\tCodResponse codResponse = e2eDecisionResponseHelper.getCodResponse();\n\t\t\tif (codResponse != null) {\n\t\t\t\tcodTransportType = codResponse.getTransProc();\n\t\t\t\tipmeAccType = codResponse.getIpmeAccTyp();\n\t\t\t}\n\n\t\t\tCalendar receiveOrderDate = (Calendar) variables.get(\"receiveOrderDate\");\n\t\t\tDate rcvOrderDate = receiveOrderDate.getTime();\n\n\t\t\tSiteSurveyValidation siteSurveyValidation = new SiteSurveyValidation();\n\n\t\t\tString statusCode = null;\n\t\t\tString statusMessage = null;\n\t\t\tString indicator = null;\n\t\t\tboolean dsrFound = true;\n\t\t\tboolean highCostPresent = false;\n\t\t\tboolean transportTypeMatch = false;\n\t\t\tHashMap<String, String> siteResponse = (HashMap<String, String>) variables.get(\"siteSurveyParsedResponse\");\n\t\t\tif (siteResponse.containsKey(\"STATUS_CODE\") && siteResponse.get(\"STATUS_CODE\") != null\n\t\t\t\t\t&& siteResponse.containsKey(\"STATUS_MESSAGE\")) {\n\t\t\t\tstatusCode = siteResponse.get(\"STATUS_CODE\");\n\t\t\t\tstatusMessage = siteResponse.get(\"STATUS_MESSAGE\");\n\n\t\t\t\tif (\"-1\".equals(statusCode) && statusMessage.contains(\"Unable to locate DSRID in SFAINT\")) {\n\t\t\t\t\tdsrFound = false;\n\t\t\t\t\tresponseStatus = \"INCOMPLETE\";\n\t\t\t\t} else if (\"-2\".equals(statusCode)\n\t\t\t\t\t\t&& statusMessage.contains(\"Unable to locate Site Survey Record in ASSF\")) {\n\t\t\t\t\tdsrFound = false;\n\t\t\t\t\tresponseStatus = \"INCOMPLETE\";\n\t\t\t\t} else if (\"0\".equals(statusCode) && \"Success\".equalsIgnoreCase(statusMessage)) {\n\t\t\t\t\tif (siteResponse.containsKey(\"CLEAR_PATH_NEEDED\") && siteResponse.containsKey(\"FIBER_BUILD_REQUIRED\")) \n\t\t\t\t\t{\n\t\t\t\t\t\tresponseStatus = \"COMPLETE\";\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresponseStatus = \"INCOMPLETE\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindicator = responseStatus;\n\n\t\t\t\tif (\"INCOMPLETE\".equalsIgnoreCase(responseStatus)) {\n\t\t\t\t\tDate orderConfigurableDate = (Date) variables.get(\"orderConfigurableDate\");\n\n\t\t\t\t\tCalendar cal = Calendar.getInstance();\n\t\t\t\t\tDate today = cal.getTime();\n\t\t\t\t\tif (today.compareTo(orderConfigurableDate) >= 0) {\n\t\t\t\t\t\tsiteSurveyValidation.setPastDate(true);\n\t\t\t\t\t\tvariables.put(\"pastDate\", true);\n\t\t\t\t\t\tvariables.put(\"isBuild\", false);\n\t\t\t\t\t\tvariables.put(\"highCostPresent\", false);\n\t\t\t\t\t\tvariables.put(\"clearPath\", false);\n\t\t\t\t\t\tresponseStatus = \"PROCEED\";\n\t\t\t\t\t\tindicator = \"Past Date\";\n\t\t\t\t\t\treturn responseStatus;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\"COMPLETE\".equalsIgnoreCase(responseStatus)) {\n\t\t\t\t\tif (siteResponse.containsKey(\"CLEAR_PATH_NEEDED\")\n\t\t\t\t\t\t\t&& \"YES\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_NEEDED\"))) {\n\t\t\t\t\t\tvariables.put(\"clearPath\", true);\n\t\t\t\t\t\tif (siteResponse.containsKey(\"PERFORMED_BY\")\n\t\t\t\t\t\t\t\t&& !StringHelper.isEmpty(siteResponse.get(\"PERFORMED_BY\"))) {\n\t\t\t\t\t\t\tString siteSurveyProvider = siteResponse.get(\"PERFORMED_BY\").toUpperCase();\n\t\t\t\t\t\t\tif (siteSurveyProvider.contains(\"CUSTOMER\") && siteSurveyProvider.contains(\"CENTURYLINK\")) {\n\t\t\t\t\t\t\t\tsiteSurveyProvider = \"CUSTOMER\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariables.put(\"siteSurveyProvider\", siteSurveyProvider);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvariables.put(\"clearPath\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (siteResponse.containsKey(\"CLEAR_PATH_NEEDED\") && siteResponse.containsKey(\"CLEAR_PATH_PERFORMED_BY\")\n\t\t\t\t\t\t&& siteResponse.containsKey(\"CLEAR_PATH_TECHNICIAN\")\n\t\t\t\t\t\t&& \"YES\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_NEEDED\"))\n\t\t\t\t\t\t&& \"Customer\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_PERFORMED_BY\"))\n\t\t\t\t\t\t&& \"Unknown\".equalsIgnoreCase(siteResponse.get(\"CLEAR_PATH_TECHNICIAN\"))) {\n\t\t\t\t\tvariables.put(\"isMailtoRI\", true);\n\n\t\t\t\t} else {\n\t\t\t\t\tvariables.put(\"isMailtoRI\", false);\n\t\t\t\t}\n\n\t\t\t\tif (\"COMPLETE\".equalsIgnoreCase(responseStatus) && siteResponse.containsKey(\"HIGH_COST_PRESENT\")\n\t\t\t\t\t\t&& siteResponse.get(\"HIGH_COST_PRESENT\") != null) {\n\t\t\t\t\tif (\"Yes\".equalsIgnoreCase(siteResponse.get(\"HIGH_COST_PRESENT\"))) {\n\t\t\t\t\t\thighCostPresent = true;\n\t\t\t\t\t\tindicator = \"High Cost Present\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\"COMPLETE\".equalsIgnoreCase(responseStatus) && codTransportType != null\n\t\t\t\t\t\t&& siteResponse.containsKey(\"TRANSPORT_TYPE\") && siteResponse.get(\"TRANSPORT_TYPE\") != null) {\n\n\t\t\t\t\tif (\"ETHERNET\".equalsIgnoreCase(codTransportType) && \"NA\".equalsIgnoreCase(ipmeAccType)\n\t\t\t\t\t\t\t&& (\"MTU\".equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\"))\n\t\t\t\t\t\t\t\t\t|| \"SWITCHED ETHERNET\".equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\")))) {\n\t\t\t\t\t\ttransportTypeMatch = true;\n\t\t\t\t\t} else if (\"ETHERNET\".equalsIgnoreCase(codTransportType) && \"GPON\".equalsIgnoreCase(ipmeAccType)\n\t\t\t\t\t\t\t&& \"GPON\".equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\"))) {\n\t\t\t\t\t\ttransportTypeMatch = true;\n\t\t\t\t\t} else if (codTransportType.equalsIgnoreCase(siteResponse.get(\"TRANSPORT_TYPE\"))) {\n\t\t\t\t\t\ttransportTypeMatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!transportTypeMatch) {\n\t\t\t\t\t\tindicator = \"Transport Type is not matching\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsiteSurveyValidation.setHighCostIndiPresent(highCostPresent);\n\t\t\t\tsiteSurveyValidation.setTransportTypeSame(transportTypeMatch);\n\t\t\t\tsiteSurveyValidation.setDsridFound(dsrFound);\n\n\t\t\t\tif (siteSurveyValidation != null) {\n\t\t\t\t\te2eDecisionResponseHelper.setSiteSurveyValidation(siteSurveyValidation);\n\t\t\t\t}\n\t\t\t\tString isBuildRequired = \"NO\";\n\t\t\t\tif (siteResponse.containsKey(\"FIBER_BUILD_REQUIRED\")\n\t\t\t\t\t\t&& siteResponse.get(\"FIBER_BUILD_REQUIRED\").toUpperCase().equals(\"YES\"))\n\t\t\t\t\tisBuildRequired = \"YES\";\n\t\t\t\tvariables.put(\"isBuild\", isBuildRequired);\n\t\t\t\tvariables.put(\"decisionResponse\", e2eDecisionResponseHelper);\n\n\t\t\t\tvariables.put(\"dsrFound\", dsrFound);\n\t\t\t\tvariables.put(\"highCostPresent\", highCostPresent);\n\t\t\t\tvariables.put(\"transportTypeMatch\", transportTypeMatch);\n\n\t\t\t\tthis.logSiteSurvey(variables, rcvOrderDate, indicator);\n\t\t\t}\n\t\t}\n\t\treturn responseStatus;\n\t}\n\n\tprivate void logSiteSurvey(Map<String, Object> variables, Date rcvOrderDate, String indicator) {\n\t\tHashMap<String, String> siteResponse = (HashMap<String, String>) variables.get(\"siteSurveyParsedResponse\");\n\t\tString siteSurveyParsedResponse = siteResponse.toString();\n\t\tString statusCode = siteResponse.get(\"STATUS_CODE\");\n\t\tString statusMessage = siteResponse.get(\"STATUS_MESSAGE\");\n\t\tString salesOrderId = (String) variables.get(\"salesOrderId\");\n\t\tString siteOpportunityId = (String) variables.get(\"siteOpportunityId\");\n\t\tString siteLocationName = (String) variables.get(\"siteLocationName\");\n\t\tif (!StringHelper.isEmpty(siteLocationName)) {\n\t\t\tsiteLocationName = siteLocationName.replaceAll(\"%20\", \" \");\n\t\t}\n\t\tString requestId = (String) variables.get(\"requestId\");\n\n\t\tDate completionDate = null;\n\t\tif (siteResponse.containsKey(\"SS_COMP_DATE\") && !StringHelper.isEmpty(siteResponse.get(\"SS_COMP_DATE\"))) {\n\t\t\tcompletionDate = new Date(Long.parseLong(siteResponse.get(\"SS_COMP_DATE\")));\n\t\t}\n\t\tDate modifiedDate = new Date();\n\n\t\tDatabaseAccess databaseAccess = new DatabaseAccess(\"FiberPlusDataSource\");\n\t\ttry {\n\t\t\tdatabaseAccess.openConnection();\n\t\t} catch (SQLException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\tString aprilia_report_query = \"SELECT REPORT_ID FROM aprilia_report WHERE REPORT_NAME ='Site Survey'\";\n\n\t\ttry {\n\t\t\tResultSet resultSet = databaseAccess.runSelect(aprilia_report_query);\n\t\t\tif (resultSet != null && resultSet.next()) {\n\t\t\t\tlong reportId = resultSet.getLong(\"REPORT_ID\");\n\t\t\t\tresultSet = null;\n\t\t\t\tString report_uniquer_key_query = \"INSERT INTO report_unique_key (UNIQUE_KEY_NAME_1, UNIQUE_KEY_VALUE_1, UNIQUE_KEY_NAME_2, UNIQUE_KEY_VALUE_2, UNIQUE_KEY_NAME_3, UNIQUE_KEY_VALUE_3) VALUES (?, ?, ?, ?, ?, ?)\";\n\t\t\t\tObject[] arguments_1 = { \"REQUESTID\", requestId, \"SALESORDERID\", salesOrderId, \"OPPORTUNITYID\",\n\t\t\t\t\t\tsiteOpportunityId };\n\t\t\t\tint update = databaseAccess.runUpdate(report_uniquer_key_query, arguments_1);\n\t\t\t\tif (update > 0) {\n\n\t\t\t\t\tString uniqueKeyQuery = \"SELECT MAX(REPORT_UNIQUE_KEY_ID) as unique_key_id FROM report_unique_key\";\n\t\t\t\t\tresultSet = databaseAccess.runSelect(uniqueKeyQuery);\n\t\t\t\t\tif (resultSet != null && resultSet.next()) {\n\t\t\t\t\t\tlong report_unique_key_id = resultSet.getLong(\"unique_key_id\");\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\tString aprilia_report_field_query = \"INSERT INTO aprilia_report_field (REPORT_ID, LOCATIONNAME, RESPONSE, INDICATOR, STATUSMESSAGE , STATUSCODE, ORDERRECEIVEDATE, COMPLETIONDATE, LASTUPDATEDATE, REPORT_UNIQUE_KEY_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\t\t\t\t\t\tObject[] arguments_2 = { reportId, siteLocationName, siteSurveyParsedResponse, indicator,\n\t\t\t\t\t\t\t\tstatusMessage, statusCode, rcvOrderDate, completionDate, modifiedDate,\n\t\t\t\t\t\t\t\treport_unique_key_id };\n\t\t\t\t\t\tdatabaseAccess.runUpdate(aprilia_report_field_query, arguments_2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n",
        "Output Documents": "[\"decisionResponse\",\"siteSurveyParsedResponse\"]",
        "WORK_DISPLAY_INFO": "x=341,y=56,w=93,h=65"
      },
      "id": "A3",
      "implementor": "com.centurylink.mdw.workflow.activity.java.DynamicJavaActivity",
      "name": "DJ2",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=514,ly=84,xs=438&591,ys=84&84"},
        "event": "FINISH",
        "id": "T109",
        "to": "A34"
      }]
    },
    {
      "attributes": {"WORK_DISPLAY_INFO": "x=594,y=64,w=60,h=40"},
      "id": "A34",
      "implementor": "com.centurylink.mdw.workflow.activity.process.ProcessFinishActivity",
      "name": "Stop3"
    },
    {
      "attributes": {
        "WORK_DISPLAY_INFO": "x=169,y=52,w=100,h=60",
        "processname": "com.centurylink.mdw.tests.milestones/Kid.proc",
        "processversion": "[0.1,1)",
        "synchronous": "true"
      },
      "id": "A44",
      "implementor": "com.centurylink.mdw.workflow.activity.process.InvokeSubProcessActivity",
      "name": "Invoke\nKid",
      "transitions": [{
        "attributes": {"TRANSITION_DISPLAY_INFO": "type=Elbow,lx=305,ly=84,xs=273&338,ys=84&84"},
        "event": "FINISH",
        "id": "T104",
        "to": "A3"
      }]
    }
  ],
  "attributes": {
    "ArrowStyle": "ArrowEnd",
    "NodeStyle": "BoxIcon",
    "PROCESS_VISIBILITY": "PUBLIC",
    "WORK_DISPLAY_INFO": "x=49,y=128,w=63,h=26"
  },
  "variables": {
    "clearPath": {
      "category": "OUTPUT",
      "type": "java.lang.Boolean"
    },
    "codResponseDocument": {
      "category": "INPUT",
      "type": "com.centurylink.mdw.model.StringDocument"
    },
    "comment": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "content": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "dcrValue": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "decisionResponse": {
      "category": "INOUT",
      "type": "com.centurylink.mdw.model.Jsonable"
    },
    "dsrFound": {
      "category": "LOCAL",
      "type": "java.lang.Boolean"
    },
    "highCostPresent": {
      "category": "OUTPUT",
      "type": "java.lang.Boolean"
    },
    "iqSalesOrderId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "isBuild": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "isMailtoRI": {
      "category": "LOCAL",
      "type": "java.lang.Boolean"
    },
    "jeopCode": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "jobStep": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "locationNameDataList": {
      "category": "LOCAL",
      "type": "java.util.List<String>"
    },
    "message": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "ocPrimaryKeyId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "orderConfigurableDate": {
      "category": "LOCAL",
      "type": "java.util.Date"
    },
    "orderRecievedDate": {
      "category": "LOCAL",
      "type": "java.util.Date"
    },
    "parseSiteResponseStr": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "pastDate": {
      "category": "LOCAL",
      "type": "java.lang.Boolean"
    },
    "receiveOrderDate": {
      "category": "LOCAL",
      "type": "java.lang.Object"
    },
    "requestId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "restSiteUrlResponse": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "riemailId": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "salesOrderId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "serviceAddLine1": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "siteLocationName": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "siteOpportunityId": {
      "category": "INPUT",
      "type": "java.lang.String"
    },
    "siteSurveyParsedResponse": {
      "category": "OUTPUT",
      "type": "java.util.Map<String,String>"
    },
    "siteSurveyProvider": {
      "category": "OUTPUT",
      "type": "java.lang.String"
    },
    "svcAddressPostal": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "svcAddressState": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "svcCity": {
      "category": "LOCAL",
      "type": "java.lang.String"
    },
    "transportTypeMatch": {
      "category": "OUTPUT",
      "type": "java.lang.Boolean"
    },
    "trnsportTypeFromCOD": {
      "category": "LOCAL",
      "type": "java.lang.String"
    }
  }
}