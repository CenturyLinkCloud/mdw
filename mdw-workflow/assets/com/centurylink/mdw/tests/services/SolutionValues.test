package com.centurylink.mdw.tests.services

import groovy.json.JsonSlurper
import org.json.JSONObject
import org.json.JSONArray

def getJson(Map<String,String> map) {
    if (map == null)
        return null;
    JSONObject jsonObj = new JSONObject();
    for (String key : map.keySet()) {
        String value = map.get(key);
        if (value != null)
            jsonObj.put(key, value);
    }
    return jsonObj;
}

def id1 = 'sol-' + masterRequestId + '_1'
def name1 = 'Test: ' + id1
def solution1 = new JSONObject()
solution1.put('id', id1)
solution1.put('name', name1)
def id2 = 'sol-' + masterRequestId + '_2'
def name2= 'Test: ' + id2
def solution2 = new JSONObject()
solution2.put('id', id2)
solution2.put('name', name2)
solution1.put('description', 'Solution for automated test')
solution2.put('description', 'Solution for automated test')
solution1.put('ownerType', 'USER')
solution2.put('ownerType', 'USER')
solution1.put('ownerId', 'dxoakes')
solution2.put('ownerId', 'dxoakes')

// create solutions
def response = post http("services/Solutions/${id1}") {
    user  = 'mdwapp'
    password = 'mdwapp'
    payload = solution1.toString(2)
}
assert new JsonSlurper().parseText(response.content).status.code == 200
response = post http("services/Solutions/${id2}") {
    user  = 'mdwapp'
    password = 'mdwapp'
    payload = solution2.toString(2)
}
assert new JsonSlurper().parseText(response.content).status.code == 200

// confirm solutions
response = get http("services/Solutions/${id1}")
assert response.code == 200
assert new JsonSlurper().parseText(response.content).id == id1
response = get http("services/Solutions/${id2}")
assert response.code == 200
assert new JsonSlurper().parseText(response.content).id == id2

// add some values
def valName1 = 'testVal1_' + masterRequestId
def valName2 = 'testVal2_' + masterRequestId
def values = [:]
values[valName1] = id1
values[valName2] = 'something_' + id1
response = post http("services/Values/SOLUTION/${id1}") {
    user  = 'mdwapp'
    password = 'mdwapp'
    payload = getJson(values)
}
values = [:]
values[valName1] = id2
values[valName2] = 'somethingElse_' + id2
response = put http("services/Values/SOLUTION/${id2}") {
    user  = 'mdwapp'
    password = 'mdwapp'
    payload = getJson(values)
}

// find solutions based on values
def contains(jsonArray, value) {
    for (def i = 0; i < jsonArray.length(); i++) {
        if (jsonArray.getString(i).equals(value))
          return true;
    }
    return false;
}
// by name
response = get http("services/ValueHolders/${valName1}")
assert response.code == 200
assert contains(new JSONArray(response.content), id1)
assert contains(new JSONArray(response.content), id2)
// by name and value
response = get http("services/ValueHolders/${valName1}/${id1}")
assert response.code == 200
assert contains(new JSONArray(response.content), id1)
assert !contains(new JSONArray(response.content), id2)
// by name, value and ownerType
response = get http("services/ValueHolders/${valName1}/${id1}?holderType=SOLUTION")
assert response.code == 200
assert contains(new JSONArray(response.content), id1)
assert !contains(new JSONArray(response.content), id2)
// by name and value wildcard
response = get http("services/ValueHolders/${valName2}/something*")
assert response.code == 200
assert contains(new JSONArray(response.content), id1)
assert contains(new JSONArray(response.content), id2)
response = get http("services/ValueHolders/${valName2}/somethingElse*")
assert response.code == 200
assert !contains(new JSONArray(response.content), id1)
assert contains(new JSONArray(response.content), id2)

// cleanup
response = delete http("services/Solutions/${id1}") {
    user  = 'mdwapp'
    password = 'mdwapp'
}
assert new JsonSlurper().parseText(response.content).status.code == 200
response = delete http("services/Solutions/${id2}") {
    user  = 'mdwapp'
    password = 'mdwapp'
}
assert new JsonSlurper().parseText(response.content).status.code == 200

// confirm cleanup
response = get http("services/Solutions/${id1}")
assert response.code == 404
response = get http("services/Values/SOLUTION/${id1}")
assert response.content == '{}'
response = get http("services/Solutions/${id2}")
assert response.code == 404
response = get http("services/Values/SOLUTION/${id2}")
assert response.content == '{}'

