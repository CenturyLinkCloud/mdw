import groovy.json.JsonSlurper
import groovy.json.JsonOutput

svcPkg = 'com.centurylink.mdw.tests.services'
wfPkg = 'com.centurylink.mdw.tests.workflow'

allValues = [:];

def vals = [
    'asset-path': wfPkg + '/Inflight.proc'
];

// cleanup if exists
def DEL = request(svcPkg + '/asset-apis.postman/DEL:asset') {
    values = vals;
    options = [ captureResult: false ]
}
def response = submit DEL
//if (response.status.code != 404)
//    refreshCache()

// create new
vals['asset-name'] = 'Inflight.proc'
def POST = request(svcPkg + '/asset-apis.postman/POST:asset') {
    values = vals
}
response = submit POST
assert response.status.code == 200

// get v0.1 def
vals['asset-path'] = wfPkg + '/InflightBefore.proc'
def GET = request(svcPkg + '/asset-apis.postman/GET:asset') {
    values = vals
}
response = submit GET
assert response.status.code == 200

// update with v0.1 def
vals['asset-path'] = wfPkg + '/Inflight.proc'
vals['version'] = '0.1'
vals['proc-def-json'] = response.body
def PUT = request(svcPkg + '/asset-apis.postman/PUT:asset') {
    values = vals
}
response = submit PUT
assert response.status.code == 200

//refreshCache()

def oldProcRun = startProcess('oldOldVar')
sleep 5

// get v0.2 def
vals['asset-path'] = wfPkg + '/InflightAfter.proc'
GET = request(svcPkg + '/asset-apis.postman/GET:asset') {
    values = vals
}
response = submit GET
assert response.status.code == 200

// update with v0.2 def
vals['asset-path'] = wfPkg + '/Inflight.proc'
vals['version'] = '0.2'
vals['proc-def-json'] = response.body
PUT = request(svcPkg + '/asset-apis.postman/PUT:asset') {
    values = vals
}
response = submit PUT
assert response.status.code == 200

//refreshCache()

def newProcRun = startProcess('newOldVar')
sleep 5

// resume old and new process
notifyProcess(oldProcRun.masterRequestId)
notifyProcess(newProcRun.masterRequestId)
sleep 5

// retrieve instance values for verification
getValues(oldProcRun.instanceId)
def values = getValues(newProcRun.instanceId)

Object startProcess(String oldVar) {
    def vals = ['process-path': wfPkg + '/Inflight.proc']
    def GET = request(svcPkg + '/process-apis.postman/GET:summary') {
        values = vals
    }
    def resp = submit GET
    assert resp.status.code == 200
    def sum = new JsonSlurper().parseText(resp.body)
    vals['process-id'] = sum.id
    GET = request(svcPkg + '/process-apis.postman/GET:run') {
        values = vals
    }
    resp = submit GET
    assert resp.status.code == 200
    def procRun = new JsonSlurper().parseText(resp.body)
    procRun.values.oldVar.value = oldVar
    def procRunJson = JsonOutput.toJson(procRun)
    vals['proc-run-json'] = procRunJson
    def POST = request(svcPkg + '/process-apis.postman/POST:run') {
        values = vals
    }
    resp = submit POST
    assert resp.status.code == 200
    return new JsonSlurper().parseText(resp.body)
}

Object notifyProcess(masterRequestId) {
    def POST = request(svcPkg + '/process-apis.postman/POST:events/{event-id}') {
        values = ['event-id': masterRequestId]
    }
    def response = submit POST
    assert response.status.code == 200
    return new JsonSlurper().parseText(response.body)
}

Object getValues(processInstanceId) {
    def GET = request(svcPkg + '/process-apis.postman/GET:{process-instance-id}/values') {
        values = ['process-instance-id': processInstanceId]
    }
    def response = submit GET
    assert response.status.code == 200
    return new JsonSlurper().parseText(response.body)
}

Object refreshCache() {
    // refresh the cache (TODO: exclude?)
    def POST = request(svcPkg + '/asset-apis.postman/POST:refresh') {
        values = [:]
    }
    def response = submit POST
    assert response.status.code == 200
    return new JsonSlurper().parseText(response.body)
}