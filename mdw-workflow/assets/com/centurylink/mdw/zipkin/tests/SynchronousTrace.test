package com.centurylink.mdw.zipkin.tests

import com.centurylink.mdw.util.log.LoggerUtil

import static brave.internal.HexCodec.writeHexLong
import static java.time.Instant.now

def logger = LoggerUtil.getStandardLogger()

masterRequestId = Long.toHexString(now().toEpochMilli())
println "masterRequestId: " + masterRequestId

def tracer = brave.Tracing.currentTracer()
def span = tracer.nextSpan().name("inService").start()
traceId = span.context().traceIdString()
println "traceId: " + traceId

def scopedSpan = tracer.startScopedSpan("childSpan")
try {
    def spanRes = new char[16]
    span = tracer.currentSpan()
    writeHexLong(spanRes, 0, span.context().spanId())
    spanId = new String(spanRes)
    println "spanId: " + spanId

    logger.info("", "FortuneService >> GET")

    def response = get http("api/com/centurylink/mdw/zipkin/tests/fortune") {
        headers = [
                "Accept": "application/json",
                "mdw-request-id": masterRequestId,
                "x-b3-traceid": traceId,
                "x-b3-spanid": spanId,
                "x-b3-parentspanid": traceId,
                "x-b3-sampled": "1"
        ]
    }
    assert response.code == 200

    wait process("FortuneMain")  {
        // wait process times out -- TODO: why?
        timeout = 10
    }
    verify processes("FortuneMain", "FortuneSub", "AsyncSub")
} finally {
    scopedSpan.finish()
    span.finish()
}