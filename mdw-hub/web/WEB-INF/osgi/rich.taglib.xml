<?xml version="1.0" encoding="UTF-8"?>
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd" id="rich">
    <namespace>http://richfaces.org/rich</namespace>
    <tag>
        <tag-name>accordion</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:accordion&amp;gt; is a series of panels stacked on top of each other, each collapsed such that only the header of the panel is showing. When the header of a panel is clicked, it is expanded to show the content of the panel. Clicking on a different header will collapse the previous panel and epand the selected one. Each panel contained in a &amp;lt;rich:accordion&amp;gt; component is a &amp;lt;rich:accordionItem&amp;gt; component.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.Accordion</component-type>
            <renderer-type>org.richfaces.AccordionRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.html.TogglePanelTagHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:accordion&amp;gt; is a series of panels stacked on top of each other, each collapsed such that only the header of the panel is showing. When the header of a panel is clicked, it is expanded to show the content of the panel. Clicking on a different header will collapse the previous panel and epand the selected one. Each panel contained in a &amp;lt;rich:accordion&amp;gt; component is a &amp;lt;rich:accordionItem&amp;gt; component.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>Holds the active tab name. This name is a reference to the name identifier of the active child &amp;lt;rich:tab&amp;gt; component.</description>
            <name>activeItem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Applicable when cycling through the tabs. If "true", then when the last tab is active, cycling to next will activate the first tab, if "false", cycling to next will have not effect. The inverse applies for the first tab, and cycling to previous. Whether to Default: false</description>
            <name>cycledSwitching</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The height of the panel</description>
            <name>height</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the panel header when the panel is active</description>
            <name>itemActiveHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is active</description>
            <name>itemActiveLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is active</description>
            <name>itemActiveRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Occurs on the server side when an item is changed through Ajax using the server mode</description>
            <name>itemChangeListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>A CSS class applied to each of the accordionItem children</description>
            <name>itemContentClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the panel header when the panel is disabled</description>
            <name>itemDisabledHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is disabled</description>
            <name>itemDisabledLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is disabled</description>
            <name>itemDisabledRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the panel header</description>
            <name>itemHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the panel header when the panel is not active</description>
            <name>itemInactiveHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is not active</description>
            <name>itemInactiveLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is not active</description>
            <name>itemInactiveRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Points to the function to perform when before the switchable item is changed</description>
            <name>onbeforeitemchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Points to the function to perform when the switchable item is changed.</description>
            <name>onitemchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch mode when a panel is activated. One of: "client", "server", "ajax". Default: "ajax"</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The width of the panel</description>
            <name>width</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>accordionItem</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:accordionItem&amp;gt; component is a panel for use with the &amp;lt;rich:accordion&amp;gt; component. &amp;lt;rich:accordionItem&amp;gt; components can be added dynamically using iteration models with the &amp;lt;c:forEach&amp;gt; tag.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.AccordionItem</component-type>
            <renderer-type>org.richfaces.AccordionItemRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:accordionItem&amp;gt; component is a panel for use with the &amp;lt;rich:accordion&amp;gt; component. &amp;lt;rich:accordionItem&amp;gt; components can be added dynamically using iteration models with the &amp;lt;c:forEach&amp;gt; tag.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the panel content</description>
            <name>contentClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether toggling of this panel is disabled</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Provides the text on the panel header. The panel header is all that is visible when the accordion item is collapsed. &lt;/p&gt; &lt;p&gt; Alternatively the header facet could be used in place of the header attribute. This would allow for additional styles and custom content to be applied to the tab. &lt;/p&gt;</description>
            <name>header</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header when this panel is active</description>
            <name>headerActiveClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header when this panel is disabled</description>
            <name>headerDisabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header when this panel is inactive</description>
            <name>headerInactiveClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS style applied to the header</description>
            <name>headerStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is active</description>
            <name>leftActiveIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is not active</description>
            <name>leftDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is disabled</description>
            <name>leftInactiveIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The name of the panel, used for identifying and manipulating the active panel</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function to perform when the mouse enters the panel</description>
            <name>onenter</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the header of this element.</description>
            <name>onheaderclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the header of this element.</description>
            <name>onheaderdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the header of this element.</description>
            <name>onheadermousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the header of this element.</description>
            <name>onheadermousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the header of this element.</description>
            <name>onheadermouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function to perform when the mouse leaves the panel.</description>
            <name>onleave</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is active</description>
            <name>rightActiveIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is disabled</description>
            <name>rightDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is not active</description>
            <name>rightInactiveIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch mode when a panel is activated. One of: "client", "server", "ajax". Default: "ajax"</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>autocomplete</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:autocomplete&amp;gt; component is an auto-completing input-box with built-in Ajax capabilities. It supports client-side suggestions, browser-like selection, and customization of the look and feel.&lt;/p&gt; @author Nick Belaevski</description>
            <component-type>org.richfaces.Autocomplete</component-type>
            <renderer-type>org.richfaces.AutocompleteRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.AutocompleteHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:autocomplete&amp;gt; component is an auto-completing input-box with built-in Ajax capabilities. It supports client-side suggestions, browser-like selection, and customization of the look and feel.&lt;/p&gt; @author Nick Belaevski</description>
        <attribute>
            <description>A collection of suggestions that will be resented to the user</description>
            <name>autocompleteList</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A method which returns a list of suggestions according to a supplied prefix</description>
            <name>autocompleteMethod</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Causes the combo-box to fill the text field box with a matching suggestion as the user types</description>
            <name>autofill</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; A javascript function used to filter the result list returned from the ajax call to the server. This function should have two parameters; subString(current input value considering tokens) and value (currently iterated item value) and return boolean flag which means if the value satisfies the substring passed. The function will be called for every available suggestion in order to construct a new list of suggestions. &lt;/p&gt; &lt;p&gt;Default: A javascript method called &lt;i&gt;startsWith&lt;/i&gt;&lt;/p&gt;</description>
            <name>clientFilterFunction</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean value indicating whether this component is disabled &lt;p&gt;Default: false&lt;/p&gt;</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A value to set in the target input element on a choice suggestion that isn't shown in the suggestion table. It can be used for descriptive output comments or suggestions. If not set, all text in the suggestion row is set as a value</description>
            <name>fetchValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the input element</description>
            <name>inputClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Type of the layout encoded using nested components should be defined using layout attribute. Possible values are: &lt;/p&gt; &lt;dl&gt; &lt;dt&gt;list&lt;/dt&gt; &lt;dd&gt;suggestions wrapped to HTML unordered list&lt;/dd&gt; &lt;dt&gt;div&lt;/dt&gt; &lt;dd&gt;suggestions wrapped with just div element&lt;/dd&gt; &lt;dt&gt;table&lt;/dt&gt; &lt;dd&gt;suggestions are encoded as table rows, column definitions are required in this case&lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;Default: div&lt;/p&gt;</description>
            <name>layout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Minimal number of chars in input to activate suggestion popup</description>
            <name>minChars</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Determine how the suggestion list is requested:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;client&lt;/dt&gt; &lt;dd&gt;pre-loads data to the client and uses the input to filter the possible suggestions&lt;/dd&gt; &lt;dt&gt;ajax&lt;/dt&gt; &lt;dd&gt;fetches suggestions with every input change using Ajax requests&lt;/dd&gt; &lt;dt&gt;lazyClient&lt;/dt&gt; &lt;dd&gt; pre-loads data to the client and uses the input to filter the possible suggestions. The filtering does not start until the input length matches a minimum value. Set the minimum value with the minChars attribute. &lt;/dd&gt; &lt;dt&gt;cachedAjax&lt;/dt&gt; &lt;dd&gt; pre-loads data via Ajax requests when the input length matches a minimum value. Set the minimum value with the minChars attribute. All suggestions are handled on the client until the input prefix is changed, at which point a new request is made based on the new input prefix &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;Default: cachedAjax&lt;/p&gt;</description>
            <name>mode</name>
            <type>org.richfaces.component.AutocompleteMode</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon />
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when an error has occurred during Ajax communications</description>
            <name>onerror</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon />
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the popup list element.</description>
            <name>onlistclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <name>onlistdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <name>onlistkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <name>onlistkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <name>onlistkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <name>onlistmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <name>onlistmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <name>onlistmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <name>onlistmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <name>onlistmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when an item is selected</description>
            <name>onselectitem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the content of the popup suggestion element</description>
            <name>popupClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean value indicating whether the first suggestion item is selected as the user types &lt;p&gt;Default: true&lt;/p&gt;</description>
            <name>selectFirst</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the selected suggestion entry</description>
            <name>selectedItemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Boolean value indicating whether to display a button to expand the popup suggestion element&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt;</description>
            <name>showButton</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon />
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Allow a user to enter multiple values separated by specific characters. As the user types, a suggestion will present as normal. When they enter the specified token character, this begins a new suggestion process, and the component will then only use text entered after the token character for suggestions.&lt;/p&gt; &lt;p&gt;Make sure that no character defined in tokens is part of any suggestion value. E.g. do not use space as a token if you expect to allow spaces in suggestion values.&lt;/p&gt; &lt;p&gt;When tokens defined, they can be naturally separated by space character - input separated by tokens ', ' or ' ,' will be considered as it would be ',' token without any space.&lt;/p&gt;</description>
            <name>tokens</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>calendar</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:calendar&amp;gt; component allows the user to enter a date and time through an in-line or pop-up calendar. The pop-up calendar can navigate through months and years, and its look and feel can be highly customized. &lt;/p&gt; @author amarkhel</description>
            <component-type>org.richfaces.Calendar</component-type>
            <renderer-type>org.richfaces.CalendarRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.CalendarHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:calendar&amp;gt; component allows the user to enter a date and time through an in-line or pop-up calendar. The pop-up calendar can navigate through months and years, and its look and feel can be highly customized. &lt;/p&gt; @author amarkhel</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; This attribute is responsible for behaviour of dates from the previous and next months which are displayed in the current month. Valid values are "inactive" (Default) dates inactive and gray colored, "scroll" boundaries work as month scrolling controls, and "select" boundaries work in the same way as "scroll" but with the date clicked selection &lt;/p&gt; &lt;p&gt; Default value is "inactive" &lt;/p&gt;</description>
            <name>boundaryDatesMode</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the button element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>buttonClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines disabled icon for the popup button element. The attribute is ignored if the "buttonLabel" is set</description>
            <name>buttonDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines icon for the popup button element. The attribute is ignored if the "buttonLabel" is set</description>
            <name>buttonIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines label for the popup button element. If the attribute is set "buttonIcon" and "buttonIconDisabled" are ignored</description>
            <name>buttonLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Used to define the month and year which will be displayed</description>
            <name>currentDate</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Used to provide data for calendar elements. If data is not provided, all Data Model related functions are disabled</description>
            <name>dataModel</name>
            <type>org.richfaces.model.CalendarDataModel</type>
        </attribute>
        <attribute>
            <description>Used to format the date and time strings, according to ISO 8601 (for example, d/M/yy HH:mm a)</description>
            <name>datePattern</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The javascript function that determines the CSS style class for each day cell</description>
            <name>dayClassFunction</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; The javascript function that enables or disables a day cell &lt;/p&gt;</description>
            <name>dayDisableFunction</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The starting label can be set when in the initial view state. If the initial value is already set through the value attribute, this is displayed instead.</description>
            <name>defaultLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Defines time that will be used: &lt;/p&gt; &lt;ol&gt; &lt;li&gt;to set time when the value is empty&lt;/li&gt; &lt;li&gt;to set time when date changes and flag "resetTimeOnDateSelect" is true&lt;/li&gt; &lt;/ol&gt; &lt;p&gt; Default value is "getDefaultValueOfDefaultTime()" &lt;/p&gt;</description>
            <name>defaultTime</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the direction of the popup. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Direction</display-name>
            <icon />
            <name>direction</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If "true", rendered is disabled. In "popup" mode both controls are disabled &lt;/p&gt; &lt;p&gt; Default value is "false" &lt;/p&gt;</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If "true" calendar input will be editable and it will be possible to change the date manually. If "false" the text field will be "read-only", so the value can be changed only from a handle. &lt;/p&gt; &lt;p&gt; Default value is "false" &lt;/p&gt;</description>
            <name>enableManualInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Determines the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France. Possible values should be integers from 0 to 6, 0 corresponds to Sunday &lt;/p&gt; &lt;p&gt; Default value is "getDefaultFirstWeekDay()" &lt;/p&gt;</description>
            <name>firstWeekDay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the horizontal offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Horizontal Offset</display-name>
            <icon />
            <name>horizontalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the input element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>inputClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines the size of an input field. Similar to the "size" attribute of &amp;lt;h:inputText/&amp;gt;</description>
            <name>inputSize</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied to the input element</description>
            <name>inputStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the corner attachment point with which the popup should be connected. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Joint Point</display-name>
            <icon />
            <name>jointPoint</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Used for locale definition &lt;/p&gt; &lt;p&gt; Default value is "getDefaultLocale()" &lt;/p&gt;</description>
            <name>locale</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1. If the minimal days required must be a full week, this method returns 7. &lt;/p&gt; &lt;p&gt; Default value is "getDefaultMinDaysInFirstWeek()" &lt;/p&gt;</description>
            <name>minDaysInFirstWeek</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Valid values: ajax or client &lt;/p&gt; &lt;p&gt; Default value is "client" &lt;/p&gt;</description>
            <name>mode</name>
            <type>org.richfaces.component.AbstractCalendar.Mode</type>
        </attribute>
        <attribute>
            <description>Attribute that allows to customize names of the months. Should accept list with the month names</description>
            <name>monthLabels</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Attribute that allows to customize short names of the months. Should accept list with the month names</description>
            <name>monthLabelsShort</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the current month or year is changed</description>
            <name>onbeforecurrentdateselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before some date cell is selected</description>
            <name>onbeforedateselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before time is selected</description>
            <name>onbeforetimeselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the component is cleaned</description>
            <name>onclean</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the current month or year is changed</description>
            <name>oncurrentdateselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved away from the date cell</description>
            <name>ondatemouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved onto the date cell</description>
            <name>ondatemouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when some date cell is selected</description>
            <name>ondateselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed after the popup disappears.</description>
            <name>onhide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the input element loses focus.</description>
            <name>oninputblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the input field value is changed manually</description>
            <name>oninputchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the input element.</description>
            <name>oninputclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the input element.</description>
            <name>oninputdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the input element receives focus.</description>
            <name>oninputfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the input element.</description>
            <name>oninputkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the input element.</description>
            <name>oninputkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the input element.</description>
            <name>oninputkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the input element.</description>
            <name>oninputmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the input element.</description>
            <name>oninputmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the input element.</description>
            <name>oninputmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the input element.</description>
            <name>oninputmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the input element.</description>
            <name>oninputmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed called when the input field value is selected</description>
            <name>oninputselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed after the popup is shown.</description>
            <name>onshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after time is selected</description>
            <name>ontimeselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If "true", the calendar will be rendered initially as hidden with additional elements for calling as popup &lt;/p&gt; &lt;p&gt; Default value is "true" &lt;/p&gt;</description>
            <name>popup</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the popup element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>popupClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied to the popup element</description>
            <name>popupStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Defines the last range of date which will be loaded to client from dataModel under rendering &lt;/p&gt; &lt;p&gt; Default value is "getDefaultPreloadEnd(getCurrentDateOrDefault())" &lt;/p&gt;</description>
            <name>preloadDateRangeBegin</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Define the initial range of date which will be loaded to client from dataModel under rendering &lt;/p&gt; &lt;p&gt; Default value is "getDefaultPreloadBegin(getCurrentDateOrDefault())" &lt;/p&gt;</description>
            <name>preloadDateRangeEnd</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If "true". Date and time are not selectable. In "popup" mode input is disabled and button is enabled. &lt;/p&gt; &lt;p&gt; Default value is "false" &lt;/p&gt;</description>
            <name>readonly</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If value is true then calendar should change time to defaultTime for newly-selected dates &lt;/p&gt; &lt;p&gt; Default value is "false" &lt;/p&gt;</description>
            <name>resetTimeOnDateSelect</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If false ApplyButton should not be shown &lt;/p&gt; &lt;p&gt; Default value is "false" &lt;/p&gt;</description>
            <name>showApplyButton</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If false Calendar's footer should not be shown &lt;/p&gt; &lt;p&gt; Default value is "true" &lt;/p&gt;</description>
            <name>showFooter</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If false Calendar's header should not be shown &lt;/p&gt; &lt;p&gt; Default value is "true" &lt;/p&gt;</description>
            <name>showHeader</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; "false" value for this attribute makes text field invisible. It works only if popupMode="true" If showInput is "true" - input field will be shown &lt;/p&gt; &lt;p&gt; Default value is "true" &lt;/p&gt;</description>
            <name>showInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If false this bar should not be shown &lt;/p&gt; &lt;p&gt; Default value is "true" &lt;/p&gt;</description>
            <name>showWeekDaysBar</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If false this bar should not be shown &lt;/p&gt; &lt;p&gt; Default value is "true" &lt;/p&gt;</description>
            <name>showWeeksBar</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered</description>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Used for current date calculations &lt;/p&gt; &lt;p&gt; Default value is "getDefaultTimeZone()" &lt;/p&gt;</description>
            <name>timeZone</name>
            <type>java.util.TimeZone</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; This attribute defines the mode for "today" control. Possible values are "scroll", "select", "hidden" &lt;/p&gt; &lt;p&gt; Default value is "select" &lt;/p&gt;</description>
            <name>todayControlMode</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the vertical offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Vertical Offset</display-name>
            <icon />
            <name>verticalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>List of the day names displays on the days bar in the following way "Sun, Mon, Tue, Wed,"</description>
            <name>weekDayLabels</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Attribute that allows to customize short names of the weekdays. Should accept list with the weekday's names.</description>
            <name>weekDayLabelsShort</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is "3".</description>
            <name>zindex</name>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>collapsiblePanel</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:collapsiblePanel&amp;gt; component is a collapsible panel that shows or hides content when the header bar is activated. It is a simplified version of &amp;lt;rich:togglePanel&amp;gt; component. &lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.CollapsiblePanel</component-type>
            <renderer-type>org.richfaces.CollapsiblePanelRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.html.CollapsiblePanelTagHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:collapsiblePanel&amp;gt; component is a collapsible panel that shows or hides content when the header bar is activated. It is a simplified version of &amp;lt;rich:togglePanel&amp;gt; component. &lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel content. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>bodyClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>When true, the panel is expanded, when false, the panel is collapsed</description>
            <name>expanded</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Provides the text on the panel header. The panel header is all that is visible when the panel is collapsed. &lt;/p&gt; &lt;p&gt; Alternatively the header facet could be used in place of the header attribute. This would allow for additional styles and custom content to be applied to the tab. &lt;/p&gt;</description>
            <name>header</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel header. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is collapsed</description>
            <name>leftCollapsedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the panel header when the panel is expanded</description>
            <name>leftExpandedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the panel state is switched</description>
            <name>onbeforeswitch</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the panel state is switched</description>
            <name>onswitch</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is collapsed</description>
            <name>rightCollapsedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the panel header when the panel is expanded</description>
            <name>rightExpandedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch mode when a panel is activated. One of: "client", "server", "ajax". Default: "ajax"</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A Server-side MethodExpression to be called when the panel is toggled</description>
            <name>toggleListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>collapsibleSubTable</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:collapsibleSubTable&amp;gt; component acts as a child element to a &amp;lt;rich:dataTable&amp;gt; component. The &amp;lt;rich:collapsibleSubTable&amp;gt; component iterates through the child collections in the currently iterated object to create master-detail tables. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.CollapsibleSubTable</component-type>
            <renderer-type>org.richfaces.CollapsibleSubTableRenderer</renderer-type>
            <handler-class>org.richfaces.taglib.CollapsibleSubTableHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:collapsibleSubTable&amp;gt; component acts as a child element to a &amp;lt;rich:dataTable&amp;gt; component. The &amp;lt;rich:collapsibleSubTable&amp;gt; component iterates through the child collections in the currently iterated object to create master-detail tables. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute. If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored.</description>
            <name>columnClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Specifies what mode will be used to expand the sub table: client (default), ajax, server, none (can't be expanded)</description>
            <name>expandMode</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines the state of sub table: true (expanded), false (collapsed)</description>
            <name>expanded</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Name of the variable used in EL expression provided in filterExpression in order to decide about displaying particular row.</description>
            <name>filterVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A zero-relative row number of the first row to display</description>
            <name>first</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table footer</description>
            <name>footerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table header</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Provides access to the iteration status in a Request scope</description>
            <name>iterationStatusVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher</description>
            <name>keepSaved</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The label to be displayed when table contains no rows (no data provided).</description>
            <name>noDataLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over table row.</description>
            <name>onrowclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over table row.</description>
            <name>onrowdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the table row.</description>
            <name>onrowkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the table row.</description>
            <name>onrowkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the table row.</description>
            <name>onrowkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over table row.</description>
            <name>onrowmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the table row.</description>
            <name>onrowmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the table row.</description>
            <name>onrowmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the table row.</description>
            <name>onrowmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the table row.</description>
            <name>onrowmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table cells</description>
            <name>rowClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute. If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored.</description>
            <name>rowClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Provides access to the row key in a Request scope</description>
            <name>rowKeyVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A number of rows to display, or zero for all remaining rows in the table</description>
            <name>rows</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Specifies when table will be sorted according to one column (single) or multiple columns (multi).</description>
            <name>sortMode</name>
            <type>org.richfaces.model.SortMode</type>
        </attribute>
        <attribute>
            <description>Comma-separated list of column names determining priority of row sorting.</description>
            <name>sortPriority</name>
            <type>java.util.Collection</type>
        </attribute>
        <attribute>
            <description>Provides access to the state in a Request scope</description>
            <name>stateVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Points to the data model</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>collapsibleSubTableToggler</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:collapsibleSubTableToggler&amp;gt; component provides a toggle control for the user to expand and collapse sub-tables. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.CollapsibleSubTableToggler</component-type>
            <renderer-type>org.richfaces.CollapsibleSubTableTogglerRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:collapsibleSubTableToggler&amp;gt; component provides a toggle control for the user to expand and collapse sub-tables. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The icon of the toggler when the sub-table is collapsed</description>
            <name>collapsedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The label of the toggler when the sub-table is collapsed</description>
            <name>collapsedLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The mouse event which toggler reacts to toggle the sub-table: click (default), dblclick, mousedown, mouseup, etc.</description>
            <name>event</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon of the toggler when the sub-table is expanded</description>
            <name>expandedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The label of the toggler when the sub-table is expanded</description>
            <name>expandedLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Specifies table which will toggler control</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>column</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:column&amp;gt; component facilitates columns in a table. It supports merging columns and rows, sorting, filtering, and customized skinning. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.Column</component-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:column&amp;gt; component facilitates columns in a table. It supports merging columns and rows, sorting, filtering, and customized skinning. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>if "true" next column begins from the first row</description>
            <name>breakRowBefore</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Corresponds to the HTML colspan attribute</description>
            <name>colspan</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Defines value binding to the comparator that is used to compare the values</description>
            <name>comparator</name>
            <type>java.util.Comparator</type>
        </attribute>
        <attribute>
            <description>Provides Filter instance which determines if given row value will be displayed.</description>
            <name>filter</name>
            <type>org.richfaces.model.Filter</type>
        </attribute>
        <attribute>
            <description>The message to be displayed when the filter expression is not able to be evaluated using the provided filter value.</description>
            <name>filterConverterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines EL expression which returns true if given row should be displayed (EL expressions should use variable defined in filterVar attribute of dataTable)</description>
            <name>filterExpression</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Defines current filter type. Possible values: string, custom. If custom is used, no filter box is created, you are responsible for e creating your own filter input Default: string</description>
            <name>filterType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines current filtering value</description>
            <name>filterValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to any footer generated for this component</description>
            <name>footerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to any header generated for this component</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Corresponds to the HTML rowspan attribute</description>
            <name>rowspan</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Defines a bean property which is used for sorting of a column.</description>
            <name>sortBy</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Defines order which will be used for sorting column: unsorted (default), ascending, descending</description>
            <name>sortOrder</name>
            <type>org.richfaces.component.SortOrder</type>
        </attribute>
        <attribute>
            <description>Defines current filtering value. Possible values: string, custom. If custom is used, no filter box is created, you are responsible for e creating your own filter input Default: string</description>
            <name>sortType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style rules to be applied to the component</description>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more CSS class names to the component. Corresponds to the HTML "class" attribute.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute defines width of column.</description>
            <name>width</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>columnGroup</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:columnGroup&amp;gt; component combines multiple columns in a single row to organize complex parts of a table. The resulting effect is similar to using the breakRowBefore attribute of the &amp;lt;rich:column&amp;gt; component, but is clearer and easier to follow in the source code.&lt;/p&gt;</description>
            <component-type>org.richfaces.ColumnGroup</component-type>
            <renderer-type>org.richfaces.ColumnGroupRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:columnGroup&amp;gt; component combines multiple columns in a single row to organize complex parts of a table. The resulting effect is similar to using the breakRowBefore attribute of the &amp;lt;rich:column&amp;gt; component, but is clearer and easier to follow in the source code.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>componentControl</tag-name>
        <behavior>
            <description>&lt;p&gt; The &amp;lt;rich:componentControl&amp;gt; behavior allows JavaScript API functions to be called on target components. The functions are called after defined events are triggered on the component to with the &amp;lt;rich:componentControl&amp;gt; behavior is attached. Initialization variants and activation events can be customized, and parameters can be passed to the target component. &lt;/p&gt; @author Anton Belevich</description>
            <behavior-id>org.richfaces.behavior.ComponentControlBehavior</behavior-id>
            <handler-class>org.richfaces.taglib.ComponentControlHandler</handler-class>
        </behavior>
        <description>&lt;p&gt; The &amp;lt;rich:componentControl&amp;gt; behavior allows JavaScript API functions to be called on target components. The functions are called after defined events are triggered on the component to with the &amp;lt;rich:componentControl&amp;gt; behavior is attached. Initialization variants and activation events can be customized, and parameters can be passed to the target component. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>Name of JavaScript event property (click, change, etc.) of parent component that triggers the behavior. If the event attribute is not defined, the behavior is triggered on the event that normally provides interaction behavior for the parent component</description>
            <name>event</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript invoked just before the operation will be invoked on target component.</description>
            <name>onbeforeoperation</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function of JavaScript API that will be invoked on the target components (selected with target or selector attributes).</description>
            <name>operation</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>jQuery selector (CSS selector with jQuery extensions) which finds target component which will be the operation fired on.</description>
            <name>selector</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Comma-separated list of component IDs of components which will be the operation fired on. (Alternatively you can use selector attribute).</description>
            <name>target</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>contextMenu</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:contextMenu&amp;gt; component is used for creating a hierarchical context menu that are activated on events like onmouseover, onclick etc. The component can be applied to any element on the page. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.ContextMenu</component-type>
            <renderer-type>org.richfaces.ContextMenuRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:contextMenu&amp;gt; component is used for creating a hierarchical context menu that are activated on events like onmouseover, onclick etc. The component can be applied to any element on the page. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>If the value of the 'attached' attribute is true, the component is attached to the component, specified in the 'target' attribute or to the parent component, if 'target' is not defined. Default value is 'true'.</description>
            <name>attached</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the direction of the popup. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Direction</display-name>
            <icon />
            <name>direction</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>Disables the menu component, so it will not activate/expand</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Delay (in ms) between losing focus and menu closing&lt;/p&gt; &lt;p&gt;Default value is "300"&lt;/p&gt;</description>
            <name>hideDelay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the horizontal offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Horizontal Offset</display-name>
            <icon />
            <name>horizontalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the submission mode for all menu items of the menu except those where this attribute redefined. Possible value are 'ajax','client' and 'server' &lt;/p&gt; &lt;p&gt;Default value is 'server'&lt;/p&gt;</description>
            <name>mode</name>
            <type>org.richfaces.component.Mode</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a child menuGroup is hidden</description>
            <name>ongrouphide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a child menuGroup is expanded</description>
            <name>ongroupshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when this menu component is hidden</description>
            <name>onhide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a menu item is clicked</description>
            <name>onitemclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when this menu component is shown</description>
            <name>onshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Sets minimum width for all lists that will appear.</description>
            <name>popupWidth</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Delay (in ms) between observing the showEvent and menu opening&lt;/p&gt; &lt;p&gt;Default value is "50"&lt;/p&gt;</description>
            <name>showDelay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Defines an event on the parent element to display the menu&lt;/p&gt; &lt;p&gt;Default value is 'oncontextmenu'&lt;/p&gt;</description>
            <name>showEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Client identifier of the component or id of the existing DOM element that is a source for a given event. If target is defined, the event is attached on the client. If both attached and target attributes are defined, and attribute attached has value 'false', it is considered to have higher priority.</description>
            <name>target</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The jQuery selector used to filter which child DOM elements of the target/parent to which the contextMenu will be attached.</description>
            <name>targetSelector</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the vertical offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Vertical Offset</display-name>
            <icon />
            <name>verticalOffset</name>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dataGrid</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:dataGrid&amp;gt; component is used to arrange data objects in a grid. Values in the grid can be updated dynamically from the data model, and Ajax updates can be limited to specific rows. The component supports header, footer, and caption facets. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.DataGrid</component-type>
            <renderer-type>org.richfaces.DataGridRenderer</renderer-type>
            <handler-class>org.richfaces.taglib.DataGridHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:dataGrid&amp;gt; component is used to arrange data objects in a grid. Values in the grid can be updated dynamically from the data model, and Ajax updates can be limited to specific rows. The component supports header, footer, and caption facets. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Number of columns to display</description>
            <name>columns</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Number of elements displayed in the grid</description>
            <name>elements</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>A zero-relative row number of the first row to display</description>
            <name>first</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Provides access to the iteration status in a Request scope</description>
            <name>iterationStatusVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher</description>
            <name>keepSaved</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Provides access to the row key in a Request scope</description>
            <name>rowKeyVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Provides access to the state in a Request scope</description>
            <name>stateVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Points to the data model</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dataScroller</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:dataScroller&amp;gt; component is used for navigating through multiple pages of tables or grids. &lt;/p&gt;</description>
            <component-type>org.richfaces.DataScroller</component-type>
            <renderer-type>org.richfaces.DataScrollerRenderer</renderer-type>
            <handler-class>org.richfaces.taglib.DataScrollerHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:dataScroller&amp;gt; component is used for navigating through multiple pages of tables or grids. &lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The attribute specifies the visibility of boundaryControls. Possible values are: "show" (controls are always visible ). "hide" (controls are hidden. "auto" (unnecessary controls are hidden). Default value is "show".</description>
            <name>boundaryControls</name>
            <type>org.richfaces.component.DataScrollerControlsMode</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The attribute specifies the visibility of fastControls. Possible values are: "show" (controls are always visible ). "hide" (controls are hidden. "auto" (unnecessary controls are hidden). Default value is "show".</description>
            <name>fastControls</name>
            <type>org.richfaces.component.DataScrollerControlsMode</type>
        </attribute>
        <attribute>
            <description>The attribute indicates pages quantity to switch onto when fast scrolling is used. Default value is "1". @return</description>
            <name>fastStep</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Component ID of the table whose data is scrolled</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The attribute to control whether last page of datascroller shows "rows" number of items or just the rest. Possible values are "full" and "short". Default value is "short".</description>
            <name>lastPageMode</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Maximum quantity of pages. Default value is "10".</description>
            <name>maxPages</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If page &gt;= 1 then it's a page number to show</description>
            <name>page</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>If renderIfSinglePage is "true" then datascroller is displayed on condition that the data hold on one page. Default value is "true".</description>
            <name>renderIfSinglePage</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <name>scrollListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The attribute specifies the visibility of stepControls. Possible values are: "show" (controls are always visible ). "hide" (controls are hidden. "auto" (unnecessary controls are hidden). Default value is "show".</description>
            <name>stepControls</name>
            <type>org.richfaces.component.DataScrollerControlsMode</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dataTable</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:dataTable&amp;gt; component is used to render a table, including the table's caption. It works in conjunction with the &amp;lt;rich:column&amp;gt; and &amp;lt;rich:columnGroup&amp;gt; components to list the contents of a data model. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.DataTable</component-type>
            <renderer-type>org.richfaces.DataTableRenderer</renderer-type>
            <handler-class>org.richfaces.taglib.DataTableHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:dataTable&amp;gt; component is used to render a table, including the table's caption. It works in conjunction with the &amp;lt;rich:column&amp;gt; and &amp;lt;rich:columnGroup&amp;gt; components to list the contents of a data model. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the component caption</description>
            <name>captionClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute. If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored.</description>
            <name>columnClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the variable used in EL expression provided in filterExpression in order to decide about displaying particular row.</description>
            <name>filterVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A zero-relative row number of the first row to display</description>
            <name>first</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table footer</description>
            <name>footerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table header</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Provides access to the iteration status in a Request scope</description>
            <name>iterationStatusVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher</description>
            <name>keepSaved</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The label to be displayed when table contains no rows (no data provided).</description>
            <name>noDataLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over table row.</description>
            <name>onrowclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over table row.</description>
            <name>onrowdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the table row.</description>
            <name>onrowkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the table row.</description>
            <name>onrowkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the table row.</description>
            <name>onrowkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over table row.</description>
            <name>onrowmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the table row.</description>
            <name>onrowmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the table row.</description>
            <name>onrowmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the table row.</description>
            <name>onrowmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the table row.</description>
            <name>onrowmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table cells</description>
            <name>rowClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute. If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored.</description>
            <name>rowClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Provides access to the row key in a Request scope</description>
            <name>rowKeyVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A number of rows to display, or zero for all remaining rows in the table</description>
            <name>rows</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Specifies when table will be sorted according to one column (single) or multiple columns (multi).</description>
            <name>sortMode</name>
            <type>org.richfaces.model.SortMode</type>
        </attribute>
        <attribute>
            <description>Comma-separated list of column names determining priority of row sorting.</description>
            <name>sortPriority</name>
            <type>java.util.Collection</type>
        </attribute>
        <attribute>
            <description>Provides access to the state in a Request scope</description>
            <name>stateVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Points to the data model</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dragIndicator</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:dragIndicator&amp;gt; component defines a graphical element to display under the mouse cursor during a drag-and-drop operation. &lt;/p&gt; @author abelevich</description>
            <component-type>org.richfaces.DragIndicator</component-type>
            <renderer-type>org.richfaces.DragIndicatorRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:dragIndicator&amp;gt; component defines a graphical element to display under the mouse cursor during a drag-and-drop operation. &lt;/p&gt; @author abelevich</description>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the indicator which are applied when a drop is accepted</description>
            <name>acceptClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the component. Corresponds to the HTML "class" attribute.</description>
            <name>draggingClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the indicator which are applied when a drop is rejected</description>
            <name>rejectClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dragSource</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:dragSource&amp;gt; component can be added to a component to indicate it is capable of being dragged by the user. The dragged item can then be dropped into a compatible drop area, designated using the &amp;lt;rich:dropTarget&amp;gt; component. &lt;/p&gt; @author abelevich</description>
            <component-type>org.richfaces.DragSource</component-type>
            <renderer-type>org.richfaces.DragSourceRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:dragSource&amp;gt; component can be added to a component to indicate it is capable of being dragged by the user. The dragged item can then be dropped into a compatible drop area, designated using the &amp;lt;rich:dropTarget&amp;gt; component. &lt;/p&gt; @author abelevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Component ID of a dragIndicator component that is used as drag pointer during the drag operation</description>
            <name>dragIndicator</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Data to be sent to a drop zone after a drop event</description>
            <name>dragValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A drag zone type that is used for zone definition, which elements can be accepted by a drop zone</description>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dropDownMenu</tag-name>
        <component>
            <description>The &amp;lt;rich:dropDownMenu&amp;gt; component is used for creating a drop-down, hierarchical menu. It can be used with the &amp;lt;rich:toolbar&amp;gt; component to create menus in an application's toolbar.</description>
            <component-type>org.richfaces.DropDownMenu</component-type>
            <renderer-type>org.richfaces.DropDownMenuRenderer</renderer-type>
        </component>
        <description>The &amp;lt;rich:dropDownMenu&amp;gt; component is used for creating a drop-down, hierarchical menu. It can be used with the &amp;lt;rich:toolbar&amp;gt; component to create menus in an application's toolbar.</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the direction of the popup. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Direction</display-name>
            <icon />
            <name>direction</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>Disables the menu component, so it will not activate/expand</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Delay (in ms) between losing focus and menu closing&lt;/p&gt; &lt;p&gt;Default value is "300"&lt;/p&gt;</description>
            <name>hideDelay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the horizontal offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Horizontal Offset</display-name>
            <icon />
            <name>horizontalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the corner attachment point with which the popup should be connected. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Joint Point</display-name>
            <icon />
            <name>jointPoint</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>The text label for the menu item. Alternatively, use the label facet to define content for the label</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the submission mode for all menu items of the menu except those where this attribute redefined. Possible value are 'ajax','client' and 'server' &lt;/p&gt; &lt;p&gt;Default value is 'server'&lt;/p&gt;</description>
            <name>mode</name>
            <type>org.richfaces.component.Mode</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a child menuGroup is hidden</description>
            <name>ongrouphide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a child menuGroup is expanded</description>
            <name>ongroupshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when this menu component is hidden</description>
            <name>onhide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a menu item is clicked</description>
            <name>onitemclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when this menu component is shown</description>
            <name>onshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Sets minimum width for all lists that will appear.</description>
            <name>popupWidth</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Delay (in ms) between observing the showEvent and menu opening&lt;/p&gt; &lt;p&gt;Default value is "50"&lt;/p&gt;</description>
            <name>showDelay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Defines an event on the parent element to display the menu&lt;/p&gt; &lt;p&gt;Default value is 'oncontextmenu'&lt;/p&gt;</description>
            <name>showEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the vertical offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Vertical Offset</display-name>
            <icon />
            <name>verticalOffset</name>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>dropTarget</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:dropTarget&amp;gt; component can be added to a component so that the component can accept dragged items. The dragged items must be defined with a compatible drop type for the &amp;lt;rich:dragSource&amp;gt; component. &lt;/p&gt; @author abelevich</description>
            <component-type>org.richfaces.DropTarget</component-type>
            <renderer-type>org.richfaces.DropTargetRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.DropHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:dropTarget&amp;gt; component can be added to a component so that the component can accept dragged items. The dragged items must be defined with a compatible drop type for the &amp;lt;rich:dragSource&amp;gt; component. &lt;/p&gt; @author abelevich</description>
        <attribute>
            <description>A list of drag zones types, which elements are accepted by a drop zone</description>
            <name>acceptedTypes</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
            <display-name>Bypass Updates</display-name>
            <icon />
            <name>bypassUpdates</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing an action listener method that will be notified after drop operation. The expression must evaluate to a public method that takes an DropEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".</description>
            <name>dropListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Data to be processed after a drop event</description>
            <name>dropValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>editor</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:editor&amp;gt; component is used for creating a WYSIWYG editor on a page. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt;</description>
            <component-type>org.richfaces.Editor</component-type>
            <renderer-type>org.richfaces.EditorRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:editor&amp;gt; component is used for creating a WYSIWYG editor on a page. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Detailed configuration of editor in JSON format</description>
            <name>config</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The hieght of the editor</description>
            <name>height</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the editor loses focus</description>
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called on blur event when editor content has been changed after previous focus</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called immediately after the editor content has been changed</description>
            <name>ondirty</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the editor receives focus</description>
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called once the editor is initialized and ready to be handle user interaction</description>
            <name>oninit</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Used to switch the editor into a read-only mode.</description>
            <name>readonly</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Set the skin of the richfaces editor. Bundled skins include: richfaces, kama, v2, office2003&lt;/p&gt; &lt;p&gt;Default is richfaces&lt;/p&gt;</description>
            <name>skin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Used to change the configuration of the toolbar's button set. There are two configurations available: basic (default), full (enables all of the features). &lt;p&gt; It is also possible to define a custom toolbar using the CKEditor toolbar configuration in a config facet &lt;/p&gt; &lt;p&gt; Default is basic &lt;/p&gt;</description>
            <name>toolbar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The width of the editor</description>
            <name>width</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>extendedDataTable</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:extendedDataTable&amp;gt; component builds on the functionality of the &amp;lt;rich:dataTable&amp;gt; component, adding features such as scrolling for the table body (both horizontal and vertical), Ajax loading for vertical scrolling, frozen columns, row selection, and rearranging of columns. It also supports all the basic table features such as sorting, filtering, and paging using the &amp;lt;rich:dataScroller&amp;gt; component. &lt;/p&gt; @author Konstantin Mishin</description>
            <component-type>org.richfaces.ExtendedDataTable</component-type>
            <renderer-type>org.richfaces.ExtendedDataTableRenderer</renderer-type>
            <handler-class>org.richfaces.taglib.ExtendedDataTableHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:extendedDataTable&amp;gt; component builds on the functionality of the &amp;lt;rich:dataTable&amp;gt; component, adding features such as scrolling for the table body (both horizontal and vertical), Ajax loading for vertical scrolling, frozen columns, row selection, and rearranging of columns. It also supports all the basic table features such as sorting, filtering, and paging using the &amp;lt;rich:dataScroller&amp;gt; component. &lt;/p&gt; @author Konstantin Mishin</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Use to switch Extended Data Table to AJAX lazy-loading mode. Specify number of rows rows to be loaded with one request. If this attribute is set to "0", all rows are loaded. (Default value: 0)</description>
            <name>clientRows</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the columns of the table. If the CSS class names are comma-separated, each class will be assigned to a particular column in the order they follow in the attribute. If you have less class names than columns, the class will be applied to every n-fold column where n is the order in which the class is listed in the attribute. If there are more class names than columns, the overflow ones are ignored.</description>
            <name>columnClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines the order in which the columns should be rendered, left to right. The Strings are the ids of the columns.</description>
            <name>columnsOrder</name>
            <type>java.lang.String[]</type>
        </attribute>
        <attribute>
            <description>Name of the variable used in EL expression provided in filterExpression in order to decide about displaying particular row.</description>
            <name>filterVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A zero-relative row number of the first row to display</description>
            <name>first</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table footer</description>
            <name>footerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines how many columns should not be vertically scrollable (should be "frozen").</description>
            <name>frozenColumns</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table header</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Provides access to the iteration status in a Request scope</description>
            <name>iterationStatusVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher</description>
            <name>keepSaved</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The label to be displayed when table contains no rows (no data provided).</description>
            <name>noDataLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the selection is changed.</description>
            <name>onbeforeselectionchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the EDT has been initialized, either after a page load, and an ajax update.</description>
            <name>onready</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over table row.</description>
            <name>onrowclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over table row.</description>
            <name>onrowdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the table row.</description>
            <name>onrowkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the table row.</description>
            <name>onrowkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the table row.</description>
            <name>onrowkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over table row.</description>
            <name>onrowmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the table row.</description>
            <name>onrowmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the table row.</description>
            <name>onrowmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the table row.</description>
            <name>onrowmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the table row.</description>
            <name>onrowmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the selection is changed.</description>
            <name>onselectionchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the table cells</description>
            <name>rowClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute. If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored.</description>
            <name>rowClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Provides access to the row key in a Request scope</description>
            <name>rowKeyVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A number of rows to display, or zero for all remaining rows in the table</description>
            <name>rows</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The collection of keys for currently selected table rows (generated from data model by rowKeyConverter).</description>
            <name>selection</name>
            <type>java.util.Collection</type>
        </attribute>
        <attribute>
            <description>Defines selection mode for the table: none, single (only one row can be selected), multiple (Ctrl/Shift keys are used for multi-selection), multipleKeyboardFree (clicks are used for multi-selection)</description>
            <name>selectionMode</name>
            <type>org.richfaces.model.SelectionMode</type>
        </attribute>
        <attribute>
            <description>Specifies when table will be sorted according to one column (single) or multiple columns (multi).</description>
            <name>sortMode</name>
            <type>org.richfaces.model.SortMode</type>
        </attribute>
        <attribute>
            <description>Comma-separated list of column names determining priority of row sorting.</description>
            <name>sortPriority</name>
            <type>java.util.Collection</type>
        </attribute>
        <attribute>
            <description>Provides access to the state in a Request scope</description>
            <name>stateVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>ValueBinding pointing at a property of a String to hold table state</description>
            <name>tableState</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Points to the data model</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>fileUpload</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:fileUpload&amp;gt; component allows the user to upload files to a server. It features multiple uploads, progress bars, restrictions on file types, and restrictions on sizes of the files to be uploaded. &lt;/p&gt; @author Konstantin Mishin</description>
            <component-type>org.richfaces.FileUpload</component-type>
            <renderer-type>org.richfaces.FileUploadRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.FileUploadHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:fileUpload&amp;gt; component allows the user to upload files to a server. It features multiple uploads, progress bars, restrictions on file types, and restrictions on sizes of the files to be uploaded. &lt;/p&gt; @author Konstantin Mishin</description>
        <attribute>
            <description>Defines comma separated list of file extensions accepted by component. The component does not provide any feedback when rejecting file. For introducing feedback for rejection, use ontyperejected parameter.</description>
            <name>acceptedTypes</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The label for the Add button.</description>
            <name>addLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The label for the Clear button.</description>
            <name>clearAllLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The label displayed for the Clear link</description>
            <name>clearLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The label displayed for the Delete link</description>
            <name>deleteLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The label displayed when a file is successfully uploaded.</description>
            <name>doneLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A listener function on the server side after each file is uploaded. The listener should process files as required, such as storing them in the session/db/filesystem/ directory. The component itself does not store uploaded files, so if the listener is not implemented they are not stored anywhere</description>
            <name>fileUploadListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;If "true" upload stats immediately after file selection&lt;/p&gt; &lt;p&gt;Default is "false"&lt;/p&gt;</description>
            <name>immediateUpload</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Defines height of file list.&lt;/p&gt; &lt;p&gt;Default value is "210px".&lt;/p&gt;</description>
            <name>listHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines maximum number of files allowed to be uploaded. After a number of files in the list equals to the value of this attribute, "Add" button disappears and nothing could be uploaded even if you clear the whole list. In order to upload files again you should rerender the component</description>
            <name>maxFilesQuantity</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;If "true" duplicate file uploads are prevented&lt;/p&gt; &lt;p&gt;Default is "false"&lt;/p&gt;</description>
            <name>noDuplicate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a file is cleared</description>
            <name>onclear</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a file is selected</description>
            <name>onfileselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a file is submitted</description>
            <name>onfilesubmit</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a file does not meet the conditions stated by acceptedTypes parameter.</description>
            <name>ontyperejected</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a file upload is complete</description>
            <name>onuploadcomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The label displayed when a file upload fails due to a server error.</description>
            <name>serverErrorLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The label displayed when a file exceeds the size limit.</description>
            <name>sizeExceededLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The label for the Add button.</description>
            <name>uploadLabel</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>focus</tag-name>
        <component>
            <description>&lt;p&gt; Focus component allows to set focus based on validation of components or alternatively it can preserve focus on currently focused form input. &lt;/p&gt; &lt;p&gt; Focus can be bound to form (in case of placement to h:form) or to whole view (when placed outside of forms) - in latter case, all forms will be managed by one Focus. There can be at most one Focus per form. When there is one view-scoped Focus and form defines own Focus, form-scoped Focus settings will be used. &lt;/p&gt; &lt;p&gt; Focus is applied each time the component is rendered - for each full page submit and for each partial page request (in case of ajaxRendered=true). Alternatively, you can use JavaScript API: &lt;tt&gt;applyFocus()&lt;/tt&gt; function will immediately cause. &lt;/p&gt;</description>
            <component-type>org.richfaces.Focus</component-type>
            <renderer-type>org.richfaces.FocusRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; Focus component allows to set focus based on validation of components or alternatively it can preserve focus on currently focused form input. &lt;/p&gt; &lt;p&gt; Focus can be bound to form (in case of placement to h:form) or to whole view (when placed outside of forms) - in latter case, all forms will be managed by one Focus. There can be at most one Focus per form. When there is one view-scoped Focus and form defines own Focus, form-scoped Focus settings will be used. &lt;/p&gt; &lt;p&gt; Focus is applied each time the component is rendered - for each full page submit and for each partial page request (in case of ajaxRendered=true). Alternatively, you can use JavaScript API: &lt;tt&gt;applyFocus()&lt;/tt&gt; function will immediately cause. &lt;/p&gt;</description>
        <attribute>
            <description>Defines whether focus state should be updated during each AJAX request automatically. (default: true)</description>
            <name>ajaxRendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Defines whether focus should not be applied after initial page load, but will need to be triggered by JavaScript function from Focus API: &lt;tt&gt;applyFocus()&lt;/tt&gt; or via re-rendering (postback).</description>
            <name>delayed</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whether focus should be preserved on last focused input before request was done (default: false)</description>
            <name>preserve</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Defines if focus should respect validation of inputs. &lt;/p&gt; &lt;p&gt; If true, only invalid form fields will be focused when focus applied. &lt;/p&gt; &lt;p&gt; (default: true) &lt;/p&gt;</description>
            <name>validationAware</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>graphValidator</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:graphValidator&amp;gt; component is used to wrap a set of input components related to one object. The object defined by the &amp;lt;rich:graphValidator&amp;gt; component can then be completely validated. The validation includes all object properties, even those which are not bound to the individual form components. Validation performed in this way allows for cross-field validation in complex forms.&lt;/p&gt;</description>
            <component-type>org.richfaces.GraphValidator</component-type>
            <handler-class>org.richfaces.view.facelets.html.GraphValidatorHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:graphValidator&amp;gt; component is used to wrap a set of input components related to one object. The object defined by the &amp;lt;rich:graphValidator&amp;gt; component can then be completely validated. The validation includes all object properties, even those which are not bound to the individual form components. Validation performed in this way allows for cross-field validation in complex forms.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The list of fully-qualified names (FQNs) of classes determining bean-validation groups to be validated.</description>
            <name>groups</name>
            <type>java.lang.Class[]</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Message summary will be used in case in case of validation error when no other message is provided.</description>
            <name>summary</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The validator-id of validator used to process validation of the provided bean (Default value: org.richfaces.BeanValidator)</description>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Bean EL reference to be validated</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>hashParam</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:hashParam&amp;gt; component allows client-side parameters to be grouped into a hash map. The hash map can then be passed to the client JavaScript API functions of any RichFaces component.&lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.HashParameter</component-type>
            <handler-class>javax.faces.view.facelets.ComponentHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:hashParam&amp;gt; component allows client-side parameters to be grouped into a hash map. The hash map can then be passed to the client JavaScript API functions of any RichFaces component.&lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The name of the javascript hash property which this hash should be assigned to (can be used as nested hashParameter) or null if no property should be used (can be used simply as function parameter).</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>hotKey</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:hotKey&amp;gt; component allows registering hot keys on the page or particular elements and defining client side processing functions for these keys.&lt;/p&gt; @author ilya_shaikovsky @author Lukas Fryc</description>
            <component-type>org.richfaces.HotKey</component-type>
            <renderer-type>org.richfaces.HotKeyRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:hotKey&amp;gt; component allows registering hot keys on the page or particular elements and defining client side processing functions for these keys.&lt;/p&gt; @author ilya_shaikovsky @author Lukas Fryc</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The switch which enables handling events coming from input</description>
            <name>enabledInInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The key sequence to be pressed, single keys separated by + (e.g. 'ctrl+a'), more key sequences separated by space. Special keys are accepted as follows: backspace, tab, return, shift, ctrl, alt, pause, capslock, esc, space, pageup, pagedown, end, home, left, up, right, down, insert, del, numlock, scroll, meta, f1, f2, ..., f12</description>
            <name>key</name>
            <required>true</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Event handler to be fired when registered key sequence is pressed down</description>
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Event handler to be fired when registered key sequence is pressed up</description>
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch which prevents native browser actions (prevents default) to be taken and stops event propagation up to the tree</description>
            <name>preventDefault</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The jQuery selector (subset of CSS selectors defined by W3C) of the DOM root from which key events should be handled. When no value provided, events are handled for whole document. ID selectors starting with hash sign (#) will be expanded from componentId to clientId form. (e.g. #component is expanded to #form:component in case that component is nested in form)</description>
            <name>selector</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>inplaceInput</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:inplaceInput&amp;gt; component allows information to be entered in-line in blocks of text, improving readability of the text. Multiple input regions can be navigated with keyboard navigation. The component has three functional states: the view state, where the component displays its initial setting, such as &amp;quot;click to edit&amp;quot;; the edit state, where the user can input text; and the &amp;quot;changed&amp;quot; state, where the new value for the component has been confirmed but can be edited again if required. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.InplaceInput</component-type>
            <renderer-type>org.richfaces.InplaceInputRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:inplaceInput&amp;gt; component allows information to be entered in-line in blocks of text, improving readability of the text. Multiple input regions can be navigated with keyboard navigation. The component has three functional states: the view state, where the component displays its initial setting, such as &amp;quot;click to edit&amp;quot;; the edit state, where the user can input text; and the &amp;quot;changed&amp;quot; state, where the new value for the component has been confirmed but can be edited again if required. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is active. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>activeClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when the value of this element is changed. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>changedClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Used to set the display text when value is undefined</description>
            <name>defaultLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>disabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Used to specify the event that switches the component to the edit state&lt;/p&gt; &lt;p&gt;Default is "click"&lt;/p&gt;</description>
            <name>editEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The width of the input element</description>
            <name>inputWidth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon />
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon />
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when</description>
            <name>oninputselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", apply the changes when the focus is lost</description>
            <name>saveOnBlur</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If "true" is set, buttons for confirming or canceling are added to the component</description>
            <name>showControls</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon />
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>inplaceSelect</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:inplaceSelect&amp;gt; component is similar to the &amp;lt;rich:inplaceInput&amp;gt; component, except that the &amp;lt;rich:inplaceSelect&amp;gt; component uses a drop-down selection box to enter text instead of a regular text field. Changes can be rendered either in-line or for the whole block, and inputs can be focused with keyboard navigation. The component is based on the JSF UISelectOne component, so all the standard rules for value definition, processing, conversion, and validation apply. &lt;/p&gt; @author Anton Belevich</description>
            <component-type>org.richfaces.InplaceSelect</component-type>
            <renderer-type>org.richfaces.InplaceSelectRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:inplaceSelect&amp;gt; component is similar to the &amp;lt;rich:inplaceInput&amp;gt; component, except that the &amp;lt;rich:inplaceSelect&amp;gt; component uses a drop-down selection box to enter text instead of a regular text field. Changes can be rendered either in-line or for the whole block, and inputs can be focused with keyboard navigation. The component is based on the JSF UISelectOne component, so all the standard rules for value definition, processing, conversion, and validation apply. &lt;/p&gt; @author Anton Belevich</description>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element when it is in the "active" state. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>activeClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element when it is in the "changed" state. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>changedClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Used to set the display text when value is undefined</description>
            <name>defaultLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element when it is disabled. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>disabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;The event on which to switch the component to the edit state&lt;/p&gt; &lt;p&gt;Default is "click"&lt;/p&gt;</description>
            <name>editEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The width of the input element</description>
            <name>inputWidth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>listClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The height of the list element</description>
            <name>listHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The width of the list element</description>
            <name>listWidth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon />
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon />
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the input element.</description>
            <name>oninputclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the input element.</description>
            <name>oninputdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the input element.</description>
            <name>oninputkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the input element.</description>
            <name>oninputkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the input element.</description>
            <name>oninputkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the input element.</description>
            <name>oninputmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the input element.</description>
            <name>oninputmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the input element.</description>
            <name>oninputmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the input element.</description>
            <name>oninputmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the input element.</description>
            <name>oninputmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when text in the input element is selected</description>
            <name>oninputselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the list element.</description>
            <name>onlistclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the list element.</description>
            <name>onlistdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element is hidden</description>
            <name>onlisthide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the list element.</description>
            <name>onlistkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the list element.</description>
            <name>onlistkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the list element.</description>
            <name>onlistkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the list element.</description>
            <name>onlistmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the list element.</description>
            <name>onlistmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the list element.</description>
            <name>onlistmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the list element.</description>
            <name>onlistmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the list element.</description>
            <name>onlistmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element is shown</description>
            <name>onlistshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when an item is selected</description>
            <name>onselectitem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "false" do not switch the component to the edit state on "click"</description>
            <name>openOnEdit</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", apply the changes when the focus is lost</description>
            <name>saveOnBlur</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>When "false" do not save the item as the new control value when the user selects an item from the drop-down list</description>
            <name>saveOnSelect</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>selectItemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true" is set, buttons for confirming or canceling are added to the component</description>
            <name>showControls</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon />
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>inputNumberSlider</tag-name>
        <component>
            <description>The &amp;lt;rich:inputNumberSlider&amp;gt; component provides a slider for changing numerical values. Optional features include control arrows to step through the values, a tool-tip to display the value while sliding, and a text field for typing the numerical value which can then be validated against the slider's range.</description>
            <component-type>org.richfaces.InputNumberSlider</component-type>
            <renderer-type>org.richfaces.InputNumberSliderRenderer</renderer-type>
        </component>
        <description>The &amp;lt;rich:inputNumberSlider&amp;gt; component provides a slider for changing numerical values. Optional features include control arrows to step through the values, a tool-tip to display the value while sliding, and a text field for typing the numerical value which can then be validated against the slider's range.</description>
        <attribute>
            <description>Access key that, when pressed, transfers focus to this element.</description>
            <display-name>Access Key</display-name>
            <icon />
            <name>accesskey</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the decrease arrow element</description>
            <name>decreaseClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the decrease arrow element selected</description>
            <name>decreaseSelectedClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Delay in pressed increase/decrease arrows in miliseconds. &lt;br /&gt;Default value is "200".</description>
            <name>delay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled</description>
            <display-name>Disabled Flag</display-name>
            <icon />
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If set to "false" this attribute makes the text field "read-only", so the value can be changed only from a handle. &lt;br /&gt;Default value is "true".</description>
            <name>enableManualInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the handle element</description>
            <name>handleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the handle element selected</description>
            <name>handleSelectedClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Tells how handle should look like. Possible values: arrow (default), bar</description>
            <name>handleType</name>
            <type>org.richfaces.component.InputNumberSliderHandleType</type>
        </attribute>
        <attribute>
            <description>The component identifier for the associated component</description>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the increase arrow element</description>
            <name>increaseClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the increase arrow element selected</description>
            <name>increaseSelectedClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the component input field</description>
            <name>inputClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "right", the InputText Box would be rendered on the right side of the ruler. If "left", the InputText Box would be rendered on the left side of the ruler. If "top", the InputText Box would be rendered on the top of the ruler. If "bottom", the InputText Box would be rendered on the bottom of the ruler.</description>
            <name>inputPosition</name>
            <type>org.richfaces.component.InputNumberSliderInputPosition</type>
        </attribute>
        <attribute>
            <description>Similar to the "Size" attribute of h:inputText. &lt;br /&gt;Default value is "3".</description>
            <name>inputSize</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>A localized user presentable name for this component.</description>
            <display-name>Label</display-name>
            <icon />
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute to set an "end" value. &lt;br /&gt;Default value is "100"</description>
            <name>maxValue</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Specifies the maximum number of digits that could be entered into the input field. The maximum number is unlimited by default. If entered value exceeds the value specified in "maxValue" attribute than the slider takes a maximum value position.</description>
            <name>maxlength</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Attribute to set the "start" value. &lt;br /&gt;Default value is "0".</description>
            <name>minValue</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon />
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus and its value has been modified since gaining focus.</description>
            <display-name>Input Change Script</display-name>
            <icon />
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon />
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when text within this element is selected by the user.</description>
            <display-name>Text Select Script</display-name>
            <icon />
            <name>onselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>An override for the rendered attribute associated with our component</description>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>False value for this attribute makes increase/decrease arrows invisible. &lt;br /&gt;Default value is "false".</description>
            <name>showArrows</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If the min/max values are shown on the right/left borders of a control. &lt;br /&gt;Default value is "true".</description>
            <name>showBoundaryValues</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>False value for this attribute makes text a field invisible. &lt;br /&gt;Default value is "true".</description>
            <name>showInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If "true"the current value is shown in the tooltip when a handle control is in a "dragged" state. &lt;br /&gt;Default value is "true".</description>
            <name>showTooltip</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Parameter that determines a step between the nearest values while using a handle. &lt;br /&gt;Default value is "1".</description>
            <name>step</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon />
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the tooltip element of the handle</description>
            <name>tooltipClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the track slider element</description>
            <name>trackClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>inputNumberSpinner</tag-name>
        <component>
            <description>The &amp;lt;rich:inputNumberSpinner&amp;gt; component is a single-line input field with buttons to increase and decrease a numerical value. The value can be changed using the corresponding directional keys on a keyboard, or by typing into the field.</description>
            <component-type>org.richfaces.InputNumberSpinner</component-type>
            <renderer-type>org.richfaces.InputNumberSpinnerRenderer</renderer-type>
        </component>
        <description>The &amp;lt;rich:inputNumberSpinner&amp;gt; component is a single-line input field with buttons to increase and decrease a numerical value. The value can be changed using the corresponding directional keys on a keyboard, or by typing into the field.</description>
        <attribute>
            <description>Access key that, when pressed, transfers focus to this element.</description>
            <display-name>Access Key</display-name>
            <icon />
            <name>accesskey</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true" after the current value reaches the border value it is reversed to another border value after next increasing/decreasing. In other case possibilities of next increasing (or decreasing) will be locked. &lt;br /&gt;Default value is " true ".</description>
            <name>cycled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled</description>
            <display-name>Disabled Flag</display-name>
            <icon />
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>if "false" your's input to the text field using keyboard will be locked. &lt;br /&gt;Default value is "true"</description>
            <name>enableManualInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for the associated component</description>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the component input field</description>
            <name>inputClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute specifies the initial length of input in characters. &lt;br /&gt;Default value is "10".</description>
            <name>inputSize</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>A localized user presentable name for this component.</description>
            <display-name>Label</display-name>
            <icon />
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Maximum value. &lt;br /&gt;Default value is "100".</description>
            <name>maxValue</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Minimum value. &lt;br /&gt;Default value is "0".</description>
            <name>minValue</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <display-name>Focus Off Script</display-name>
            <icon />
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus and its value has been modified since gaining focus.</description>
            <display-name>Input Change Script</display-name>
            <icon />
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the 'Down' button is clicked</description>
            <name>ondownclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <display-name>Focus On Script</display-name>
            <icon />
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the component input field is clicked</description>
            <name>oninputclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the component input field is double-clicked</description>
            <name>oninputdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is pressed down in the input field</description>
            <name>oninputkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is pressed and released in the input field</description>
            <name>oninputkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is released in the input field</description>
            <name>oninputkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a mouse button is pressed down in the input field</description>
            <name>oninputmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved within the input field</description>
            <name>oninputmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved away from the input field</description>
            <name>oninputmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved onto the input field</description>
            <name>oninputmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a mouse button is released</description>
            <name>oninputmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when some text is selected in the text field. This attribute can be used with the INPUT and TEXTAREA elements.</description>
            <display-name>Text Select Script</display-name>
            <icon />
            <name>onselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the 'Up' button is clicked</description>
            <name>onupclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>An override for the rendered attribute associated with our component</description>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Parameter that determines the step between nearest values while using controls. &lt;br /&gt;Default value is "1"</description>
            <name>step</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Position of this element in the tabbing order for the current document. This value must be an integer between 0 and 32767.</description>
            <display-name>Tab Index</display-name>
            <icon />
            <name>tabindex</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>itemChangeListener</tag-name>
        <description>Associates item change listener with any toggleable panel (accordion, collapsiblePanel, tabPanel, togglePanel, panelMenu) in order to listen for item change events.</description>
        <handler-class>org.richfaces.view.facelets.html.ItemChangeListenerHandler</handler-class>
        <attribute>
            <description>If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested.</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Value binding expression that evaluates to an object that implements ItemChangeListener.</description>
            <name>binding</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ItemChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void</description>
            <name>listener</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>Fully qualified Java class name of an ItemChangeListener to be created and registered.</description>
            <name>type</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>jQuery</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:jQuery&amp;gt; component applies styles and custom behavior to both JSF (JavaServer Faces) objects and regular DOM (Document Object Model) objects. It uses the jQuery JavaScript framework to add functionality to web applications.&lt;/p&gt; &lt;p&gt;This component is for use as a facelet tag. See the &amp;lt;rich:jQuery&amp;gt; EL function for access to the jQuery library via EL.&lt;/p&gt; @author nick</description>
            <component-type>org.richfaces.JQuery</component-type>
            <renderer-type>org.richfaces.JQueryRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:jQuery&amp;gt; component applies styles and custom behavior to both JSF (JavaServer Faces) objects and regular DOM (Document Object Model) objects. It uses the jQuery JavaScript framework to add functionality to web applications.&lt;/p&gt; &lt;p&gt;This component is for use as a facelet tag. See the &amp;lt;rich:jQuery&amp;gt; EL function for access to the jQuery library via EL.&lt;/p&gt; @author nick</description>
        <attribute>
            <description>The type of the attachment - decides about how is operation attached to the selected elements: "bind" (default - binds to the selected elements immediately, elements which could be matched by selector in the future won't be considered - offers a best performance), "live" (attach an event handler for all elements which match the current selector, now and in the future - may cause a slow performance), "one" (attach a handler to an event for the elements, the handler is executed at most once per element)</description>
            <name>attachType</name>
            <type>org.richfaces.component.JQueryAttachType</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The DOM event which should be the query bound to.</description>
            <name>event</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The name of a function that will be generated to execute a query.</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The query string that is executed for a given selector.</description>
            <name>query</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The jQuery selector (subset of CSS selectors defined by W3C) of the element to which the jQuery function should be applied. ID selectors starting with hash sign (#) will be expanded from componentId to clientId form. (e.g. #component is expanded to #form:component in case that component is nested in form)</description>
            <name>selector</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The timing of the jQuery attachment: "domready" (when DOM is ready), "immediate" (immediately after component client-side code is processed). This attribute is ignored when attribute "name" is provided.</description>
            <name>timing</name>
            <type>org.richfaces.component.JQueryTiming</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>list</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:list&amp;gt; component renders a list of items. The list can be an numerically ordered list, an un-ordered bullet-point list, or a data definition list. The component uses a data model for managing the list items, which can be updated dynamically.&lt;/p&gt;</description>
            <component-type>org.richfaces.List</component-type>
            <renderer-type>org.richfaces.ListRenderer</renderer-type>
            <handler-class>org.richfaces.taglib.ListHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:list&amp;gt; component renders a list of items. The list can be an numerically ordered list, an un-ordered bullet-point list, or a data definition list. The component uses a data model for managing the list items, which can be updated dynamically.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A zero-relative row number of the first row to display</description>
            <name>first</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Provides access to the iteration status in a Request scope</description>
            <name>iterationStatusVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher</description>
            <name>keepSaved</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over table row.</description>
            <name>onrowclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over table row.</description>
            <name>onrowdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the table row.</description>
            <name>onrowkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the table row.</description>
            <name>onrowkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the table row.</description>
            <name>onrowkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over table row.</description>
            <name>onrowmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the table row.</description>
            <name>onrowmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the table row.</description>
            <name>onrowmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the table row.</description>
            <name>onrowmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the table row.</description>
            <name>onrowmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the list rows</description>
            <name>rowClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the rows of the table. If the CSS class names are comma-separated, each class will be assigned to a particular row in the order they follow in the attribute. If you have less class names than rows, the class will be applied to every n-fold row where n is the order in which the class is listed in the attribute. If there are more class names than rows, the overflow ones are ignored.</description>
            <name>rowClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Provides access to the row key in a Request scope</description>
            <name>rowKeyVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>A number of rows to display, or zero for all remaining rows in the table</description>
            <name>rows</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Provides access to the state in a Request scope</description>
            <name>stateVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The type of the list: unordered (default), ordered, definitions</description>
            <name>type</name>
            <type>org.richfaces.component.ListType</type>
        </attribute>
        <attribute>
            <description>Points to the data model</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>menuGroup</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:menuGroup&amp;gt; component represents an expandable sub-menu in a menu control. The &amp;lt;rich:menuGroup&amp;gt; component can contain a number of &amp;lt;rich:menuItem&amp;gt; components, or further nested &amp;lt;rich:menuGroup&amp;gt; components.&lt;/p&gt;</description>
            <component-type>org.richfaces.MenuGroup</component-type>
            <renderer-type>org.richfaces.MenuGroupRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:menuGroup&amp;gt; component represents an expandable sub-menu in a menu control. The &amp;lt;rich:menuGroup&amp;gt; component can contain a number of &amp;lt;rich:menuItem&amp;gt; components, or further nested &amp;lt;rich:menuGroup&amp;gt; components.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the direction of the popup. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Direction</display-name>
            <icon />
            <name>direction</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>Disables the menu component, so it will not activate/expand</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the horizontal offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Horizontal Offset</display-name>
            <icon />
            <name>horizontalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The icon to be displayed with the menu item</description>
            <name>icon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon to be displayed with the menu item when it is disabled</description>
            <name>iconDisabled</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the corner attachment point with which the popup should be connected. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Joint Point</display-name>
            <icon />
            <name>jointPoint</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>The text label for the menu item. Alternatively, use the label facet to define content for the label</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when this menuGroup is hidden</description>
            <name>onhide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when this menuGroup is shown</description>
            <name>onshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Sets the vertical offset between popup element and the conjunction point &lt;/p&gt; &lt;p&gt; Default value is 0 &lt;/p&gt;</description>
            <display-name>Vertical Offset</display-name>
            <icon />
            <name>verticalOffset</name>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>menuItem</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:menuItem&amp;gt; component represents a single item in a menu control. The &amp;lt;rich:menuItem&amp;gt; component can be also be used as a seperate component without a parent menu component, such as on a toolbar.&lt;/p&gt;</description>
            <component-type>org.richfaces.MenuItem</component-type>
            <renderer-type>org.richfaces.MenuItemRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:menuItem&amp;gt; component represents a single item in a menu control. The &amp;lt;rich:menuItem&amp;gt; component can be also be used as a seperate component without a parent menu component, such as on a toolbar.&lt;/p&gt;</description>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon />
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon />
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
            <display-name>Bypass Updates</display-name>
            <icon />
            <name>bypassUpdates</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Disables the menu component, so it will not be clickable</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The icon to be displayed with the menu item</description>
            <name>icon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon to be displayed with the menu item when it is disabled</description>
            <name>iconDisabled</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;The text label for the menu item. Alternatively, use the label facet to define content for the label&lt;/p&gt; &lt;p&gt;Default is server&lt;/p&gt;</description>
            <name>label</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Determines how the menu item requests are submitted. Valid values:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;server, the default setting, submits the form normally and completely refreshes the page.&lt;/li&gt; &lt;li&gt;ajax performs an Ajax form submission, and re-renders elements specified with the render attribute.&lt;/li&gt; &lt;li&gt; client causes the action and actionListener items to be ignored, and the behavior is fully defined by the nested components instead of responses from submissions &lt;/li&gt; &lt;/ol&gt;</description>
            <name>mode</name>
            <type>org.richfaces.component.Mode</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>menuSeparator</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:menuSeparator&amp;gt; component represents a separating divider in a menu control.&lt;/p&gt;</description>
            <component-type>org.richfaces.MenuSeparator</component-type>
            <renderer-type>org.richfaces.MenuSeparatorRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:menuSeparator&amp;gt; component represents a separating divider in a menu control.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>message</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:message&amp;gt; component renders a single FacesMessage message instance added for the component. The appearance of the message can be customized, and tool-tips can be used for further information about the message.&lt;/p&gt; @author asmirnov@exadel.com</description>
            <component-type>org.richfaces.HtmlMessage</component-type>
            <renderer-type>org.richfaces.MessageRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:message&amp;gt; component renders a single FacesMessage message instance added for the component. The appearance of the message can be customized, and tool-tips can be used for further information about the message.&lt;/p&gt; @author asmirnov@exadel.com</description>
        <attribute>
            <description>Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component.</description>
            <name>ajaxRendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to "true" by default.</description>
            <display-name>Escape Characters</display-name>
            <icon />
            <name>escape</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Client identifier of the component for which to display messages.</description>
            <display-name>Associated Client Id</display-name>
            <icon />
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the detail portion of displayed messages should be included. Default value is "true".</description>
            <display-name>Show Detail</display-name>
            <icon />
            <name>showDetail</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the summary portion of displayed messages should be included. Default value is "false".</description>
            <display-name>Show Summary</display-name>
            <icon />
            <name>showSummary</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>messages</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:messages&amp;gt; components works similarly to the &amp;lt;rich:message&amp;gt; component, but can display all the validation messages added for the current view instead of just a single message.&lt;/p&gt; @author asmirnov@exadel.com</description>
            <component-type>org.richfaces.HtmlMessages</component-type>
            <renderer-type>org.richfaces.MessagesRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:messages&amp;gt; components works similarly to the &amp;lt;rich:message&amp;gt; component, but can display all the validation messages added for the current view instead of just a single message.&lt;/p&gt; @author asmirnov@exadel.com</description>
        <attribute>
            <description>Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component.</description>
            <name>ajaxRendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to "true" by default.</description>
            <display-name>Escape Characters</display-name>
            <icon />
            <name>escape</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Client identifier of the component for which to display messages. This attribute is mutually exclusive with globalOnly and take precedence if used.</description>
            <display-name>Associated Client Id</display-name>
            <icon />
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is "false".</description>
            <display-name>Global Only</display-name>
            <icon />
            <name>globalOnly</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the detail portion of displayed messages should be included. Default value is "false".</description>
            <display-name>Show Detail</display-name>
            <icon />
            <name>showDetail</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the summary portion of displayed messages should be included. Default value is "true".</description>
            <display-name>Show Summary</display-name>
            <icon />
            <name>showSummary</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>notify</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:notify&amp;gt; component serves for advanced user interaction, using notification boxes to give the user instant feedback on what's happening within the application. Each time this component is rendered, a floating notification box is displayed in the selected corner of the browser screen. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.Notify</component-type>
            <renderer-type>org.richfaces.NotifyRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:notify&amp;gt; component serves for advanced user interaction, using notification boxes to give the user instant feedback on what's happening within the application. Each time this component is rendered, a floating notification box is displayed in the selected corner of the browser screen. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Detail of the notification message</description>
            <name>detail</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to "true" by default.</description>
            <display-name>Escape Characters</display-name>
            <icon />
            <name>escape</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whetever the notification should fade when hovering and allow to click elements behind</description>
            <name>nonblocking</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines opacity of non-blocking notifications</description>
            <name>nonblockingOpacity</name>
            <type>java.lang.Double</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines whetever close button should be displayed</description>
            <name>showCloseButton</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines whetever the shadow under notification should be displayed</description>
            <name>showShadow</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines which stack will be notification bound to</description>
            <name>stack</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines how long will notification stay displayed after appearing</description>
            <name>stayTime</name>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>If true, notification have to be closed manually</description>
            <name>sticky</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Summary of the notification message</description>
            <name>summary</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>notifyMessage</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:notifyMessage&amp;gt; component is built on top of &amp;lt;rich:notify&amp;gt;, the difference is in usage. The &amp;lt;rich:notifyMessage&amp;gt; component displays FacesMessages associated with a given component, similar to &amp;lt;rich:message&amp;gt;: one notification is displayed for first FacesMessage in the stack that is risen either programatically or during conversion/validation of the component. The severity of the message determines the color and icon of the resulting notification.&lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.HtmlNotifyMessage</component-type>
            <renderer-type>org.richfaces.NotifyMessageRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:notifyMessage&amp;gt; component is built on top of &amp;lt;rich:notify&amp;gt;, the difference is in usage. The &amp;lt;rich:notifyMessage&amp;gt; component displays FacesMessages associated with a given component, similar to &amp;lt;rich:message&amp;gt;: one notification is displayed for first FacesMessage in the stack that is risen either programatically or during conversion/validation of the component. The severity of the message determines the color and icon of the resulting notification.&lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component.</description>
            <name>ajaxRendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to "true" by default.</description>
            <display-name>Escape Characters</display-name>
            <icon />
            <name>escape</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Client identifier of the component for which to display messages.</description>
            <display-name>Associated Client Id</display-name>
            <icon />
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whetever the notification should fade when hovering and allow to click elements behind</description>
            <name>nonblocking</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines opacity of non-blocking notifications</description>
            <name>nonblockingOpacity</name>
            <type>java.lang.Double</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines whetever close button should be displayed</description>
            <name>showCloseButton</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the detail portion of displayed messages should be included. Default value is "true".</description>
            <display-name>Show Detail</display-name>
            <icon />
            <name>showDetail</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines whetever the shadow under notification should be displayed</description>
            <name>showShadow</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the summary portion of displayed messages should be included. Default value is "false".</description>
            <display-name>Show Summary</display-name>
            <icon />
            <name>showSummary</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines which stack will be notification bound to</description>
            <name>stack</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines how long will notification stay displayed after appearing</description>
            <name>stayTime</name>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>If true, notification have to be closed manually</description>
            <name>sticky</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>notifyMessages</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:notifyMessages&amp;gt; component is the same as the &amp;lt;rich:notifyMessage&amp;gt; component, but each of the available messages generates one notification. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.HtmlNotifyMessages</component-type>
            <renderer-type>org.richfaces.NotifyMessagesRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:notifyMessages&amp;gt; component is the same as the &amp;lt;rich:notifyMessage&amp;gt; component, but each of the available messages generates one notification. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>Defines, whether the content of this component must be (or not) included in AJAX response created by parent AJAX Container, even if it is not forced by reRender list of ajax action. Ignored if component marked to output by some Ajax action component.</description>
            <name>ajaxRendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that characters that are sensitive in HTML and XML markup must be escaped. This flag is set to "true" by default.</description>
            <display-name>Escape Characters</display-name>
            <icon />
            <name>escape</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Client identifier of the component for which to display messages. This attribute is mutually exclusive with globalOnly and take precedence if used.</description>
            <display-name>Associated Client Id</display-name>
            <icon />
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that only global messages (that is, messages not associated with any client identifier) are to be displayed. Default value is "false".</description>
            <display-name>Global Only</display-name>
            <icon />
            <name>globalOnly</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whetever the notification should fade when hovering and allow to click elements behind</description>
            <name>nonblocking</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines opacity of non-blocking notifications</description>
            <name>nonblockingOpacity</name>
            <type>java.lang.Double</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines whetever close button should be displayed</description>
            <name>showCloseButton</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the detail portion of displayed messages should be included. Default value is "false".</description>
            <display-name>Show Detail</display-name>
            <icon />
            <name>showDetail</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines whetever the shadow under notification should be displayed</description>
            <name>showShadow</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether the summary portion of displayed messages should be included. Default value is "true".</description>
            <display-name>Show Summary</display-name>
            <icon />
            <name>showSummary</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines which stack will be notification bound to</description>
            <name>stack</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines how long will notification stay displayed after appearing</description>
            <name>stayTime</name>
            <type>java.lang.Integer</type>
        </attribute>
        <attribute>
            <description>If true, notification have to be closed manually</description>
            <name>sticky</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>notifyStack</tag-name>
        <component>
            <description>&lt;p&gt;Notifications emited by &amp;lt;rich:notify&amp;gt;, &amp;lt;rich:notifyMessage&amp;gt; and &amp;lt;rich:notifyMessages&amp;gt; are displayed in top-right corner of the screen by default.&lt;/p&gt; &lt;p&gt; It is &amp;lt;rich:notifyStack&amp;gt; which defines where messages will appear and handles their stacking. &lt;/p&gt;&lt;p&gt; Stack also provides way how to remove messages from screen - when stack is re-rendered, current notifications are destroyed, freeing place for new notifications.&lt;/p&gt; @author Bernard Labno @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt;</description>
            <component-type>org.richfaces.NotifyStack</component-type>
            <renderer-type>org.richfaces.NotifyStackRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;Notifications emited by &amp;lt;rich:notify&amp;gt;, &amp;lt;rich:notifyMessage&amp;gt; and &amp;lt;rich:notifyMessages&amp;gt; are displayed in top-right corner of the screen by default.&lt;/p&gt; &lt;p&gt; It is &amp;lt;rich:notifyStack&amp;gt; which defines where messages will appear and handles their stacking. &lt;/p&gt;&lt;p&gt; Stack also provides way how to remove messages from screen - when stack is re-rendered, current notifications are destroyed, freeing place for new notifications.&lt;/p&gt; @author Bernard Labno @author &lt;a href="http://community.jboss.org/people/lfryc"&gt;Lukas Fryc&lt;/a&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Defines in which direction will be notification stacked</description>
            <name>direction</name>
            <type>org.richfaces.component.StackingDirection</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines where new notifications will appear</description>
            <name>method</name>
            <type>org.richfaces.component.StackingMethod</type>
        </attribute>
        <attribute>
            <description>Defines the position of the start of stack: topLeft, topRight (default), bottomLeft, bottomRight</description>
            <name>position</name>
            <type>org.richfaces.component.CornerPosition</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>orderingList</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:orderingList&amp;gt; is a component for ordering items in a list (client-side).&lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.OrderingList</component-type>
            <renderer-type>org.richfaces.OrderingListRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:orderingList&amp;gt; is a component for ordering items in a list (client-side).&lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The text placed above the list of items</description>
            <name>caption</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself.</description>
            <name>collectionType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the columns of the list elements. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>columnClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled.</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element when it is disabled. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>disabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-to-bottom button</description>
            <name>downBottomText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-down button</description>
            <name>downText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the header element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Label to be displayed to the user for the corresponding option.</description>
            <name>itemLabel</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Value to be returned to the server if the corresponding option is selected by the user.</description>
            <name>itemValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The height of the item list (in pixels).</description>
            <name>listHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The width of the item list (in pixels).</description>
            <name>listWidth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The maximum height of the item list (in pixels).</description>
            <name>maxListHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The minimum height of the item list (in pixels).</description>
            <name>minListHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus</description>
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the list element .</description>
            <name>onlistclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the list element .</description>
            <name>onlistdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the list element .</description>
            <name>onlistkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the list element .</description>
            <name>onlistkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the list element .</description>
            <name>onlistkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the list element .</description>
            <name>onlistmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the list element .</description>
            <name>onlistmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the list element .</description>
            <name>onlistmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the list element .</description>
            <name>onlistmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the list element .</description>
            <name>onlistmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>selectItemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to this element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-up button</description>
            <name>upText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-to-top button</description>
            <name>upTopText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>Expose the value from the value attribute under this request scoped key so that it may be referred to in EL for the value of other attributes.</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>panel</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:panel&amp;gt; component is a bordered panel with an optional header.&lt;/p&gt;</description>
            <component-type>org.richfaces.Panel</component-type>
            <renderer-type>org.richfaces.PanelRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:panel&amp;gt; component is a bordered panel with an optional header.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel header.</description>
            <name>bodyClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel header.</description>
            <name>header</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel header.</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>panelMenu</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:panelMenu&amp;gt; component is used in conjunction with &amp;lt;rich:panelMenuItem&amp;gt; and &amp;lt;rich:panelMenuGroup&amp;gt; to create an expanding, hierarchical menu. The &amp;lt;rich:panelMenu&amp;gt; component's appearance can be highly customized, and the hierarchy can stretch to any number of sub-levels.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.PanelMenu</component-type>
            <renderer-type>org.richfaces.PanelMenuRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.html.PanelMenuTagHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:panelMenu&amp;gt; component is used in conjunction with &amp;lt;rich:panelMenuItem&amp;gt; and &amp;lt;rich:panelMenuGroup&amp;gt; to create an expanding, hierarchical menu. The &amp;lt;rich:panelMenu&amp;gt; component's appearance can be highly customized, and the hierarchy can stretch to any number of sub-levels.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>Holds the active panel name. This name is a reference to the name identifier of the active child &amp;lt;rich:panelMenuItem&amp;gt; or &amp;lt;rich:panelMenuGroup&amp;gt; component.</description>
            <name>activeItem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>If true (default), selection of any item of group will cause selection of groups - predecessors - in the hierarchy. If false, only given item is selected.</description>
            <name>bubbleSelection</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The mouse event used for collapsing.</description>
            <name>collapseEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Disables all panel menu items and groups.</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The mouse event used for expansion.</description>
            <name>expandEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If true (default), only one group can be expanded at the time. If false, many groups can be expanded.</description>
            <name>expandSingle</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to panel menu groups</description>
            <name>groupClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for collapsed panel menu groups</description>
            <name>groupCollapsedLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for collapsed panel menu groups</description>
            <name>groupCollapsedRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to disabled panel menu groups</description>
            <name>groupDisabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for disabled panel menu groups</description>
            <name>groupDisabledLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for disabled panel menu groups</description>
            <name>groupDisabledRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for expanded panel menu groups</description>
            <name>groupExpandedLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for expanded panel menu groups</description>
            <name>groupExpandedRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Mode used for expanding/collapsing groups: client (default), ajax, server</description>
            <name>groupMode</name>
            <type>org.richfaces.PanelMenuMode</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Method expression referencing a method that will be called when an ItemChangeEvent has been broadcast for the listener.</description>
            <name>itemChangeListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel menu items.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to disables panel menu items.</description>
            <name>itemDisabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for disabled panel menu items</description>
            <name>itemDisabledLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for panel menu items</description>
            <name>itemDisabledRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for panel menu items</description>
            <name>itemLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The mode user for selecting items: client, ajax (default), server</description>
            <name>itemMode</name>
            <type>org.richfaces.PanelMenuMode</type>
        </attribute>
        <attribute>
            <description>The left icon for right menu items</description>
            <name>itemRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to top-level panel menu groups</description>
            <name>topGroupClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for collapsed top-level panel menu groups</description>
            <name>topGroupCollapsedLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for collapsed top-level panel menu groups</description>
            <name>topGroupCollapsedRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to disabled top-level panel menu groups</description>
            <name>topGroupDisabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for disabled top-level panel menu groups</description>
            <name>topGroupDisabledLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for disabled top-level panel menu groups</description>
            <name>topGroupDisabledRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for expanded top-level panel menu groups</description>
            <name>topGroupExpandedLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for expanded top-level panel menu groups</description>
            <name>topGroupExpandedRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to top-level panel menu items</description>
            <name>topItemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to disabled top-level panel menu items</description>
            <name>topItemDisabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for disabled top-level panel menu items</description>
            <name>topItemDisabledLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for disabled top-level panel menu items</description>
            <name>topItemDisabledRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The left icon for top-level panel menu items</description>
            <name>topItemLeftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The right icon for top-level panel menu items</description>
            <name>topItemRightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The width of the panel menu in pixels.</description>
            <name>width</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>panelMenuGroup</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:panelMenuGroup&amp;gt; component defines a group of &amp;lt;rich:panelMenuItem&amp;gt; components inside a &amp;lt;rich:panelMenu&amp;gt;.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.PanelMenuGroup</component-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:panelMenuGroup&amp;gt; component defines a group of &amp;lt;rich:panelMenuItem&amp;gt; components inside a &amp;lt;rich:panelMenu&amp;gt;.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon />
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon />
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
            <display-name>Bypass Updates</display-name>
            <icon />
            <name>bypassUpdates</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The mouse event used for collapsing.</description>
            <name>collapseEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Defines whenever this component should be disabled.</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel menu group when it is disabled.</description>
            <name>disabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The mouse event used for expansion.</description>
            <name>expandEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whenever this group is expanded</description>
            <name>expanded</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel menu group when it is hovered.</description>
            <name>hoverClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A localized user presentable name for this component.</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu group label when the group is collapsed</description>
            <name>leftCollapsedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu group label when the group is disabled</description>
            <name>leftDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu group label when the group is expanded</description>
            <name>leftExpandedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the left icon of the panel menu group.</description>
            <name>leftIconClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Mode used for expanding/collapsing of this group: default value is inherited from panelMenu</description>
            <name>mode</name>
            <type>org.richfaces.PanelMenuMode</type>
        </attribute>
        <attribute>
            <description>The name of this component</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the menu group is collapsed</description>
            <name>onbeforecollapse</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the menu group is expanded</description>
            <name>onbeforeexpand</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the menu group is selected</description>
            <name>onbeforeselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the menu group is switched (toggled)</description>
            <name>onbeforeswitch</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is collapsed</description>
            <name>oncollapse</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is expanded</description>
            <name>onexpand</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is selected</description>
            <name>onselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is switched (toggled)</description>
            <name>onswitch</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is unselected</description>
            <name>onunselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>IDs of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the menu group label when the group is collapsed</description>
            <name>rightCollapsedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu group label when the group is disabled</description>
            <name>rightDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu group label when the group is expanded</description>
            <name>rightExpandedIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the right icon of the panel menu group.</description>
            <name>rightIconClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whenever the group is selectable.</description>
            <name>selectable</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>panelMenuItem</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:panelMenuItem&amp;gt; component represents a single item inside a &amp;lt;rich:panelMenuGroup&amp;gt; component, which is in turn part of a &amp;lt;rich:panelMenu&amp;gt; component.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.PanelMenuItem</component-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:panelMenuItem&amp;gt; component represents a single item inside a &amp;lt;rich:panelMenuGroup&amp;gt; component, which is in turn part of a &amp;lt;rich:panelMenu&amp;gt; component.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon />
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon />
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
            <display-name>Bypass Updates</display-name>
            <icon />
            <name>bypassUpdates</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Defines whenever this component should be disabled.</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the panel menu item when it is disabled.</description>
            <name>disabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>IDs of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A localized user presentable name for this component.</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu item when it is disabled</description>
            <name>leftDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the left of the menu item label</description>
            <name>leftIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the left icon of the panel menu item.</description>
            <name>leftIconClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Mode used for selecting of this item: default value is inherited from panelMenu</description>
            <name>mode</name>
            <type>org.richfaces.PanelMenuMode</type>
        </attribute>
        <attribute>
            <description>The name of this component</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the menu group is selected</description>
            <name>onbeforeselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is selected</description>
            <name>onselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the menu group is unselected</description>
            <name>onunselect</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>IDs of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the menu item when it is disabled</description>
            <name>rightDisabledIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon displayed on the right of the menu item label</description>
            <name>rightIcon</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the right icon of the panel menu item.</description>
            <name>rightIconClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whenever the item is selectable.</description>
            <name>selectable</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>panelToggleListener</tag-name>
        <description>Associates panel toggle listener with collapsiblePanel in order to listen for panel toggle events.</description>
        <handler-class>org.richfaces.view.facelets.html.PanelToggleListenerHandler</handler-class>
        <attribute>
            <description>If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested.</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Value binding expression that evaluates to an object that implements PanelToggleListener.</description>
            <name>binding</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an PanelToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void</description>
            <name>listener</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>Fully qualified Java class name of an PanelToggleListener to be created and registered.</description>
            <name>type</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>pickList</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:pickList&amp;gt; is a component for selecting items from a list. Additionally, it allows for the selected items to be ordered (client-side). From the client side perspective, items are added/removed from the source list, and removed/added to the target list. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.PickList</component-type>
            <renderer-type>org.richfaces.PickListRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:pickList&amp;gt; is a component for selecting items from a list. Additionally, it allows for the selected items to be ordered (client-side). From the client side perspective, items are added/removed from the source list, and removed/added to the target list. &lt;/p&gt; @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>The text to display in the add-all button</description>
            <name>addAllText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the add button</description>
            <name>addText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Optional attribute that is a literal string that is the fully qualified class name of a concrete class that implements java.util.Collection, or an EL expression that evaluates to either 1. such a String, or 2. the Class object itself.</description>
            <name>collectionType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the columns of the list elements. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>columnClasses</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled.</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element when it is disabled. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>disabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-to-bottom button</description>
            <name>downBottomText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-down button</description>
            <name>downText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the header element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The height of the item list (in pixels).</description>
            <name>listHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The width of the item list (in pixels).</description>
            <name>listWidth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The maximum height of the item list (in pixels).</description>
            <name>maxListHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The minimum height of the item list (in pixels).</description>
            <name>minListHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when items are removed from the source list, and added to the target list</description>
            <name>onadditems</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus</description>
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when items are removed from the target list, and added to the source list</description>
            <name>onremoveitems</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the source list element loses focus.</description>
            <name>onsourceblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the source list element .</description>
            <name>onsourceclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the source list element .</description>
            <name>onsourcedblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the source list element receives focus.</description>
            <name>onsourcefocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the source list element .</description>
            <name>onsourcekeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the source list element .</description>
            <name>onsourcekeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the source list element .</description>
            <name>onsourcekeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the source list element .</description>
            <name>onsourcemousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the source list element .</description>
            <name>onsourcemousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the source list element .</description>
            <name>onsourcemouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the source list element .</description>
            <name>onsourcemouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the source list element .</description>
            <name>onsourcemouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the target list element loses focus.</description>
            <name>ontargetblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the target list element .</description>
            <name>ontargetclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the target list element .</description>
            <name>ontargetdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the target list element receives focus.</description>
            <name>ontargetfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the target list element .</description>
            <name>ontargetkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the target list element .</description>
            <name>ontargetkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the target list element .</description>
            <name>ontargetkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the target list element .</description>
            <name>ontargetmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the target list element .</description>
            <name>ontargetmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the target list element .</description>
            <name>ontargetmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the target list element .</description>
            <name>ontargetmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the target list element .</description>
            <name>ontargetmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;If "true", then the target list is orderable, and the ordering controls are displayed&lt;/p&gt; &lt;p&gt;Default is "false"&lt;/p&gt;</description>
            <name>orderable</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The text to display in the remove-all button</description>
            <name>removeAllText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the remove button</description>
            <name>removeText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>selectItemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text placed above the source list of items</description>
            <name>sourceCaption</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to this element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;if "true", then clicking an item moves it from one list to another&lt;/p&gt; &lt;p&gt;Default is "false"&lt;/p&gt;</description>
            <name>switchByClick</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;if "true", then double-clicking an item moves it from one list to another&lt;/p&gt; &lt;p&gt;Default is "true"&lt;/p&gt;</description>
            <name>switchByDblClick</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The text placed above the target list of items</description>
            <name>targetCaption</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-up button</description>
            <name>upText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The text to display in the move-to-top button</description>
            <name>upTopText</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>Expose the value from the value attribute under this request scoped key so that it may be referred to in EL for the value of other attributes.</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>placeholder</tag-name>
        <component>
            <description>Adds placeholder capability to HTML input and textarea elements. A placeholder typically appears as light gray text within an input or textarea element whenever the element is empty and does not have focus. This provides a hint to the user as to what the input or textarea element is used for, or the type of input that is required.</description>
            <component-type>org.richfaces.Placeholder</component-type>
            <renderer-type>org.richfaces.PlaceholderRenderer</renderer-type>
        </component>
        <description>Adds placeholder capability to HTML input and textarea elements. A placeholder typically appears as light gray text within an input or textarea element whenever the element is empty and does not have focus. This provides a hint to the user as to what the input or textarea element is used for, or the type of input that is required.</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The jQuery selector used to filter which child DOM elements will be a placeholder attached to.</description>
            <name>selector</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) which will be applied to the target input component when placeholder is active.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <required>true</required>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>popupPanel</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:popupPanel&amp;gt; component provides a pop-up panel or window that appears in front of the rest of the application. The &amp;lt;rich:popupPanel&amp;gt; component functions either as a modal window which blocks interaction with the rest of the application while active, or as a non-modal window. It can be positioned on the screen, dragged to a new position by the user, and re-sized.&lt;/p&gt;</description>
            <component-type>org.richfaces.PopupPanel</component-type>
            <renderer-type>org.richfaces.PopupPanelRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:popupPanel&amp;gt; component provides a pop-up panel or window that appears in front of the rest of the application. The &amp;lt;rich:popupPanel&amp;gt; component functions either as a modal window which blocks interaction with the rest of the application while active, or as a non-modal window. It can be positioned on the screen, dragged to a new position by the user, and re-sized.&lt;/p&gt;</description>
        <attribute>
            <description>If "true" popupPanel will be auto-sized according to the content. Default value is "false".</description>
            <name>autosized</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the component controls</description>
            <name>controlsClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines the DOM element, which stacking context will assimilate the popupPanel. Possible values: "body", "form", "parent". Default value is "body".</description>
            <name>domElementAttachment</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whenever the popup will follow the scrolling of the screen. Default value is "true".</description>
            <name>followByScroll</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Assigns the header for the popupPanel.</description>
            <name>header</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Assigns one or more space-separated CSS class names to the component header</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute defines height of component. Default value is "300".</description>
            <name>height</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true" popupPanel should save state after submission. Default value is "false".</description>
            <name>keepVisualState</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Attribute defines X position of component left-top corner. Default value is "auto".</description>
            <name>left</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute defines max height of component.</description>
            <name>maxHeight</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Attribute defines max width of component.</description>
            <name>maxWidth</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Attribute defines min height of component. Default value is "10". If the value is less then 10, a "IllegalArgumentException" exception is thrown.</description>
            <name>minHeight</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Attribute defines min width of component. Default value is "10". If the value is less then 10, a "IllegalArgumentException" exception is thrown.</description>
            <name>minWidth</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>If "true", popupPanel will be modal - it will block the main screen from any operation.</description>
            <name>modal</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If "true" there is possibility to move component. Default value is "true".</description>
            <name>moveable</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The client-side code executed before the popup disappears.</description>
            <name>onbeforehide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed before this component is shown.</description>
            <name>onbeforeshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed after the popup disappears.</description>
            <name>onhide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the popupPanel mask.</description>
            <name>onmaskclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button for context menu is clicked over the popupPanel mask.</description>
            <name>onmaskcontextmenu</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the popupPanel mask.</description>
            <name>onmaskdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the popupPanel mask.</description>
            <name>onmaskmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the popupPanel mask.</description>
            <name>onmaskmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the popupPanel mask.</description>
            <name>onmaskmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the popupPanel mask.</description>
            <name>onmaskmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the popupPanel mask.</description>
            <name>onmaskmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the modal panel is moved</description>
            <name>onmove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when the modal panel is resized</description>
            <name>onresize</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed after the popup is shown.</description>
            <name>onshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true" popupPanel creates iframe to overlap embed objects like PDF on a page. Default value is "false".</description>
            <name>overlapEmbedObjects</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>If "true" there is possibility to change component size. Default value is "true".</description>
            <name>resizeable</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Pop-up shadow depth for suggestion content</description>
            <name>shadowDepth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>HTML CSS class attribute of element for pop-up suggestion content</description>
            <name>shadowOpacity</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true" value for this attribute makes a modal panel opened as default. Default value is "false"</description>
            <name>show</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute defines Y position of component left-top corner. Default value is "auto".</description>
            <name>top</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Defines whether to trim or not elements inside popupPanel. Default value is "true"</description>
            <name>trimOverlayedElements</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Defines options that were specified on the client side</description>
            <name>visualOptions</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Attribute defines width of component. Default value is "200".</description>
            <name>width</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is "3".</description>
            <name>zindex</name>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>progressBar</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:progressBar&amp;gt; component displays a progress bar to indicate the status of a process to the user. It can update either through Ajax or on the client side, and the look and feel can be fully customized. &lt;/p&gt; @author "Andrey Markavtsov"</description>
            <component-type>org.richfaces.ProgressBar</component-type>
            <renderer-type>org.richfaces.ProgressBarRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:progressBar&amp;gt; component displays a progress bar to indicate the status of a process to the user. It can update either through Ajax or on the client side, and the look and feel can be fully customized. &lt;/p&gt; @author "Andrey Markavtsov"</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed on the client by a developer on AJAX request. It's accessible via "data.foo" syntax</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Enables/disables polling.&lt;/p&gt; &lt;p&gt;Default value is "true".&lt;/p&gt;</description>
            <name>enabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when before progress finishes. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>finishClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when before progress starts. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>initialClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Interval (in ms) for call poll requests.&lt;/p&gt; &lt;p&gt;Default value 1000 ms (1 sec)&lt;/p&gt;</description>
            <name>interval</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Defines a simple label instead of rendering children component</description>
            <name>label</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Max value, after which complete state should be rendered.&lt;/p&gt; &lt;p&gt;Default value is "100".&lt;/p&gt;</description>
            <name>maxValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Min value when initial state should be rendered.&lt;/p&gt; &lt;p&gt;Default value is "0".&lt;/p&gt;</description>
            <name>minValue</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;The mode for updating the progress bar, can be one of:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;ajax&lt;/dt&gt; &lt;dd&gt;The progress bar updates in the same way as the &amp;lt;a4j:poll&amp;gt; component. The &amp;lt;rich:progressBar&amp;gt; component repeatedly polls the server for the current progress value.&lt;/dd&gt; &lt;dt&gt;client&lt;/dt&gt; &lt;dd&gt;The progress bar must be explicitly updated on the client side through the JavaScript API.&lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;Default is "ajax"&lt;/p&gt;</description>
            <name>mode</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when progress is finished</description>
            <name>onfinish</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the progress bar element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>progressClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the remaining part of the progress bar. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>remainingClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Sets the current value of the progress</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>select</tag-name>
        <component>
            <description>&lt;p&gt; The &amp;lt;rich:select&amp;gt; component provides a drop-down list box for selecting a single value from multiple options. The &amp;lt;rich:select&amp;gt; component can be configured as a combo-box, where it will accept typed input. The component also supports keyboard navigation. The &amp;lt;rich:select&amp;gt; component functions similarly to the JSF UISelectOne component. &lt;/p&gt; @author abelevich</description>
            <component-type>org.richfaces.Select</component-type>
            <renderer-type>org.richfaces.SelectRenderer</renderer-type>
        </component>
        <description>&lt;p&gt; The &amp;lt;rich:select&amp;gt; component provides a drop-down list box for selecting a single value from multiple options. The &amp;lt;rich:select&amp;gt; component can be configured as a combo-box, where it will accept typed input. The component also supports keyboard navigation. The &amp;lt;rich:select&amp;gt; component functions similarly to the JSF UISelectOne component. &lt;/p&gt; @author abelevich</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>A javascript function used to filter the list of items in the select popup</description>
            <name>clientFilterFunction</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the converter message, replacing any message that comes from the converter.</description>
            <display-name>Converter Message</display-name>
            <icon />
            <name>converterMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Used to set the display text when value is undefined</description>
            <name>defaultLabel</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", this component is disabled</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If "true" Allows the user to type into a text field to scroll through or filter the list &lt;/p&gt; &lt;p&gt; Default is "false" &lt;/p&gt;</description>
            <name>enableManualInput</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list items. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the list element. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>listClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The height of the list element</description>
            <name>listHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The width of the list element</description>
            <name>listWidth</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The maximum height of the list</description>
            <name>maxListHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The minimum height ot the list</description>
            <name>minListHeight</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element loses focus.</description>
            <name>onblur</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element loses focus and its value has been modified since gaining focus.</description>
            <name>onchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when this element receives focus.</description>
            <name>onfocus</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the list element.</description>
            <name>onlistclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the list element.</description>
            <name>onlistdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element is hidden</description>
            <name>onlisthide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over the list element.</description>
            <name>onlistkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over the list element.</description>
            <name>onlistkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over the list element.</description>
            <name>onlistkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the list element.</description>
            <name>onlistmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the list element.</description>
            <name>onlistmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from the list element.</description>
            <name>onlistmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto the list element.</description>
            <name>onlistmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the list element.</description>
            <name>onlistmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when the list element is shown</description>
            <name>onlistshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when an item is selected</description>
            <name>onselectitem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that the user is required to provide a submitted value for this input component.</description>
            <display-name>Required Flag</display-name>
            <icon />
            <name>required</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validation message for the "required" facility, if the "required" facility is used.</description>
            <display-name>Required Message</display-name>
            <icon />
            <name>requiredMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; If "true" as the user types to narrow the list, automatically select the first element in the list. Applicable only when enableManualInput is "true". &lt;/p&gt; &lt;p&gt; Default is "true" &lt;/p&gt;</description>
            <name>selectFirst</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the selected list item. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>selectItemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; When "true" display a button to expand the popup list &lt;/p&gt; &lt;p&gt; Default is "true" &lt;/p&gt;</description>
            <name>showButton</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing a validator method that will be called during Process Validations to perform correctness checks on the value of this component. The expression must evaluate to a public method that takes FacesContext, UIComponent, and Object parameters, with a return type of void.</description>
            <display-name>Validator</display-name>
            <icon />
            <name>validator</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>A ValueExpression enabled attribute that, if present, will be used as the text of the validator message, replacing any message that comes from the validator.</description>
            <display-name>Validator Message</display-name>
            <icon />
            <name>validatorMessage</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing a value change listener method that will be notified when a new value has been set for this input component. The expression must evaluate to a public method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt; parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing what the new value is, but this can be useful in cases where a notification is needed that "this value changed".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Value Change Listener</display-name>
            <icon />
            <name>valueChangeListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>tab</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:tab&amp;gt; component represents an individual tab inside a &amp;lt;rich:tabPanel&amp;gt; component, including the tab's content. Clicking on the tab header will bring its corresponding content to the front of other tabs.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.Tab</component-type>
            <renderer-type>org.richfaces.TabRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:tab&amp;gt; component represents an individual tab inside a &amp;lt;rich:tabPanel&amp;gt; component, including the tab's content. Clicking on the tab header will bring its corresponding content to the front of other tabs.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>MethodExpression representing the application action to invoke when this component is activated by the user. The expression must evaluate to a public method that takes no parameters, and returns an Object (the toString() of which is called to derive the logical outcome) which is passed to the NavigationHandler for this application.</description>
            <display-name>Application Action</display-name>
            <icon />
            <name>action</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an ActionEvent parameter, with a return type of void, &lt;span class="changed_added_2_0"&gt;or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".&lt;/span&gt; &lt;/p&gt;</description>
            <display-name>Action Listener</display-name>
            <icon />
            <name>actionListener</name>
            <type>javax.faces.el.MethodBinding</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>If "true", after process validations phase it skips updates of model beans on a force render response. It can be used for validating components input</description>
            <display-name>Bypass Updates</display-name>
            <icon />
            <name>bypassUpdates</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the panel content</description>
            <name>contentClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether toggling of this panel is disabled</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>IDs of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of IDs, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>The header label of the tab</description>
            <name>header</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header when this panel is active</description>
            <name>headerActiveClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header</description>
            <name>headerClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header when this panel is disabled</description>
            <name>headerDisabledClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS class applied to the header when this panel is inactive</description>
            <name>headerInactiveClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The CSS style applied to the header</description>
            <name>headerStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <display-name>Immediate Action</display-name>
            <icon />
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The name of the tab, used for identifying and manipulating the active panel</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function to perform when the mouse enters the panel</description>
            <name>onenter</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over the header of this element.</description>
            <name>onheaderclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over the header of this element.</description>
            <name>onheaderdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over the header of this element.</description>
            <name>onheadermousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within the header of this element.</description>
            <name>onheadermousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over the header of this element.</description>
            <name>onheadermouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function to perform when the mouse leaves the panel.</description>
            <name>onleave</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>IDs of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single ID, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch type for this toggle panel: client, ajax (default), server</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>tabPanel</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:tabPanel&amp;gt; component provides a set of tabbed panels for displaying one panel of content at a time. The tabs can be highly customized and themed. Each tab within a &amp;lt;rich:tabPanel&amp;gt; container is a &amp;lt;rich:tab&amp;gt; component.&lt;/p&gt; @author akolonitsky</description>
            <component-type>org.richfaces.TabPanel</component-type>
            <renderer-type>org.richfaces.TabPanelRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.html.TogglePanelTagHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:tabPanel&amp;gt; component provides a set of tabbed panels for displaying one panel of content at a time. The tabs can be highly customized and themed. Each tab within a &amp;lt;rich:tabPanel&amp;gt; container is a &amp;lt;rich:tab&amp;gt; component.&lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>Holds the active tab name. This name is a reference to the name identifier of the active child &amp;lt;rich:tab&amp;gt; component.</description>
            <name>activeItem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Applicable when cycling through the tabs. If "true", then when the last tab is active, cycling to next will activate the first tab, if "false", cycling to next will have not effect. The inverse applies for the first tab, and cycling to previous. Whether to Default: false</description>
            <name>cycledSwitching</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The alignment of the tab panel header: left, center, right, bottom, top</description>
            <name>headerAlignment</name>
            <type>org.richfaces.HeaderAlignment</type>
        </attribute>
        <attribute>
            <description>The position of the header: top, bottom, left, right</description>
            <name>headerPosition</name>
            <type>org.richfaces.HeaderPosition</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Occurs on the server side when an item is changed through Ajax using the server mode</description>
            <name>itemChangeListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the item is changed.</description>
            <name>onbeforeitemchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the item is changed.</description>
            <name>onitemchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch mode when a panel is activated. One of: "client", "server", "ajax". Default: "ajax"</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) for active tab header.</description>
            <name>tabActiveHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) for tab content</description>
            <name>tabContentClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) for disabled tab headers.</description>
            <name>tabDisabledHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) for tab headers.</description>
            <name>tabHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) for inactive tab headers.</description>
            <name>tabInactiveHeaderClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>toggleControl</tag-name>
        <behavior>
            <description>&lt;p&gt; The &amp;lt;rich:toggleControl&amp;gt; behavior can be attached to any interface component, whether inside or outside the controlled panel itself. It works with a &amp;lt;rich:togglePanel&amp;gt; component to switch between different &amp;lt;rich:togglePanelItem&amp;gt; components. &lt;/p&gt; @author akolonitsky</description>
            <behavior-id>org.richfaces.component.behavior.ToggleControl</behavior-id>
            <handler-class>org.richfaces.view.facelets.html.CustomBehaviorHandler</handler-class>
        </behavior>
        <description>&lt;p&gt; The &amp;lt;rich:toggleControl&amp;gt; behavior can be attached to any interface component, whether inside or outside the controlled panel itself. It works with a &amp;lt;rich:togglePanel&amp;gt; component to switch between different &amp;lt;rich:togglePanelItem&amp;gt; components. &lt;/p&gt; @author akolonitsky</description>
        <attribute>
            <description>If "true", disable the default action of the parent component</description>
            <name>disableDefault</name>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>The event on which to toggle the target panel</description>
            <name>event</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The next &amp;lt;rich:togglePanelItem&amp;gt; to switch to</description>
            <name>targetItem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The &amp;lt;rich:togglePanel&amp;gt; to switch when this &amp;lt;rich:toggleControl&amp;gt; is not a child of a &amp;lt;rich:togglePanel&amp;gt;</description>
            <name>targetPanel</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>togglePanel</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:togglePanel&amp;gt; component is used as a base for the other switchable components, the &amp;lt;rich:accordion&amp;gt; component and the &amp;lt;rich:tabPanel&amp;gt; component. It provides an abstract switchable component without any associated markup. As such, the &amp;lt;rich:togglePanel&amp;gt; component could be customized to provide a switchable component when neither an accordion component or a tab panel component is appropriate.&lt;/p&gt; @author akolonitsky @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.TogglePanel</component-type>
            <renderer-type>org.richfaces.TogglePanelRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.html.TogglePanelTagHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:togglePanel&amp;gt; component is used as a base for the other switchable components, the &amp;lt;rich:accordion&amp;gt; component and the &amp;lt;rich:tabPanel&amp;gt; component. It provides an abstract switchable component without any associated markup. As such, the &amp;lt;rich:togglePanel&amp;gt; component could be customized to provide a switchable component when neither an accordion component or a tab panel component is appropriate.&lt;/p&gt; @author akolonitsky @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>Holds the active panel name. This name is a reference to the name identifier of the active child &amp;lt;rich:togglePanelItem&amp;gt; component.</description>
            <name>activeItem</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Applicable when cycling through the tabs. If "true", then when the last tab is active, cycling to next will activate the first tab, if "false", cycling to next will have not effect. The inverse applies for the first tab, and cycling to previous. Whether to Default: false</description>
            <name>cycledSwitching</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that this component's value must be converted and validated immediately (that is, during Apply Request Values phase), rather than waiting until Process Validations phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Occurs on the server side when an item is changed through Ajax using the server mode</description>
            <name>itemChangeListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the item is changed.</description>
            <name>onbeforeitemchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the item is changed.</description>
            <name>onitemchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch mode when a panel is activated. One of: "client", "server", "ajax". Default: "ajax"</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>togglePanelItem</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:togglePanelItem&amp;gt; component is a switchable panel for use with the &amp;lt;rich:togglePanel&amp;gt; component. Use the &amp;lt;rich:togglePanelItem&amp;gt; component to define the content for a panel using nested components. Switching between &amp;lt;rich:togglePanelItem&amp;gt; components is handled by the &amp;lt;rich:toggleControl&amp;gt; behavior.&lt;/p&gt; @author akolonitsky @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
            <component-type>org.richfaces.TogglePanelItem</component-type>
            <renderer-type>org.richfaces.TogglePanelItemRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:togglePanelItem&amp;gt; component is a switchable panel for use with the &amp;lt;rich:togglePanel&amp;gt; component. Use the &amp;lt;rich:togglePanelItem&amp;gt; component to define the content for a panel using nested components. Switching between &amp;lt;rich:togglePanelItem&amp;gt; components is handled by the &amp;lt;rich:toggleControl&amp;gt; behavior.&lt;/p&gt; @author akolonitsky @author &lt;a href="http://community.jboss.org/people/bleathem"&gt;Brian Leathem&lt;/a&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The name of the panel, used for identifying and manipulating the active panel</description>
            <name>name</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function to perform when the mouse enters the panel</description>
            <name>onenter</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The function to perform when the mouse leaves the panel.</description>
            <name>onleave</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The switch type for this toggle panel: client, ajax (default), server</description>
            <name>switchType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>toolbar</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:toolbar&amp;gt; component is a horizontal toolbar. Any JavaServer Faces (JSF) component can be added to the toolbar.&lt;/p&gt;</description>
            <component-type>org.richfaces.Toolbar</component-type>
            <renderer-type>org.richfaces.ToolbarRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:toolbar&amp;gt; component is a horizontal toolbar. Any JavaServer Faces (JSF) component can be added to the toolbar.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>A height of a bar in pixels. If a height is not defined, a bar height depends of the "headerFontSize" skin parameter.</description>
            <name>height</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when the item elements are rendered.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;A separator between items on a bar. Possible values are "none", "line", "square", "disc" and "grid".&lt;/p&gt; &lt;p&gt;Default value is "none".&lt;/p&gt;</description>
            <name>itemSeparator</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when the item element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>itemStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when an item is clicked</description>
            <name>onitemclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when an item is double-clicked</description>
            <name>onitemdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is pressed down over the element</description>
            <name>onitemkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is pressed and released over an item</description>
            <name>onitemkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is released</description>
            <name>onitemkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a mouse button is pressed down over an item</description>
            <name>onitemmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved within an item</description>
            <name>onitemmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved away from an item</description>
            <name>onitemmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved onto an item</description>
            <name>onitemmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a mouse button is released over an item</description>
            <name>onitemmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;A width of a bar that can be defined in pixels or as percentage.&lt;/p&gt; &lt;p&gt; Default value is "100%".&lt;/p&gt;</description>
            <name>width</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>toolbarGroup</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:toolbarGroup&amp;gt; component is a child component of the &amp;lt;rich:toolbar&amp;gt; component. The &amp;lt;rich:toolbarGroup&amp;gt; component is used to group a number of items together on a toolbar.&lt;/p&gt;</description>
            <component-type>org.richfaces.ToolbarGroup</component-type>
            <renderer-type>org.richfaces.ToolbarGroupRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:toolbarGroup&amp;gt; component is a child component of the &amp;lt;rich:toolbar&amp;gt; component. The &amp;lt;rich:toolbarGroup&amp;gt; component is used to group a number of items together on a toolbar.&lt;/p&gt;</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when the item elements are rendered.</description>
            <name>itemClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;A separator between items on a bar. Possible values are "none", "line", "square", "disc" and "grid".&lt;/p&gt; &lt;p&gt;Default value is "none".&lt;/p&gt;</description>
            <name>itemSeparator</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when the item element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <name>itemStyle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt;Location of the toolbar items in the parent toolbar. Can be one of "left" or "right"&lt;/p&gt; &lt;p&gt;Default is "left"&lt;/p&gt;</description>
            <name>location</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when an item is clicked</description>
            <name>onitemclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when an item is double-clicked</description>
            <name>onitemdblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is pressed down over the element</description>
            <name>onitemkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is pressed and released over an item</description>
            <name>onitemkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a key is released</description>
            <name>onitemkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a mouse button is pressed down over an item</description>
            <name>onitemmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved within an item</description>
            <name>onitemmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved away from an item</description>
            <name>onitemmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a pointer is moved onto an item</description>
            <name>onitemmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when a mouse button is released over an item</description>
            <name>onitemmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>tooltip</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:tooltip&amp;gt; component provides an informational tool-tip. The tool-tip can be attached to any control and is displayed when hovering the mouse cursor over the control.&lt;/p&gt; @author amarkhel</description>
            <component-type>org.richfaces.Tooltip</component-type>
            <renderer-type>org.richfaces.TooltipRenderer</renderer-type>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:tooltip&amp;gt; component provides an informational tool-tip. The tool-tip can be attached to any control and is displayed when hovering the mouse cursor over the control.&lt;/p&gt; @author amarkhel</description>
        <attribute>
            <description>If the value of the "attached" attribute is "true", a component is attached to the parent component; if "false", component does not listen to activating browser events, but could be activated externally. Default value is "true"</description>
            <name>attached</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Converter instance registered with this component.</description>
            <display-name>Converter</display-name>
            <icon />
            <name>converter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the direction of the popup. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Direction</display-name>
            <icon />
            <name>direction</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>If "true" tooltip should follow the mouse while it moves over the parent element. Default value is "true"</description>
            <name>followMouse</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Delay in milliseconds before tooltip will be hidden. Default value is "0"</description>
            <name>hideDelay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Event that triggers the tooltip disappearance. Default value is "mouseleave"</description>
            <name>hideEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Sets the horizontal offset between pop-up list and mouse pointer. Default value is "10"</description>
            <display-name>Horizontal Offset</display-name>
            <icon />
            <name>horizontalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>&lt;p&gt; Set the corner attachment point with which the popup should be connected. Possible values are:&lt;br /&gt; AA (auto), LT (topLeft), RT (topRight), LB (bottomLeft), RB (bottomRight, LA (autoLeft), RA (autoRight), AT (topAuto), AB (bottomAuto) &lt;/p&gt; &lt;p&gt; Default value is auto &lt;/p&gt;</description>
            <display-name>Joint Point</display-name>
            <icon />
            <name>jointPoint</name>
            <type>org.richfaces.component.Positioning</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Block/inline mode flag. Possible value are: "inline" or "block". Default value is "inline". Tooltip will contain div/span elements respectively.</description>
            <name>layout</name>
            <type>org.richfaces.TooltipLayout</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Controls the way of data loading to a tooltip. May have following values: "client" (default) and "ajax"</description>
            <name>mode</name>
            <type>org.richfaces.TooltipMode</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed before the popup disappears.</description>
            <name>onbeforehide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed before this component is shown.</description>
            <name>onbeforeshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed after the popup disappears.</description>
            <name>onhide</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side code executed after the popup is shown.</description>
            <name>onshow</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Delay in milliseconds before tooltip will be displayed. Default value is "0"</description>
            <name>showDelay</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Event that triggers the tooltip. Default value is "mouseenter"</description>
            <name>showEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Component ID of the target component or "null" if the component should be attached to the parent component.</description>
            <name>target</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The current value of this component.</description>
            <display-name>Value</display-name>
            <icon />
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Sets the vertical offset between pop-up list and mouse pointer. Default value is "10"</description>
            <display-name>Vertical Offset</display-name>
            <icon />
            <name>verticalOffset</name>
            <type>int</type>
        </attribute>
        <attribute>
            <description>Attribute is similar to the standard HTML attribute and can specify window placement relative to the content. Default value is "3".</description>
            <name>zindex</name>
            <type>int</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>tree</tag-name>
        <component>
            <description>&lt;p&gt;The &amp;lt;rich:tree&amp;gt; component provides a hierarchical tree control. Each &amp;lt;rich:tree&amp;gt; component typically consists of &amp;lt;rich:treeNode&amp;gt; child components. The appearance and behavior of the tree and its nodes can be fully customized.&lt;/p&gt; @author Nick Belaevski</description>
            <component-type>org.richfaces.Tree</component-type>
            <renderer-type>org.richfaces.TreeRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.TreeHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &amp;lt;rich:tree&amp;gt; component provides a hierarchical tree control. Each &amp;lt;rich:tree&amp;gt; component typically consists of &amp;lt;rich:treeNode&amp;gt; child components. The appearance and behavior of the tree and its nodes can be fully customized.&lt;/p&gt; @author Nick Belaevski</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "execute" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>execute</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree node handles.</description>
            <name>handleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree node icons.</description>
            <name>iconClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon for collapsed node</description>
            <name>iconCollapsed</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon for expanded node</description>
            <name>iconExpanded</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon for component leaves</description>
            <name>iconLeaf</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Boolean attribute that defines whether this iteration component will reset saved children's state before rendering. By default state is reset if there are no faces messages with severity error or higher</description>
            <name>keepSaved</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree node labels.</description>
            <name>labelClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>If "true", render only those ids specified in the "render" attribute, forgoing the render of the auto-rendered panels</description>
            <name>limitRender</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree nodes.</description>
            <name>nodeClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines which treeNode should be used for rendering. Should contain EL expressions which uses request-scoped variable with name defied in attribute 'var'.</description>
            <name>nodeType</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the node is toggled.</description>
            <name>onbeforenodetoggle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the selection is changed.</description>
            <name>onbeforeselectionchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the node is toggled.</description>
            <name>onnodetoggle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the selection is changed.</description>
            <name>onselectionchange</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Ids of components that will participate in the "render" portion of the Request Processing Lifecycle. Can be a single id, a space or comma separated list of Id's, or an EL Expression evaluating to an array or Collection. Any of the keywords "@this", "@form", "@all", "@none", "@region" may be specified in the identifier list. Some components make use of additional keywords</description>
            <name>render</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>Provides access to the row key in a Request scope</description>
            <name>rowKeyVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The collections of selected nodes.</description>
            <name>selection</name>
            <type>java.util.Collection</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing an tree node toggle listener method that will be notified when the tree node is toggled. The expression must evaluate to a public method that takes an TreeToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void. In the latter case, the method has no way of easily knowing where the event came from, but this can be useful in cases where a notification is needed that "some action happened".</description>
            <name>selectionChangeListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>The type of type of the selection - ajax (default), client, server.</description>
            <name>selectionType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Provides access to the state in a Request scope</description>
            <name>stateVar</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Method expression referencing a method that will be called when an TreeSelectionChangeEvent has been broadcast for the listener.</description>
            <name>toggleListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>Client-side event used for toggling tree nodes (click, dblclick, etc.)</description>
            <name>toggleNodeEvent</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The type of type of the node toggling - ajax (default), client, server.</description>
            <name>toggleType</name>
            <type>org.richfaces.component.SwitchType</type>
        </attribute>
        <attribute>
            <description>Points to the data model</description>
            <name>value</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>A request-scope attribute via which the data object for the current row will be used when iterating</description>
            <name>var</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>treeModelAdaptor</tag-name>
        <component>
            <description>The &lt;rich:treeModelAdaptor&gt; component takes an object which implements the Map or Iterable interfaces. It adds all the object entries to the parent node as child nodes. @author Nick Belaevski</description>
            <component-type>org.richfaces.TreeModelAdaptor</component-type>
            <handler-class>org.richfaces.view.facelets.TreeModelAdaptorHandler</handler-class>
        </component>
        <description>The &lt;rich:treeModelAdaptor&gt; component takes an object which implements the Map or Iterable interfaces. It adds all the object entries to the parent node as child nodes. @author Nick Belaevski</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines if tree node generated by model is leaf. Should contain EL expression which uses request-scoped variable with name defied in tree attribute 'var'.</description>
            <name>leaf</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>EL expression pointing to nodes which should tree model iterate over. Implementation of java.util.Map or java.util.List. When map is provided, map keys are used as keys for the model, otherwise, keys are generated. (In case of treeModelRecursiveAdaptor, nodes are defined recursively, starting with roots and continuing with inner nodes. EL expression should then use request-scoped variable with name defied in tree attribute 'var' to point to inner nodes recursively and return null or empty map/collection for leafs.)</description>
            <name>nodes</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>treeModelRecursiveAdaptor</tag-name>
        <component>
            <description>&lt;p&gt;The &lt;rich:treeModelRecursiveAdaptor&gt; component iterates through recursive collections in order to populate a tree with hierarchical nodes, such as for a file system with multiple levels of directories and files.&lt;/p&gt; @author Nick Belaevski</description>
            <component-type>org.richfaces.TreeModelRecursiveAdaptor</component-type>
            <handler-class>org.richfaces.view.facelets.TreeModelRecursiveAdaptorHandler</handler-class>
        </component>
        <description>&lt;p&gt;The &lt;rich:treeModelRecursiveAdaptor&gt; component iterates through recursive collections in order to populate a tree with hierarchical nodes, such as for a file system with multiple levels of directories and files.&lt;/p&gt; @author Nick Belaevski</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines if tree node generated by model is leaf. Should contain EL expression which uses request-scoped variable with name defied in tree attribute 'var'.</description>
            <name>leaf</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>EL expression pointing to nodes which should tree model iterate over. Implementation of java.util.Map or java.util.List. When map is provided, map keys are used as keys for the model, otherwise, keys are generated. (In case of treeModelRecursiveAdaptor, nodes are defined recursively, starting with roots and continuing with inner nodes. EL expression should then use request-scoped variable with name defied in tree attribute 'var' to point to inner nodes recursively and return null or empty map/collection for leafs.)</description>
            <name>nodes</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>EL expression pointing to top-level nodes (roots) which should tree model iterate over. Implementation of java.util.Map or java.util.List. When map is provided, map keys are used as keys for the model, otherwise, keys are generated.</description>
            <name>roots</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>Converter for a row key object</description>
            <name>rowKeyConverter</name>
            <type>javax.faces.convert.Converter</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>treeNode</tag-name>
        <component>
            <description>&lt;p&gt; The &lt;rich:treeNode&gt; component is a child component of the &lt;rich:tree&gt; component. It represents nodes in the parent tree. The appearance and functionality of each tree node can be customized. &lt;/p&gt; @author Nick Belaevski</description>
            <component-type>org.richfaces.TreeNode</component-type>
            <renderer-type>org.richfaces.TreeNodeRenderer</renderer-type>
            <handler-class>org.richfaces.view.facelets.TreeNodeHandler</handler-class>
        </component>
        <description>&lt;p&gt; The &lt;rich:treeNode&gt; component is a child component of the &lt;rich:tree&gt; component. It represents nodes in the parent tree. The appearance and functionality of each tree node can be customized. &lt;/p&gt; @author Nick Belaevski</description>
        <attribute>
            <description>The value binding expression used to wire up this component to a component property of a JavaBean class</description>
            <icon />
            <name>binding</name>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
        <attribute>
            <description>Direction indication for text that does not inherit directionality. Valid values are "LTR" (left-to-right) and "RTL" (right-to-left).</description>
            <display-name>Direction</display-name>
            <icon />
            <name>dir</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Determines if this tree node is expanded. When EL expression used, it should use request-scoped variable with name defied in tree attribute 'var' which points to current node.</description>
            <name>expanded</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree node handles.</description>
            <name>handleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree node icons.</description>
            <name>iconClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon for collapsed node</description>
            <name>iconCollapsed</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon for expanded node</description>
            <name>iconExpanded</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The icon for component leaves</description>
            <name>iconLeaf</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The component identifier for this component. This value must be unique within the closest parent component that is a naming container.</description>
            <display-name>Component Identifier</display-name>
            <icon />
            <name>id</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied to the tree node labels.</description>
            <name>labelClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Code describing the language used in the generated markup for this component.</description>
            <display-name>Language Code</display-name>
            <icon />
            <name>lang</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the node is toggle.</description>
            <name>onbeforetoggle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is clicked over this element.</description>
            <display-name>Button Click Script</display-name>
            <icon />
            <name>onclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is double clicked over this element.</description>
            <display-name>Double Click Script</display-name>
            <icon />
            <name>ondblclick</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed down over this element.</description>
            <display-name>Key Down Script</display-name>
            <icon />
            <name>onkeydown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is pressed and released over this element.</description>
            <display-name>Key Press Script</display-name>
            <icon />
            <name>onkeypress</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a key is released over this element.</description>
            <display-name>Key Up Script</display-name>
            <icon />
            <name>onkeyup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is pressed down over this element.</description>
            <display-name>Mouse Down Script</display-name>
            <icon />
            <name>onmousedown</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved within this element.</description>
            <display-name>Mouse Move Script</display-name>
            <icon />
            <name>onmousemove</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved away from this element.</description>
            <display-name>Mouse Out Script</display-name>
            <icon />
            <name>onmouseout</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is moved onto this element.</description>
            <display-name>Mouse Over Script</display-name>
            <icon />
            <name>onmouseover</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Javascript code executed when a pointer button is released over this element.</description>
            <display-name>Mouse Up Script</display-name>
            <icon />
            <name>onmouseup</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the node is toggle.</description>
            <name>ontoggle</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon />
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>CSS style(s) to be applied when this component is rendered.</description>
            <display-name>CSS Styles</display-name>
            <icon />
            <name>style</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space-separated list of CSS style class(es) to be applied when this element is rendered. This value must be passed through as the "class" attribute on generated markup.</description>
            <display-name>CSS Style Classes</display-name>
            <icon />
            <name>styleClass</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Advisory title information about markup elements generated for this component.</description>
            <display-name>Advisory Title</display-name>
            <icon />
            <name>title</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Method expression referencing a method that will be called when an TreeSelectionChangeEvent has been broadcast for the listener.</description>
            <name>toggleListener</name>
            <type>javax.el.MethodExpression</type>
        </attribute>
        <attribute>
            <description>The type of the this component. More treeNodes could be defined in tree with different types and it is decided about which is used for rendering by nodeType expression of tree component.</description>
            <name>type</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>treeSelectionChangeListener</tag-name>
        <description>Associates tree selection change listener with &lt;rich:tree&gt; component in order to listen for tree selection events on server-side.</description>
        <handler-class>org.richfaces.view.facelets.TreeSelectionChangeListenerHandler</handler-class>
        <attribute>
            <description>If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested.</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Value binding expression that evaluates to an object that implements TreeSelectionChangeListener.</description>
            <name>binding</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an TreeSelectionChangeEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void</description>
            <name>listener</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>Fully qualified Java class name of an TreeSelectionChangeListener to be created and registered.</description>
            <name>type</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>treeToggleListener</tag-name>
        <description>Associates tree toggle listener with &lt;rich:tree&gt; component in order to listen for tree toggling events on server-side.</description>
        <handler-class>org.richfaces.view.facelets.TreeToggleListenerHandler</handler-class>
        <attribute>
            <description>If present, this attribute refers to the value of one of the exposed attached objects within the composite component inside of which this tag is nested.</description>
            <name>for</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Value binding expression that evaluates to an object that implements TreeToggleListener.</description>
            <name>binding</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>MethodExpression representing an action listener method that will be notified when this component is activated by the user. The expression must evaluate to a public method that takes an TreeToggleEvent parameter, with a return type of void, or to a public method that takes no arguments with a return type of void</description>
            <name>listener</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
        <attribute>
            <description>Fully qualified Java class name of an TreeToggleListener to be created and registered.</description>
            <name>type</name>
            <type>javax.el.ValueExpression</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>validator</tag-name>
        <behavior>
            <description>&lt;p&gt;The &amp;lt;rich:validator&amp;gt; behavior adds client-side validation to a form input control based on registered server-side validators. It provides this validation without the need to reproduce the server-side annotations.&lt;/p&gt; &lt;p&gt;The &amp;lt;rich:validator&amp;gt; behavior triggers all client validator annotations listed in the relevant managed bean.&lt;/p&gt; @author asmirnov@exadel.com</description>
            <behavior-id>org.richfaces.behavior.ClientValidator</behavior-id>
            <handler-class>org.richfaces.view.facelets.html.ClientValidatorHandler</handler-class>
        </behavior>
        <description>&lt;p&gt;The &amp;lt;rich:validator&amp;gt; behavior adds client-side validation to a form input control based on registered server-side validators. It provides this validation without the need to reproduce the server-side annotations.&lt;/p&gt; &lt;p&gt;The &amp;lt;rich:validator&amp;gt; behavior triggers all client validator annotations listed in the relevant managed bean.&lt;/p&gt; @author asmirnov@exadel.com</description>
        <attribute>
            <description>Serialized (on default with JSON) data passed to the client by a developer on an AJAX request. It's accessible via "event.data" syntax. Both primitive types and complex types such as arrays and collections can be serialized and used with data</description>
            <name>data</name>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>If "true", do not initiate client-side validation</description>
            <name>disabled</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>Flag indicating that, if this component is activated by the user, notifications should be delivered to interested listeners and actions immediately (that is, during Apply Request Values phase) rather than waiting until Invoke Application phase.</description>
            <name>immediate</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the ajax response comes back, but before the DOM is updated</description>
            <name>onbeforedomupdate</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before the AJAX request is submitted</description>
            <name>onbeforesubmit</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called before an ajax request.</description>
            <name>onbegin</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called after the DOM is updated</description>
            <name>oncomplete</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>The client-side script method to be called when an error has occurred during Ajax communications</description>
            <name>onerror</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>oninvalid</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <name>onvalid</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Identify the name of the destination queue</description>
            <name>queueId</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Name of the request status component that will indicate the status of the Ajax request</description>
            <name>status</name>
            <type>java.lang.String</type>
        </attribute>
    </tag>
    <function>
        <description>The rich:clientId('id') function returns the client identifier related to the passed component identifier ('id'). If the specified component identifier is not found, null is returned instead.</description>
        <function-name>clientId</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>java.lang.String clientId(java.lang.String)</function-signature>
    </function>
    <function>
        <description>The rich:component('id') function is equivalent to the RichFaces.$('clientId') code. It returns the client object instance based on the passed server-side component identifier ('id'). If the specified component identifier is not found, null is returned instead. The function can be used to get an object from a component to call a JavaScript API function without using the &lt;rich:componentControl&gt; component.</description>
        <function-name>component</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>java.lang.String component(java.lang.String)</function-signature>
    </function>
    <function>
        <description>&lt;p&gt;The rich:element('id') function is a shortcut for the equivalent document.getElementById(#{rich:clientId('id')}) code. It returns the element from the client, based on the passed server-side component identifier. If the specified component identifier is not found, null is returned instead.&lt;/p&gt; &lt;p&gt;This function is for use in EL. Refer to the &amp;lt;rich:jQuery&amp;gt; component for access to the jQuery library as a facelet tag.&lt;/p&gt;</description>
        <function-name>element</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>java.lang.String element(java.lang.String)</function-signature>
    </function>
    <function>
        <description>The rich:findComponent('id') function returns the a UIComponent instance of the passed component identifier. If the specified component identifier is not found, null is returned instead.</description>
        <function-name>findComponent</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>javax.faces.component.UIComponent findComponent(java.lang.String)</function-signature>
    </function>
    <function>
        <description>&lt;p&gt; The rich:isUserInRole(Object) function checks whether the logged-in user belongs to a certain user role, such as being an administrator. User roles are defined in the web.xml settings file. &lt;/p&gt; @since 3.3.1</description>
        <function-name>isUserInRole</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>boolean isUserInRole(java.lang.Object)</function-signature>
    </function>
    <function>
        <description>The rich:jQuery('id') function is a shortcut for the equivalent jQuery(#{rich:element('id')}) code. It returns the jQuery object from the client, based on the passed server-side component identifier. If the specified component identifier is not found, empty jQuery object is returned instead.</description>
        <function-name>jQuery</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>java.lang.String jQuery(java.lang.String)</function-signature>
    </function>
    <function>
        <description>The rich:jQuerySelector('id') function will perform nearly the same function as rich:clientId('id') but will transform the resulting id into a jQuery id selector which means that it will add a "#" character at the beginning and escape all reserved characters in CSS selectors.</description>
        <function-name>jQuerySelector</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>java.lang.String jQuerySelector(java.lang.String)</function-signature>
    </function>
    <function>
        <description>Convert any Java Object to JavaScript representation, converting types properly, e.g.: &lt;ul&gt; &lt;li&gt;&lt;tt&gt;Java primitives&lt;/tt&gt;&lt;/li&gt; &lt;li&gt;&lt;tt&gt;Arrays: toScript(new int[] { 1, 2, 3 }) -&amp;gt; [1, 2, 3]&lt;/tt&gt;&lt;/li&gt; &lt;li&gt;&lt;tt&gt;Collections (sets, lists): toScript(Arrays.asList(new int[] { 1, 2, 3 })) -&amp;gt; [1, 2, 3]&lt;/tt&gt;&lt;/li&gt; &lt;li&gt;&lt;tt&gt;Maps: toScript((Map&amp;lt;String, String&amp;gt;)map) -&amp;gt; {\"a\":\"foo\",\"b\":\"bar\",\"c\":\"baz\"}&lt;/tt&gt;&lt;/li&gt; &lt;li&gt; &lt;tt&gt;Beans / Objects: toScript(new Bean[] { new Bean(1, true, "bar") }) -&amp;gt; [{\"bool\":true,\"foo\":\"bar\",\"integer\":1}]&lt;/tt&gt; &lt;/li&gt; &lt;li&gt;&lt;tt&gt;Dates and Timezones&lt;/tt&gt;&lt;/li&gt; &lt;li&gt;&lt;tt&gt;Combinations of above&lt;/tt&gt;&lt;/li&gt; &lt;/ul&gt; This function delegates to org.ajax4jsf.javascript.ScriptUtils#toScript(Object)</description>
        <function-name>toScript</function-name>
        <function-class>org.richfaces.function.RichFunction</function-class>
        <function-signature>java.lang.String toScript(java.lang.Object)</function-signature>
    </function>
</facelet-taglib>

