<?xml version="1.0" encoding="utf-8"?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
              version="2.0">
              
    <namespace>http://myfaces.apache.org/tomahawk</namespace>
    <composite-library-name>org.apache.myfaces.custom</composite-library-name>



    <!-- Component Tags -->
    <tag>
        <description><![CDATA[Extends standard commandButton by user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>commandButton</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCommandButton</component-type>
            <renderer-type>org.apache.myfaces.Button</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Comma separated list of subForm-ids for which validation 
 and model update should take place when this command is 
 executed. You need to wrap your input components in 
 org.apache.myfaces.custom.subform.SubForm instances for 
 this to work.]]></description>
           <name>actionFor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The URL of an image that renders in place of the button.]]></description>
           <name>image</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods
are fired instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard commandLink by user role support and the HTML 
target attribute. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>commandLink</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCommandLink</component-type>
            <renderer-type>org.apache.myfaces.Link</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Comma separated list of subForm-ids for which validation 
 and model update should take place when this command is 
 executed. You need to wrap your input components in 
 org.apache.myfaces.custom.subform.SubForm instances for 
 this to work.]]></description>
           <name>actionFor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the character encoding of the linked resource.]]></description>
           <name>charset</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The coordinates of regions within a client side image map.]]></description>
           <name>coords</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The language of the linked resource.]]></description>
           <name>hreflang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The relationship between the current document and
the linked resource.]]></description>
           <name>rel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The type(s) describing the reverse link for the linked
resource.]]></description>
           <name>rev</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The shape of a region in a client side image map.]]></description>
           <name>shape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Names the frame that should display content generated by invoking this action.]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods
are fired instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[The MyFacesDataTable extends the standard JSF DataTable by two
important features:
<br/>
<ul>
  <li>Possiblity to save the state of the DataModel.</li>

  <li>Support for clickable sort headers (see SortHeader
  component).</li>
</ul>
<br/>
Extended data_table that adds some additional features to the 
standard data_table action: see attribute descriptions for 
preserveDataModel, sortColumn, sortAscending and preserveSort. 
<br/>
Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>dataTable</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlDataTable</component-type>
            <renderer-type>org.apache.myfaces.Table</renderer-type>
            <handler-class>org.apache.myfaces.component.html.ext.HtmlDataTableTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[The index of the first row to be displayed, where 0 is the first row.]]></description>
           <name>first</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[The number of rows to be displayed. Specify zero for all remaining rows in the table.]]></description>
           <name>rows</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A formula that overrides the default row index in the 
construction of table's body components. 

Example : #{myRowVar.key} Warning, the EL should 
evaluate to a unique value for each row !]]></description>
           <name>forceIdIndexFormula</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Value reference to a model property that gives the current 
sort column name. The target String property is set to 
the "columnName" of whichever column has been chosen 
to sort by, and the method which is bound to the "value" 
attribute of this table (ie which provides the DataModel used) 
is expected to use this property to determine how to sort 
the DataModel's contents.]]></description>
           <name>sortColumn</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Value reference to a model property that gives the current 
sort direction. The target Boolean property is set to true 
when the selected sortColumn should be sorted in ascending 
order, and false otherwise. The method which is bound to 
the "value" attribute of this table (ie which provides the 
DataModel used) is expected to use this property to 
determine how to sort the DataModel's contents.]]></description>
           <name>sortAscending</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Define if the table is sortable or not]]></description>
           <name>sortable</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Avoids rendering the html table tags, thus, giving you a 
table rendering just rows. You can use this together 
with the detailStamp faces of the parent datatable 
to render child-tables using the same layout as the parent. 

Notice: You have to ensure both tables do have the same 
number of columns. Using the colspan attribute of the 
column tag might help alot.]]></description>
           <name>embedded</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[true|false - true if the detailStamp should be expanded by default. default: false]]></description>
           <name>detailStampExpandedDefault</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[before|after - where to render the detailStamp, before the 
actual row or after it. default: after]]></description>
           <name>detailStampLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onmouseover event handler for each table row]]></description>
           <name>rowOnMouseOver</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onmouseout event handler for each table row]]></description>
           <name>rowOnMouseOut</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onclick event handler for each table row]]></description>
           <name>rowOnClick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript ondblclick event handler for each table row]]></description>
           <name>rowOnDblClick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onkeydown event handler for each table row]]></description>
           <name>rowOnKeyDown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onkeypress event handler for each table row]]></description>
           <name>rowOnKeyPress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onkeyup event handler for each table row]]></description>
           <name>rowOnKeyUp</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML class attribute for the row tr tag.]]></description>
           <name>rowStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML style attribute for the row tr tag.]]></description>
           <name>rowStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onmpusedown event handler for each table row]]></description>
           <name>rowOnMouseDown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onmousemove event handler for each table row]]></description>
           <name>rowOnMouseMove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines a JavaScript onmouseup event handler for each table row]]></description>
           <name>rowOnMouseUp</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This variable has the boolean property "currentdetailExpanded" 
 which is true if the current detail row is expanded and the 
 action method "toggleDetail" which expand/collapse the current 
 detail row.]]></description>
           <name>varDetailToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML style attribute for grouped rows.]]></description>
           <name>rowGroupStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[StyleClass for grouped rows.]]></description>
           <name>rowGroupStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML style attribute for the table body tag]]></description>
           <name>bodyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML class attribute for the table body tag.]]></description>
           <name>bodyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The number of columns to wrap the table over. Default: 1

Set the number of columns the table will be divided over.]]></description>
           <name>newspaperColumns</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[The orientation of the newspaper columns in the newspaper 
table - "horizontal" or "vertical". Default: vertical]]></description>
           <name>newspaperOrientation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state of the whole DataModel should 
be saved and restored. When set to false, the value-binding 
for the "value" attribute of this table is executed each 
time the page is rendered. When set to true, that 
value-binding is only executed when the component is first 
created, and the DataModel state is thereafter saved/restored 
automatically by the component. When column sorting is 
used for a table this property needs to be false so that 
the DataModel can be updated to reflect any changes in the 
sort criteria. Default: false]]></description>
           <name>preserveDataModel</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state of the sortColumn and sortAscending 
attribute should be saved and restored and written back to the 
model during the update model phase. Default: true]]></description>
           <name>preserveSort</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether this table should be rendered if the 
underlying DataModel is empty. You could as well use 
rendered="#{not empty bean.list}", but this one causes 
the getList method of your model bean beeing called up 
to five times per request, which is not optimal when 
the list is backed by a DB table. Using 
renderedIfEmpty="false" solves this problem, because 
the MyFaces extended HtmlDataTable automatically caches 
the DataModel and calles the model getter only once 
per request. Default: true]]></description>
           <name>renderedIfEmpty</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the current rowIndex is set 
in request scope similar to the var parameter.]]></description>
           <name>rowIndexVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the rowCount is set in 
request scope similar to the var parameter.]]></description>
           <name>rowCountVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the previous RowData Object 
is set in request scope similar to the rowIndexVar and 
rowCountVar parameters. Mind that the value of this 
request scope attribute is null in the first row or 
when isRowAvailable returns false for the previous row.]]></description>
           <name>previousRowDataVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the a boolean is set in request 
scope similar to the var parameter. TRUE for the column that 
is currently sorted, FALSE otherwise.]]></description>
           <name>sortedColumnVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. 
Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The id to use for]]></description>
           <name>rowId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicate the expected type of the EL expression pointed
by value property. It is useful when vb.getType() cannot
found the type, like when a map value is resolved on 
the expression.]]></description>
           <name>valueType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicate if "row" can be a target for an ajax render
operation. In other words, if it is set to true,
a special component is added on a facet with name "row"
and with id="row" that can be used as a target 
for f:ajax or similar components to render the row.
By default is set to false.]]></description>
           <name>ajaxRowRender</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicate if the "body" can be a target for an ajax render
operation. In other words, if it is set to true,
a special component is added on a facet with name "tbody_element"
and with id="tbody_element" that can be used as a target 
for f:ajax or similar components to render the body.
By default is set to false.]]></description>
           <name>ajaxBodyRender</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for each row should not be 
discarded before the datatable is rendered again. 

Setting this to true might be hepful if an input 
component inside the datatable has no valuebinding and 
the value entered in there should be displayed again.
 
This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>preserveRowStates</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for a component in each row should not be 
discarded before the datatable is rendered again.

In tomahawk, this property is the same as t:dataTable preserveRowComponentState

This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>rowStatePreserved</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
(where 'n' is the row index) to components that are 
contained within a "list." This value will be true by 
default and the value will be ignored if the value of 
forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for a component in each row should not be 
discarded before the datatable is rendered again.

This property is similar to tomahawk t:dataTable preserveRowStates

This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>preserveRowComponentState</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Used to assign a value expression that identify in a unique way a row. This value
will be used later instead of rowIndex as a key to be appended to the container 
client id using getDerivedSubClientId() method.]]></description>
           <name>rowKey</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute is used to append an unique prefix when rowKey is not used, to prevent
a key match a existing component id (note two different components can't have the
same unique id).]]></description>
           <name>derivedRowKeyPrefix</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSV of several row index to start (and end a previous) tbody element]]></description>
           <name>bodyrows</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each column.]]></description>
           <name>columnClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to footer cells.]]></description>
           <name>footerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to header cells.]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each row.]]></description>
           <name>rowClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to all captions.
If there are less classes than the number of rows, apply the same
sequence of classes to the remaining captions, so the pattern is repeated.
More than one class can be applied to a row by separating the classes
with a space.]]></description>
           <name>captionClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The CSS class to be applied to the Caption.]]></description>
           <name>captionStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An EL expression that specifies the data model that backs this table.
<p>
The value referenced by the EL expression can be of any type.
</p>
<ul>
<li>A value of type DataModel is used directly.</li>
<li>Array-like parameters of type array-of-Object, java.util.List, java.sql.ResultSet or
javax.servlet.jsp.jstl.sql.Result are wrapped in a corresponding DataModel that knows how to iterate over the
elements.</li>
<li>Other values are wrapped in a DataModel as a single row.</li>
</ul>
<p>
Note in particular that unordered collections, eg Set are not supported. Therefore if the value expression
references such an object then the table will be considered to contain just one element - the collection itself.
</p>]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the name of the request-scope variable that will hold the current row during iteration.
<p>
During rendering of child components of this UIData, the variable with this name can be read to learn what the
"rowData" object for the row currently being rendered is.
</p>
<p>
This value must be a static value, ie an EL expression is not permitted.
</p>]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard graphicImage. Unless otherwise specified, 
all attributes accept static values or EL expressions.]]></description>
        <tag-name>graphicImage</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlGraphicImage</component-type>
            <renderer-type>org.apache.myfaces.Image</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels. Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The amount of white space to be inserted to the left and right of this element, in undefined units. Deprecated in HTML 4.01.]]></description>
           <name>hspace</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The amount of white space to be inserted above and below this element, in undefined units. Deprecated in HTML 4.01.]]></description>
           <name>vspace</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Overrides the natural height of this image, by specifying height in pixels.]]></description>
           <name>height</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies server-side image map handling for this image.]]></description>
           <name>ismap</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A link to a long description of the image.]]></description>
           <name>longdesc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies an image map to use with this image.]]></description>
           <name>usemap</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Overrides the natural width of this image, by specifying width in pixels.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>library</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>name</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alias for the "value" attribute.]]></description>
           <name>url</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The URL of the image.
<p>
If the URL starts with a '/', it is relative to the context path of the web application.
</p>]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extended version of {@link javax.faces.component.html.HtmlInputHidden} 
that provides additional MyFaces functionality.]]></description>
        <tag-name>inputHidden</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputHidden</component-type>
            <renderer-type>org.apache.myfaces.Hidden</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard inputSecret, adding the "redisplay" property. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>inputSecret</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputSecret</component-type>
            <renderer-type>org.apache.myfaces.Secret</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The maximum number of characters allowed to be entered.]]></description>
           <name>maxlength</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, the value will be re-sent (in plaintext) when the form
is rerendered (see JSF.7.4.4). Default is false.]]></description>
           <name>redisplay</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The initial width of this control, in characters.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the value of this attribute is "off", render "off" as the value of the attribute.
This indicates that the browser should disable its autocomplete feature for this component.
This is useful for components that perform autocompletion and do not want the browser interfering.
If this attribute is not set or the value is "on", render nothing.]]></description>
           <name>autocomplete</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard inputText by user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>inputText</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputText</component-type>
            <renderer-type>org.apache.myfaces.Text</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true the input is rendered disabled on the client side and 
 a hidden input is used to actualy submit his value back to 
 the server.]]></description>
           <name>disabledOnClientSide</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Non HTML standard attribute to disable browser's autocomplete function.]]></description>
           <name>autocomplete</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The maximum number of characters allowed to be entered.]]></description>
           <name>maxlength</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The initial width of this control, in characters.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard inputTextarea by user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>inputTextarea</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputTextarea</component-type>
            <renderer-type>org.apache.myfaces.Textarea</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[None standard HTML attribute. 

Possible values are: soft, hard, virtual, physical and off.]]></description>
           <name>wrap</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The width of this element, in characters.]]></description>
           <name>cols</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The height of this element, in characters.]]></description>
           <name>rows</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[MyFaces extension to the standard messages tag: see summaryDetailSeparator attribute. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>message</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlMessage</component-type>
            <renderer-type>org.apache.myfaces.Message</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If present, instead of rendering the message summary, 
 a MessageFormat with this attribute as pattern is created. 
 
 The format method of this MessageFormat is called with the 
 message summary as the first argument and the label of the 
 associated component (if any) as the second argument. 
 
 Example: "{0}:"]]></description>
           <name>summaryFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If present, instead of rendering the message detail, 
a MessageFormat with this attribute as pattern is created. 

The format method of this MessageFormat is called with the 
message detail as the first argument and the label of the 
associated component (if any) as the second argument. 

Example: "The input in field {1} is wrong: {0}"]]></description>
           <name>detailFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If present, all occurrences of the id of the component for 
 which the message is rendered will be replaced by the label. 
 
 Default: true.]]></description>
           <name>replaceIdWithLabel</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If set to true, an empty span element is rendered. 
Useful if there is an inputAjax field and the corresponding 
error message is displayed there.]]></description>
           <name>forceSpan</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "ERROR".]]></description>
           <name>errorClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "ERROR".]]></description>
           <name>errorStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "FATAL".]]></description>
           <name>fatalClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "FATAL".]]></description>
           <name>fatalStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "INFO".]]></description>
           <name>infoClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "INFO".]]></description>
           <name>infoStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, the message summary will be rendered as a tooltip (i.e. HTML title attribute).]]></description>
           <name>tooltip</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "WARN".]]></description>
           <name>warnClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "WARN".]]></description>
           <name>warnStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The ID of the component whose attached FacesMessage object (if present) 
should be diplayed by this component.
<p>
This is a required property on the component.
</p>]]></description>
           <name>for</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies whether the detailed information from the message should be shown. 
Default to true.]]></description>
           <name>showDetail</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies whether the summary information from the message should be shown.
Defaults to false.]]></description>
           <name>showSummary</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[MyFaces extension to the standard messages tag: see showInputLabel attribute.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>messages</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlMessages</component-type>
            <renderer-type>org.apache.myfaces.Messages</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Like summaryFormat, but applies to global messages 
 (i.e. messages not associated with a component). If no 
 globalSummaryFormat is given, the summaryFormat is used 
 for global messages. Example: "{0}:"]]></description>
           <name>globalSummaryFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If present, instead of rendering the message summary, 
 a MessageFormat with this attribute as pattern is created. 
 
 The format method of this MessageFormat is called with the 
 message summary as the first argument and the label of the 
 associated component (if any) as the second argument. 
 
 Example: "{0}:"]]></description>
           <name>summaryFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If present, instead of rendering the message detail, 
a MessageFormat with this attribute as pattern is created. 

The format method of this MessageFormat is called with the 
message detail as the first argument and the label of the 
associated component (if any) as the second argument. 

Example: "The input in field {1} is wrong: {0}"]]></description>
           <name>detailFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If present, all occurrences of the id of the component for 
 which the message is rendered will be replaced by the label. 
 
 Default: true.]]></description>
           <name>replaceIdWithLabel</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If set to true, an empty span element is rendered. 
Useful if there is an inputAjax field and the corresponding 
error message is displayed there.]]></description>
           <name>forceSpan</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The layout: "table" or "list". Default: list]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "ERROR".]]></description>
           <name>errorClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "ERROR".]]></description>
           <name>errorStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "FATAL".]]></description>
           <name>fatalClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "FATAL".]]></description>
           <name>fatalStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "INFO".]]></description>
           <name>infoClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "INFO".]]></description>
           <name>infoStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, the message summary will be rendered as a tooltip (i.e. HTML title attribute).]]></description>
           <name>tooltip</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for messages with severity "WARN".]]></description>
           <name>warnClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be used for messages with severity "WARN".]]></description>
           <name>warnStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies whether only messages (FacesMessage objects) not associated with a
specific component should be displayed, ie whether messages should be ignored
if they are attached to a particular component. Defaults to false.]]></description>
           <name>globalOnly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies whether the detailed information from the message should be shown. 
Default to false.]]></description>
           <name>showDetail</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies whether the summary information from the message should be shown.
Defaults to true.]]></description>
           <name>showSummary</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The ID of the component whose attached FacesMessage object (if present) 
should be diplayed by this component. It takes precedence over globalOnly.]]></description>
           <name>for</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard outputLabel with user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>outputLabel</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlOutputLabel</component-type>
            <renderer-type>javax.faces.Label</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The client ID of the target input element of this label.]]></description>
           <name>for</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped.
Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard outputText with user role support.
 
Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>outputText</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlOutputText</component-type>
            <renderer-type>org.apache.myfaces.Text</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped.
Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard panelGrid with user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>panelGrid</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelGrid</component-type>
            <renderer-type>org.apache.myfaces.Grid</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSV of several row index to start (and end a previous) tbody element]]></description>
           <name>bodyrows</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each column.]]></description>
           <name>columnClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the number of columns in the grid.]]></description>
           <name>columns</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to footer cells.]]></description>
           <name>footerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to header cells.]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each row.]]></description>
           <name>rowClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to all captions.
If there are less classes than the number of rows, apply the same
sequence of classes to the remaining captions, so the pattern is repeated.
More than one class can be applied to a row by separating the classes
with a space.]]></description>
           <name>captionClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The CSS class to be applied to the Caption.]]></description>
           <name>captionStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard panelGroup with user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>panelGroup</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelGroup</component-type>
            <renderer-type>org.apache.myfaces.Group</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Determines the type of layout that is used when rendering a 
panelGroup: when 'block' is specified, an HTML div is rendered 
instead of the default HTML span.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[standard html colspan attribute for table cell]]></description>
           <name>colspan</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard selectBooleanCheckbox with user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectBooleanCheckbox</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectBooleanCheckbox</component-type>
            <renderer-type>org.apache.myfaces.Checkbox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a 
browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard selectManyCheckbox with user role support and
a valueType attribute. 

Additionally this extended selectManyCheckbox accepts a layout 
attribute of value "spread" (see custom checkbox tag).
 
Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectManyCheckbox</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectManyCheckbox</component-type>
            <renderer-type>org.apache.myfaces.Checkbox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[A integer representing the number of checkbox rows if the 
layout is lineDirection and checkbox columns if the layout 
is pageDirection.]]></description>
           <name>layoutWidth</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the value type of the selectable items. This attribute is
similar to the collectionType attribute introduced in JSF 2.0. 
It can be used to declare the type of the selectable items when using
a Collection to store the values in the managed bean, because it is 
not possible in Java to get the value type of a type-safe Collection
(in contrast to arrays where this is possible).]]></description>
           <name>valueType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a 
browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Controls the layout direction of the child elements.  Values include:  
lineDirection (vertical) and pageDirection (horzontal).]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be applied to selected items]]></description>
           <name>selectedClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be applied to unselected items]]></description>
           <name>unselectedClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>collectionType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard selectManyListbox with user role support and
a valueType attribute.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectManyListbox</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectManyListbox</component-type>
            <renderer-type>org.apache.myfaces.Listbox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Specifies the value type of the selectable items. This attribute is
similar to the collectionType attribute introduced in JSF 2.0. 
It can be used to declare the type of the selectable items when using
a Collection to store the values in the managed bean, because it is 
not possible in Java to get the value type of a type-safe Collection
(in contrast to arrays where this is possible).]]></description>
           <name>valueType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[see JSF Spec.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>collectionType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard selectManyMenu with user role support and
a valueType attribute.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectManyMenu</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectManyMenu</component-type>
            <renderer-type>org.apache.myfaces.Menu</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Specifies the value type of the selectable items. This attribute is
similar to the collectionType attribute introduced in JSF 2.0. 
It can be used to declare the type of the selectable items when using
a Collection to store the values in the managed bean, because it is 
not possible in Java to get the value type of a type-safe Collection
(in contrast to arrays where this is possible).]]></description>
           <name>valueType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>collectionType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard selectOneListbox with user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectOneListbox</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectOneListbox</component-type>
            <renderer-type>org.apache.myfaces.Listbox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[see JSF Spec.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard selectOneMenu with user role support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectOneMenu</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectOneMenu</component-type>
            <renderer-type>org.apache.myfaces.Menu</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Implements the standard html selectOneRadio tag, with additional features. 

Supports user roles. Supports the "spread" layout value, which 
gives developer control over radio button positioning. 
See the "layout" attribute and the "radio" tag for further 
information. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectOneRadio</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectOneRadio</component-type>
            <renderer-type>org.apache.myfaces.Radio</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a 
browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Width in pixels of the border to be drawn around the table containing the options list.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Orientation of the options list. Valid values are 
"pageDirection" for a vertical layout, or "lineDirection" for
horizontal. The default value is "lineDirection".]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[The aliasBean tag allows you to create a temporary name for a real bean.
The temporary name exists (is visible) only to the children of the aliasBean.
<p>
One use of this feature is to pass "parameters" from an including page to an
included one. The included page can use any name it desires for beans it needs to
reference, and the including page can then use aliasBean to make those names
refer to the beans it wishes to "pass" as parameters.
</p>
<p>
Suppose you have a block of components you use often but with different beans. You
can create a separate JSP page (or equivalent) containing these beans, where the
value-bindings refer to some fictive bean name. Document these names as the required
"parameters" for this JSP page. Wherever you wish to use this block you then declare
an alias component mapping each of these "parameters" to whatever beans (or literal
values) you really want to apply the block to, then use jsp:include (or equivalent)
to include the reusable block of components.
</p>
<p>
Note, however, that AliasBean does not work for component bindings; JSF1.1
just has no mechanism available to set up the alias during the "restore view"
phase while the bindings of its children are being re-established, and then
remove the alias after the child bindings are done.
</p>
<p>
As a special case, if this component's direct parent is an AliasBeansScope
then the alias (temporary name) is active until the end of the parent
component, rather than the end of this component.
</p>]]></description>
        <tag-name>aliasBean</tag-name>
        <component>
            <component-type>org.apache.myfaces.AliasBean</component-type>
            <handler-class>org.apache.myfaces.custom.aliasbean.AliasBeanTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[Define the "fictive" name which will be visible to the children
of this component as an alias to the "real" object specified
by the value attribute of this component.]]></description>
           <name>alias</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The existing value that the alias can be set to. This can be 
a literal string (like "toto") or a reference to an existing 
bean (like "#{myBean.member1}").]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Holds several aliases that are configured by aliasBean tags.
<p>
The aliasBean tag must enclose all the components that are within the scope
of the alias. When multiple aliasas are defined, this makes the page structure
very clumsy; for example defining 5 aliases means the content must be nested
5 indentation levels deep. This tag instead allows the content block to be
wrapped in just one AliasBeansScope tag, and then have AliasBean tags with
empty bodies added as direct children of this component. The scope of the AliasBean
tag still starts when the tag begins, but instead of ending when the tag ends
the scope of the nested AliasBean tags extends to the end of this component.
</p>]]></description>
        <tag-name>aliasBeansScope</tag-name>
        <component>
            <component-type>org.apache.myfaces.AliasBeansScope</component-type>
            <handler-class>org.apache.myfaces.custom.aliasbean.AliasBeansScopeTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A component that renders its child components into an in-memory buffer rather than
render them directly to the response stream.
<p>
Property "into" is an EL expression that specifies where to store a String holding
the results of rendering all the children of this component; this is assigned to
after rendering of this component (and its children) is complete.
</p>
<p>
Typically, an h:output tag is then used later in the same page to output the buffer
contents.
</p>
<p>
This can be useful with JSF1.1/JSP2.0 to work around the well-known problem where
on first render of a page, a component "A" cannot reference a component "B" which is
defined later in the page because it has not yet been created. A solution is to define
"B" before "A", but wrapped in a Buffer component. Component A can then be rendered
and successfully reference "B" because it now exists. And later in the page, the buffer
contents can then be output, preserving the original layout.
</p>
<p>
This can also be useful when rendering the same data block multiple times within a page.
For example, a datatable can be rendered with a datascroller both before and after it;
first render the table into a buffer B1, then render the datascroller into a buffer B2,
then output buffers B2,B1,B2.
</p>]]></description>
        <tag-name>buffer</tag-name>
        <component>
            <component-type>org.apache.myfaces.Buffer</component-type>
            <renderer-type>org.apache.myfaces.Buffer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[An EL expression that specifies where to store a String holding 
the results of rendering all the children of this component; 
this is assigned to after rendering of this component (and its 
children) is complete.]]></description>
           <name>into</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[<p>
 Provides a calendar. The calendar can be "inline", or a button can be rendered
 that displays the calendar in a "popup window" when clicked. Javascript is
 required for the popup window.
 </p>
 <p>
 The two forms of calendar are unfortunately not well integrated; this component is
 effectively two components that happen to use the same component class. Some
 attributes on the component are applicable only to the inline form while others
 are applicable only to the popup form.
 </p>
 <p>
 The appearance of the inline calendar can be controlled via attributes
 such as currentDayCellClass, dayCellClass, weekRowClass, monthYearRowClass. 
 Attributes "styleLocation", "javascriptLocation", "imageLocation" and all
 attributes starting with "popup" have no effect on an inline calendar.
 </p>
 <ul>
 <p>
 The appearance of the popup calendar can be controlled via attributes
 popupTheme, styleLocation, javascriptLocation and imageLocation:
 </p>
   <li>popupTheme: When styleLocation is not overridden then this selects one of the
   built-in themes ("WH" or "DB"); the default is "DB". This also selects the prefix
used for the names of style classes attached to generated dom elements; all style
names are of form "jscalendar-{popupTheme}-*".  
</li>
<li>styleLocation: specifies the URL of a directory in which a "theme.css" file exists.
 A reference to this theme.css file will automatically be output. Specifying "none" as the
 location prevents the generation of this stylesheet reference; it is assumed that the
 necessary style rules will be loaded via some other mechanism. Defaults to a reference
 to a location within the tomahawk jarfile which varies based on popupTheme.</li>
<li>javascriptLocation: specifies the URL of a directory in which all the necessary script
  files can be found. A reference to scripts "prototype.js", "date.js" and "popcalendar.js"
  will automatically be output. Specifying "none" prevents generation of these references;
      it is assumed that the necessary javascript functions will be loaded via some other
      mechanism. Defaults to a reference to a location within the tomahawk jarfile.</li>
   <li>imageLocation: specifies the URL of a directory in which all the necessary icons are
      defined. Defaults to a reference to a location within the tomahawk jarfile which
      varies depending on popupTheme.</li>
 </ul>
 Other styling attributes (eg dayCellClass, weekRowClass) are ignored for the popup calendar.
 <p>
 Unless otherwise specified, all attributes accept static values or EL expressions.
 </p>]]></description>
        <tag-name>inputCalendar</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputCalendar</component-type>
            <renderer-type>org.apache.myfaces.Calendar</renderer-type>
            <handler-class>org.apache.myfaces.custom.calendar.HtmlInputCalendarTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[Indicate an object used as a bridge between the java.util.Date instance
used by this component internally and the value object used on the bean,
referred as a "business" value.

<ul>
<li>If the value is literal, look for the mentioned class instance, 
create a new instance and assign to the component property.</li>
<li>If it the value a EL Expression, set the expression to the 
component property.</li>
</ul>]]></description>
           <name>dateBusinessConverter</name>
           <type>org.apache.myfaces.custom.calendar.DateBusinessConverter</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used on the TR element for the header-row showing month and year.]]></description>
           <name>monthYearRowClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used on the TR element for the header-row showing the week-days.]]></description>
           <name>weekRowClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the TD element containing a day days.]]></description>
           <name>dayCellClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the TD element of the currently selected date.]]></description>
           <name>currentDayCellClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Render the input-calendar left of the button, not right like normally done.]]></description>
           <name>popupLeft</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Render the input-calendar as a java-script popup on client.]]></description>
           <name>renderAsPopup</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Automatically add the input-calendar scripts and css files to 
the header - set that to false to provide the scripts yourself.]]></description>
           <name>addResources</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the string displayed on the button which leads to 
the calendar-popup-window (... by default).]]></description>
           <name>popupButtonString</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the css style for the button which leads to the 
calendar-popup-window.]]></description>
           <name>popupButtonStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the css style class for the button which leads to the 
calendar-popup-window.]]></description>
           <name>popupButtonStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders a calendar icon instead of the button to pop up the calendar.]]></description>
           <name>renderPopupButtonAsImage</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the date format used by the java-script popup on client.]]></description>
           <name>popupDateFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for "Go To Current Month"]]></description>
           <name>popupGotoString</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for "Today is"]]></description>
           <name>popupTodayString</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the date format used by the java-script popup 
on client for the today-is string.]]></description>
           <name>popupTodayDateFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for "Wk"]]></description>
           <name>popupWeekString</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for scrolling to the left.]]></description>
           <name>popupScrollLeftMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for scrolling to the right.]]></description>
           <name>popupScrollRightMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for "Click to select a month".]]></description>
           <name>popupSelectMonthMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for "Click to select a year".]]></description>
           <name>popupSelectYearMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the string for "Select [date] as date" (do not 
replace [date], it will be replaced by the current date).]]></description>
           <name>popupSelectDateMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Set the theme-prefix for this component.]]></description>
           <name>popupTheme</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Url to the image for this popupButton.]]></description>
           <name>popupButtonImageUrl</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text that will be rendered in the field - helping the 
user to find the right format to enter into the field.]]></description>
           <name>helpText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[<p>
May be "day", "week", "month" or "none":
<ul>
<li>day (default): allow the user to select a day.</li>
<li>week: only allow the user to select a week.</li>
<li>month: only allow the user to select a month.</li> 
<li>none: equivalent to "readonly".</li> 
</ul>
</p>]]></description>
           <name>popupSelectMode</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true the input is rendered disabled on the client side and 
 a hidden input is used to actualy submit his value back to 
 the server.]]></description>
           <name>disabledOnClientSide</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Non HTML standard attribute to disable browser's autocomplete function.]]></description>
           <name>autocomplete</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The maximum number of characters allowed to be entered.]]></description>
           <name>maxlength</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The initial width of this control, in characters.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[]]></description>
        <tag-name>captcha</tag-name>
        <component>
            <component-type>org.apache.myfaces.CAPTCHA</component-type>
            <renderer-type>org.apache.myfaces.CAPTCHA</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Determines the CAPTCHA session key name. If
org.apache.myfaces.tomahawk.PREFIX_CAPTCHA_SESSION_KEY is set to true (default),
a prefix defined by the component is added to this key name.]]></description>
           <name>captchaSessionKeyName</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Integer to indicate the CAPTCHA width. default is 290.]]></description>
           <name>imageWidth</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Integer to indicate the CAPTCHA height. default is 81.]]></description>
           <name>imageHeight</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a HTML input of type "checkbox". 
The associated SelectItem comes from an extended selectManyCheckbox 
component with layout "spread". The selectManyCheckbox is 
referenced by the "for" attribute.

All HTML pass-through attributes for this input 
are taken from the associated selectManyCheckbox. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>checkbox</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCheckbox</component-type>
            <renderer-type>org.apache.myfaces.Checkbox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[id of the referenced extended selectManyCheckbox component]]></description>
           <name>for</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[n-th SelectItem of referenced UISelectMany starting with 0.]]></description>
           <name>index</name>
           <required>true</required>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A component which just renders as a single icon (with optional label) when "collapsed", hiding all child components. 

When open, the child components can be seen.

The title attribute defines the label shown for the collapsible panel.]]></description>
        <tag-name>collapsiblePanel</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCollapsiblePanel</component-type>
            <renderer-type>org.apache.myfaces.CollapsiblePanel</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The variable which you can use to check for the collapsed 
state of the enclosing component. This is especially useful 
for custom headers you define in a facet with name 'header'.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This variable is defined to hold the value of the title 
component - you can use it for accessing this value in 
custom headers you define in a facet with name 'header'.]]></description>
           <name>titleVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute for the generated indicator span.
This attribute is ignored if a custom "header" facet is provided
for the collapsible panel]]></description>
           <name>indicatorStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions for the generated indicator. 
This attribute is ignored if a custom "header" facet is provided
for the collapsible panel]]></description>
           <name>indicatorStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute for the generated title.
This attribute is ignored if a custom "header" facet is provided
for the collapsible panel]]></description>
           <name>titleStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions for the generated title. 
This attribute is ignored if a custom "header" facet is provided
for the collapsible panel]]></description>
           <name>titleStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Link used to collapse or expand a t:collapsiblePanel. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>headerLink</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlHeaderLink</component-type>
            <renderer-type>org.apache.myfaces.HeaderLink</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Comma separated list of subForm-ids for which validation 
 and model update should take place when this command is 
 executed. You need to wrap your input components in 
 org.apache.myfaces.custom.subform.SubForm instances for 
 this to work.]]></description>
           <name>actionFor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the character encoding of the linked resource.]]></description>
           <name>charset</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The coordinates of regions within a client side image map.]]></description>
           <name>coords</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The language of the linked resource.]]></description>
           <name>hreflang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The relationship between the current document and
the linked resource.]]></description>
           <name>rel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The type(s) describing the reverse link for the linked
resource.]]></description>
           <name>rev</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The shape of a region in a client side image map.]]></description>
           <name>shape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Names the frame that should display content generated by invoking this action.]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods
are fired instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A tag that extend h:column to provide HTML passthrough attributes. 
Tag t:column can be used instead of h:column in a t:datatable. 
It provides HTML passthrough attributes for header (th), footer 
(td) and row cells (td). Unless otherwise specified, all 
attributes accept static values or EL expressions.]]></description>
        <tag-name>column</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlColumn</component-type>
        </component>
        <attribute>
           <description><![CDATA[This attribute tells the datatable to group by data in this column]]></description>
           <name>groupBy</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Optional - Allows you configure where to get the value to 
 check for the group change condition. Default: all children 
 of the column cell will be checked]]></description>
           <name>groupByValue</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute tells the datatable to make this column the 
default sorted, when sortable=true]]></description>
           <name>defaultSorted</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute makes this column automaticaly sortable 
by a row object's property]]></description>
           <name>sortable</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute tells row object's property by which 
 sorting will be performed on this column]]></description>
           <name>sortPropertyName</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerdir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerlang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerstyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML class attribute.]]></description>
           <name>footerstyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footertitle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerdir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerlang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerstyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML class attribute.]]></description>
           <name>headerstyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headertitle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' 
(left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element. Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element. Often used by 
 the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute can be used to set the width of the elements.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute specifies the colspan attribute for the cell]]></description>
           <name>colspan</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headercolspan</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footercolspan</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The columnId which will be used as id for the column header. 
Notice: As the rowId on t:datatable this will not add 
any namespace to the id. The id will be rendered exactly 
as you provide it.]]></description>
           <name>columnId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[The tag allows dynamic columns in a datatable. 

The UIColumns component is used below a t:datatable to create a 
dynamic count of columns. It is used like a UIData component 
which iterates through a datamodel to create the columns. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>columns</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlColumns</component-type>
        </component>
        <attribute>
           <description><![CDATA[This attribute tells the datatable to group by data in this column]]></description>
           <name>groupBy</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Optional - Allows you configure where to get the value to 
 check for the group change condition. Default: all children 
 of the column cell will be checked]]></description>
           <name>groupByValue</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute tells the datatable to make this column the 
default sorted, when sortable=true]]></description>
           <name>defaultSorted</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute makes this column automaticaly sortable 
by a row object's property]]></description>
           <name>sortable</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute tells row object's property by which 
 sorting will be performed on this column]]></description>
           <name>sortPropertyName</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerdir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerlang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footeronmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerstyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML class attribute.]]></description>
           <name>footerstyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footertitle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerdir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerlang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headeronmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerstyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Corresponds to the HTML class attribute.]]></description>
           <name>headerstyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headertitle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' 
(left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element. Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element. Often used by 
 the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute can be used to set the width of the elements.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute specifies the colspan attribute for the cell]]></description>
           <name>colspan</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headercolspan</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footercolspan</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The columnId which will be used as id for the column header. 
Notice: As the rowId on t:datatable this will not add 
any namespace to the id. The id will be rendered exactly 
as you provide it.]]></description>
           <name>columnId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An EL expression that specifies the data model that backs this table.
<p>
The value referenced by the EL expression can be of any type.
</p>
<ul>
<li>A value of type DataModel is used directly.</li>
<li>Array-like parameters of type array-of-Object, java.util.List, java.sql.ResultSet or
javax.servlet.jsp.jstl.sql.Result are wrapped in a corresponding DataModel that knows how to iterate over the
elements.</li>
<li>Other values are wrapped in a DataModel as a single row.</li>
</ul>
<p>
Note in particular that unordered collections, eg Set are not supported. Therefore if the value expression
references such an object then the table will be considered to contain just one element - the collection itself.
</p>]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the index of the first row to be displayed, starting from 0.]]></description>
           <name>first</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the maximum number of rows of data to be displayed.
<p>
Specify zero to display all rows from the "first" row to the end of available data.
</p>]]></description>
           <name>rows</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the name of the request-scope variable that will hold the current row during iteration.
<p>
During rendering of child components of this UIData, the variable with this name can be read to learn what the
"rowData" object for the row currently being rendered is.
</p>
<p>
This value must be a static value, ie an EL expression is not permitted.
</p>]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for a component in each row should not be 
discarded before the datatable is rendered again.

This property is similar to tomahawk t:dataTable preserveRowStates

This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>rowStatePreserved</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Similar to dataTable, but does not render a table. 

Instead the layout attribute controls how each dataRow is rendered. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>dataList</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlDataList</component-type>
            <renderer-type>org.apache.myfaces.List</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[A parameter name, under which the rowCount is set in request 
scope similar to the var parameter.]]></description>
           <name>rowCountVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the current rowIndex is set in 
 request scope similar to the var parameter.]]></description>
           <name>rowIndexVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[simple|unorderedList|orderedList
<ul>
  <li>simple = for each dataRow all children are simply rendered</li>
  <li>unorderedList = the list is rendered as HTML unordered list (= bullet list)</li>
  <li>orderedList = the list is rendered as HTML ordered list</li>
</ul>
Default: simple]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be applied to individual items in the list]]></description>
           <name>itemStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[OnClick handler to be applied to individual items in the list]]></description>
           <name>itemOnClick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for each row should not be 
discarded before the datatable is rendered again. 

Setting this to true might be hepful if an input 
component inside the datatable has no valuebinding and 
the value entered in there should be displayed again.
 
This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>preserveRowStates</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for a component in each row should not be 
discarded before the datatable is rendered again.

In tomahawk, this property is the same as t:dataTable preserveRowComponentState

This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>rowStatePreserved</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
(where 'n' is the row index) to components that are 
contained within a "list." This value will be true by 
default and the value will be ignored if the value of 
forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for a component in each row should not be 
discarded before the datatable is rendered again.

This property is similar to tomahawk t:dataTable preserveRowStates

This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>preserveRowComponentState</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Used to assign a value expression that identify in a unique way a row. This value
will be used later instead of rowIndex as a key to be appended to the container 
client id using getDerivedSubClientId() method.]]></description>
           <name>rowKey</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute is used to append an unique prefix when rowKey is not used, to prevent
a key match a existing component id (note two different components can't have the
same unique id).]]></description>
           <name>derivedRowKeyPrefix</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSV of several row index to start (and end a previous) tbody element]]></description>
           <name>bodyrows</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each column.]]></description>
           <name>columnClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to footer cells.]]></description>
           <name>footerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to header cells.]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each row.]]></description>
           <name>rowClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to all captions.
If there are less classes than the number of rows, apply the same
sequence of classes to the remaining captions, so the pattern is repeated.
More than one class can be applied to a row by separating the classes
with a space.]]></description>
           <name>captionClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The CSS class to be applied to the Caption.]]></description>
           <name>captionStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An EL expression that specifies the data model that backs this table.
<p>
The value referenced by the EL expression can be of any type.
</p>
<ul>
<li>A value of type DataModel is used directly.</li>
<li>Array-like parameters of type array-of-Object, java.util.List, java.sql.ResultSet or
javax.servlet.jsp.jstl.sql.Result are wrapped in a corresponding DataModel that knows how to iterate over the
elements.</li>
<li>Other values are wrapped in a DataModel as a single row.</li>
</ul>
<p>
Note in particular that unordered collections, eg Set are not supported. Therefore if the value expression
references such an object then the table will be considered to contain just one element - the collection itself.
</p>]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the index of the first row to be displayed, starting from 0.]]></description>
           <name>first</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the maximum number of rows of data to be displayed.
<p>
Specify zero to display all rows from the "first" row to the end of available data.
</p>]]></description>
           <name>rows</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the name of the request-scope variable that will hold the current row during iteration.
<p>
During rendering of child components of this UIData, the variable with this name can be read to learn what the
"rowData" object for the row currently being rendered is.
</p>
<p>
This value must be a static value, ie an EL expression is not permitted.
</p>]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Scroller for UIData components eg. dataTable

Must be nested inside footer facet of dataTable OR for
attribute must be given so that corresponding uiData can be found.

Unless otherwise specified, all attributes accept static values or EL expressions.

A component which works together with a UIData component to allow a
user to view a large list of data one "page" at a time, and navigate
between pages.]]></description>
        <tag-name>dataScroller</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlDataScroller</component-type>
            <renderer-type>org.apache.myfaces.DataScroller</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The layout this scroller should render with. Default is 'table',
 'list' is implemented as well. Additionally you can use
 'singleList' - then the data-scroller will render a list, but
 not the paginator - same with the value 'singleTable'.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[standard html colspan attribute for table cell]]></description>
           <name>colspan</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[MethodBinding pointing at method acception an ActionEvent with return type void.]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[The JSF id of a UIData component that this scroller will affect.

If this attribute is not present then the datascroller must be
a child of a UIData component.]]></description>
           <name>for</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[step (pages) used for fastforward and fastrewind]]></description>
           <name>fastStep</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the actual page index is set
in request scope similar to the var parameter.]]></description>
           <name>pageIndexVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the actual page count is set
in request scope similar to the var parameter.]]></description>
           <name>pageCountVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the actual rows count is set
in request scope similar to the var parameter.]]></description>
           <name>rowsCountVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the actual displayed rows count
is set in request scope similar to the var parameter.]]></description>
           <name>displayedRowsCountVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the actual first displayed row
index is set in request scope similar to the var parameter.]]></description>
           <name>firstRowIndexVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A parameter name, under which the actual last displayed row
index is set in request scope similar to the var parameter.]]></description>
           <name>lastRowIndexVar</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If set true, then the paginator gets rendered]]></description>
           <name>paginator</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The maximum amount of pages to be displayed in the paginator.]]></description>
           <name>paginatorMaxPages</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[styleclass for pagingator]]></description>
           <name>paginatorTableClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style for pagingator]]></description>
           <name>paginatorTableStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[styleClass for paginator's column]]></description>
           <name>paginatorColumnClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style for paginator's column]]></description>
           <name>paginatorColumnStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[styleClass for paginator's column with pageIndex = currentPageIndex]]></description>
           <name>paginatorActiveColumnClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA['true' - render a link for the paginator's column with
pageIndex = currentPageIndex. Default-value is 'true'.]]></description>
           <name>paginatorRenderLinkForActive</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[style-class for data-scroller first-element]]></description>
           <name>firstStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style-class for data-scroller last-element]]></description>
           <name>lastStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style-class for data-scroller previous-element]]></description>
           <name>previousStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style-class for dataScroller next-element]]></description>
           <name>nextStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style-class for data-scroller fast-forward-element]]></description>
           <name>fastfStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style-class for data-scroller fast-rewind-element]]></description>
           <name>fastrStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[style for paginator's column with pageIndex = currentPageIndex]]></description>
           <name>paginatorActiveColumnStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If set to false, the facets aren't renderd if all the
lines are contained on a single page. Default is true.]]></description>
           <name>renderFacetsIfSinglePage</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[True means that the default ActionListener should be
executed immediately (i.e. during Apply Request
Values phase of the request processing lifecycle),
rather than waiting until the Invoke Application phase.]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the dataScroller is on the first page (index is at 1), links for
first, prev and fastprev are disabled. Default is false.]]></description>
           <name>disableFacetLinksIfFirstPage</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the dataScroller is on the last page (index is at pagecount), links for
last, next and fastnext are disabled. Default is false.]]></description>
           <name>disableFacetLinksIfLastPage</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the dataScroller is on the first page (index is at 1), links for
first, prev and fastprev are rendered. Default is true.]]></description>
           <name>renderFacetLinksIfFirstPage</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the dataScroller is on the last page (index is at pagecount), links for
last, next and fastnext are rendered. Default is true.]]></description>
           <name>renderFacetLinksIfLastPage</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Custom input control for dates and times. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>inputDate</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputDate</component-type>
            <renderer-type>org.apache.myfaces.Date</renderer-type>
            <handler-class>org.apache.myfaces.custom.date.HtmlInputDateTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[Indicate an object used as a bridge between the java.util.Date instance
used by this component internally and the value object used on the bean,
referred as a "business" value.

<ul>
<li>If the value is literal, look for the mentioned class instance, 
create a new instance and assign to the component property.</li>
<li>If it the value a EL Expression, set the expression to the 
component property.</li>
</ul>]]></description>
           <name>dateBusinessConverter</name>
           <type>org.apache.myfaces.custom.calendar.DateBusinessConverter</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>timeZone</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the type of value to be accepted. 
Valid values are: date | time | short_time | both | full]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, use 12hr times with AM/PM selector; if false, use 24hr time. Default false.]]></description>
           <name>ampm</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>popupCalendar</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Label to be used when displaying an empty month selection]]></description>
           <name>emptyMonthSelection</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Label to be used when displaying an empty ampm selection]]></description>
           <name>emptyAmpmSelection</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user. 
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Retrieve the converter used by this component. 
<p>
If no converter is selected, submitted values are converted to 
its inner class UserData on decode method.
</p>
<p>
If some converter is used, submitted values are decoded as
a String with the following format:
</p>
<p></p>
<p>year=yyyy</p>
<p>month=mm</p>
<p>day=dd</p>
<p>hours=hh</p>
<p>minutes=mm</p>
<p>seconds=ss</p>
<p>ampm=ampm</p>
<p></p>
<p>
Note that submitted values could be wrong and it is necessary to
restore values on render response phase. The converter receive 
a string with this format on getAsObject method and it is expected
the converter encode it on getAsString method, so the renderer can
restore the submitted values correctly.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The maximum number of characters allowed to be entered.]]></description>
           <name>maxlength</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The initial width of this control, in characters.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the value of this attribute is "off", render "off" as the value of the attribute.
This indicates that the browser should disable its autocomplete feature for this component.
This is useful for components that perform autocompletion and do not want the browser interfering.
If this attribute is not set or the value is "on", render nothing.]]></description>
           <name>autocomplete</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Places a div around its children. Unless otherwise specified, 
all attributes accept static values or EL expressions.]]></description>
        <tag-name>div</tag-name>
        <component>
            <component-type>org.apache.myfaces.Div</component-type>
            <renderer-type>org.apache.myfaces.DivRenderer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Document to enclose the document body. If not otherwise possible you can use
state="start|end" to demarkate the document boundaries]]></description>
        <tag-name>documentBody</tag-name>
        <component>
            <component-type>org.apache.myfaces.DocumentBody</component-type>
            <renderer-type>org.apache.myfaces.DocumentBody</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the page is loaded]]></description>
           <name>onload</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the page is unloaded]]></description>
           <name>onunload</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>onresize</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[state="start|end". Used to demarkate the document boundaries]]></description>
           <name>state</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Document to enclose the whole document. If not otherwise possible you can use
state="start|end" to demarkate the document boundaries]]></description>
        <tag-name>document</tag-name>
        <component>
            <component-type>org.apache.myfaces.Document</component-type>
            <renderer-type>org.apache.myfaces.Document</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[state="start|end". Used to demarkate the document boundaries]]></description>
           <name>state</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Document to enclose the document head. If not otherwise possible you can use
state="start|end" to demarkate the document boundaries]]></description>
        <tag-name>documentHead</tag-name>
        <component>
            <component-type>org.apache.myfaces.DocumentHead</component-type>
            <renderer-type>org.apache.myfaces.DocumentHead</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[state="start|end". Used to demarkate the document boundaries]]></description>
           <name>state</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders an HTML Fieldset]]></description>
        <tag-name>fieldset</tag-name>
        <component>
            <component-type>org.apache.myfaces.Fieldset</component-type>
            <renderer-type>org.apache.myfaces.FieldsetRenderer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The fieldset's legend.]]></description>
           <name>legend</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Creates a file-selection widget in the rendered page which allows a user to select
a file for uploading to the server.
<p>
When the page is selected (using a command component such as commandButton), the
currently selected file contents are included in the data posted to the server.
The contents are cached somewhere, and an object of type UploadedFile will then
be assigned to the property pointed to by the "value" expression of this component.
</p>
<p>
You must enable the Tomahawk ExtensionsFilter to make this component work (see web.xml).
</p> 
<p>
Also, don't forget to set the form's attribute "enctype" to "multipart/form-data". 
See "examples/web/fileupload.jsp" for an example!
</p> 
<p>
Unless otherwise specified, all attributes accept static values or EL expressions.
</p>]]></description>
        <tag-name>inputFileUpload</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputFileUpload</component-type>
            <renderer-type>org.apache.myfaces.FileUpload</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[This setting was intended to allow control over how the contents of the
file get temporarily stored during processing.
<p> It allows three options</p>
<ul>
<li>"default": The file is handled on memory while the file size is below 
uploadThresholdSize value, otherwise is handled on disk or file storage when
decode occur (set submitted value)</li>
<li>"memory": The file is loaded to memory when decode occur 
(set submitted value). In other words, before set the uploaded file as 
submitted value it is loaded to memory. Use with caution, because it
could cause OutOfMemory exceptions when the uploaded files are too big. </li>
<li>"file": The file is handled on disk or file storage.</li>
</ul>]]></description>
           <name>storage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[This attribute specifies a comma-separated list of content types that 
a server processing this form will handle correctly. User agents may 
use this information to filter out non-conforming files when prompting 
a user to select files to be sent to the server 
(cf. the INPUT element when type="file")."]]></description>
           <name>accept</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An EL expression to which an UploadedFile object will be assigned on postback
if the user specified a file to upload to the server.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The maximum number of characters allowed to be entered.]]></description>
           <name>maxlength</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The initial width of this control, in characters.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If the value of this attribute is "off", render "off" as the value of the attribute.
This indicates that the browser should disable its autocomplete feature for this component.
This is useful for components that perform autocompletion and do not want the browser interfering.
If this attribute is not set or the value is "on", render nothing.]]></description>
           <name>autocomplete</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Creates an arbitrary HTML tag which encloses any child components. 
The value attribute specifies the name of the generated tag.
<br/>
If value is an empty string then no tag will be generated, but 
the child components will be rendered. This differs from setting 
rendered=false, which prevents child components from being 
rendered at all.
<br/>
You can specify some attribute to be added to the component 
using f:param like this:
<br/>
<t:htmlTag value="span">
      <f:param name="title" value="Hello world!"/>
</t:htmlTag>

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>htmlTag</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlTag</component-type>
            <renderer-type>org.apache.myfaces.HtmlTagRenderer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard inputText by helptext support. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>inputTextHelp</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlInputTextHelp</component-type>
            <renderer-type>org.apache.myfaces.TextHelp</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[]]></description>
           <name>helpText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>selectText</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true the input is rendered disabled on the client side and 
 a hidden input is used to actualy submit his value back to 
 the server.]]></description>
           <name>disabledOnClientSide</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Non HTML standard attribute to disable browser's autocomplete function.]]></description>
           <name>autocomplete</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The maximum number of characters allowed to be entered.]]></description>
           <name>maxlength</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The initial width of this control, in characters.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Value change listener on client side. 
<p>
This component replicates the 'Value Change Listener' functionality on the client side. It can be used
when the user would like a change in the value of one control to trigger off changes in the states of 
other controls. One or more Javascript Listeners can be nested within the source control (a control 
belonging to the 'javax.faces.Input' family). When the value of the source control is modified, the 
listeners are triggered and the states of the target controls modified.
</p>
<p>
Unless otherwise specified, all attributes accept static values or EL expressions.
</p>]]></description>
        <tag-name>jsValueChangeListener</tag-name>
        <component>
            <component-type>org.apache.myfaces.JsValueChangeListener</component-type>
            <renderer-type>org.apache.myfaces.JsValueChangeListener</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[for - the id of the target control]]></description>
           <name>for</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[the javascript expression to evaluate. The keyword '$srcElem' resolves to 
the source control and the keyword '$destElem' resolves to the target control]]></description>
           <name>expressionValue</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The result of the evaluated expression is assigned to the specified property 
of the target control]]></description>
           <name>property</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Events are triggered by the 'onchange' event of the source control. Here, 
an additional event can be specified (onload?).

If specified this JavaScript event will be inserted in the 
body tag. JavaScript code will be the same like it is 
rendered in the parent component.]]></description>
           <name>bodyTagEvent</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Setting a value from the model in java-script so that it can be 
used (e.g. by the value change listener) afterwards. 

Unless otherwise specified, all attributes accept static values 
or EL expressions.]]></description>
        <tag-name>jsValueSet</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlJsValueSet</component-type>
            <renderer-type>org.apache.myfaces.JsValueSet</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[javascript variable to be set.]]></description>
           <name>name</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[value to be set in the variable.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Determines where its children are positioned within the page 
relative to each other, similar to a Swing layout component. 

Unless otherwise specified, all attributes accept static values 
or EL expressions.]]></description>
        <tag-name>panelLayout</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelLayout</component-type>
            <renderer-type>org.apache.myfaces.Layout</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The CSS class to be applied to footer cells.]]></description>
           <name>footerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to header cells.]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[<pre>
layout           | header | navigation | body  | footer
=================|========|============|=======|========
classic (Default)| top    | left       | right | bottom
navigationRight  | top    | right      | left  | bottom
upsideDown       | bottom | left       | right | top
</pre>]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the table cell.]]></description>
           <name>navigationClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the table cell.]]></description>
           <name>bodyClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the table cell.]]></description>
           <name>headerStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the table cell.]]></description>
           <name>navigationStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the table cell.]]></description>
           <name>bodyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS class to be used for the table cell.]]></description>
           <name>footerStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Command, that represents a navigation item.

Must be nested inside a panel_navigation action and renders a 
clickable navigation item. This action is derived from the 
standard command_link action and has equal attributes. 
(Replaces former "navigation_item" tag.) 

Unless otherwise specified, all attributes accept static values 
or EL expressions.]]></description>
        <tag-name>commandNavigation</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCommandNavigation</component-type>
            <renderer-type>org.apache.myfaces.Navigation</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Comma separated list of subForm-ids for which validation 
 and model update should take place when this command is 
 executed. You need to wrap your input components in 
 org.apache.myfaces.custom.subform.SubForm instances for 
 this to work.]]></description>
           <name>actionFor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the character encoding of the linked resource.]]></description>
           <name>charset</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The coordinates of regions within a client side image map.]]></description>
           <name>coords</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The language of the linked resource.]]></description>
           <name>hreflang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The relationship between the current document and
the linked resource.]]></description>
           <name>rel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The type(s) describing the reverse link for the linked
resource.]]></description>
           <name>rev</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The shape of a region in a client side image map.]]></description>
           <name>shape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Names the frame that should display content generated by invoking this action.]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods
are fired instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a vertical menu structure with support for nested menu 
items. Unless otherwise specified, all attributes accept 
static values or EL expressions.

Panel, that includes navigation items ({@link HtmlCommandNavigation}) and other
components (separators).]]></description>
        <tag-name>panelNavigation</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelNavigation</component-type>
            <renderer-type>org.apache.myfaces.Navigation</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The CSS class of closed navigation items.]]></description>
           <name>itemClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class of open navigation items.]]></description>
           <name>openItemClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class of the active navigation item.]]></description>
           <name>activeItemClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for the td element of a separator.]]></description>
           <name>separatorClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style of closed navigation items.]]></description>
           <name>itemStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style of open navigation items.]]></description>
           <name>openItemStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style of the active navigation item.]]></description>
           <name>activeItemStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style for the td element of a separator.]]></description>
           <name>separatorStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A tree of menu items as returned by a value-expression. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>navigationMenuItems</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlNavigationMenuItems</component-type>
        </component>
        <attribute>
           <description><![CDATA[The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Name of a request-scope attribute under which the current item
of the collection, array, etc. of the value attribute will be 
exposed so that it can be referred to in EL for other attributes 
of this component.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for the current item.]]></description>
           <name>itemValue</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The label of the current item.]]></description>
           <name>itemLabel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The description of the current item.]]></description>
           <name>itemDescription</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determines if the current item is selectable or not.]]></description>
           <name>itemDisabled</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determines if the rendered markup for the current item receives
normal JSF HTML escaping or not.]]></description>
           <name>itemLabelEscaped</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A menu item. Used by navigationMenu, jscookMenu. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>navigationMenuItem</tag-name>
        <component>
            <component-type>org.apache.myfaces.NavigationMenuItem</component-type>
        </component>
        <attribute>
           <description><![CDATA[]]></description>
           <name>icon</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>split</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the action to take when this command is invoked.

If the value is an expression, it is expected to be a method 
binding EL expression that identifies an action method. An action method
accepts no parameters and has a String return value, called the action
outcome, that identifies the next view displayed. The phase that this
event is fired in can be controlled via the immediate attribute.

If the value is a string literal, it is treated as a navigation outcome
for the current view.  This is functionally equivalent to a reference to
an action method that returns the string literal.]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[A method binding EL expression that identifies an action listener method
to be invoked if this component is activated by the user. An action
listener method accepts a parameter of type javax.faces.event.ActionEvent
and returns void. The phase that this event is fired in can be controlled
via the immediate attribute.]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in 
the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered.
Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The initial value of this component.]]></description>
           <name>value</name>
           <type>javax.faces.model.SelectItem</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determine whether this item can be chosen by the user. When true, this item cannot be chosen by the user. If this
method is ever called, then any EL-binding for the disabled property will be ignored.]]></description>
           <name>itemDisabled</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The escape setting for the label of this selection item.]]></description>
           <name>escape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[For use in development tools.]]></description>
           <name>itemDescription</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The string which will be presented to the user for this option.]]></description>
           <name>itemLabel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for this Item.]]></description>
           <name>itemValue</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicate this component represent no selection option. 
Default value is false.]]></description>
           <name>noSelectionOption</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Must be nested inside a panel_navigation action and renders a 
clickable navigation item. 

This action is derived from the standard command_link action 
and has equal attributes. (Replaces former "navigation_item" 
tag.) 

Unless otherwise specified, all attributes accept static 
values or EL expressions.

Many thanks to the guys from Swiss Federal Institute of Intellectual Property and Marc Bouquet
for helping to develop this component.]]></description>
        <tag-name>commandNavigation2</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCommandNavigationItem</component-type>
            <renderer-type>org.apache.myfaces.NavigationMenu</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Menu node is open.]]></description>
           <name>open</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Menu node is active.]]></description>
           <name>active</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of viewIds for which this item 
should be active.]]></description>
           <name>activeOnViewIds</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The external link where to redirect when this is clicked.]]></description>
           <name>externalLink</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Comma separated list of subForm-ids for which validation 
 and model update should take place when this command is 
 executed. You need to wrap your input components in 
 org.apache.myfaces.custom.subform.SubForm instances for 
 this to work.]]></description>
           <name>actionFor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the character encoding of the linked resource.]]></description>
           <name>charset</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The coordinates of regions within a client side image map.]]></description>
           <name>coords</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The language of the linked resource.]]></description>
           <name>hreflang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The relationship between the current document and
the linked resource.]]></description>
           <name>rel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The type(s) describing the reverse link for the linked
resource.]]></description>
           <name>rev</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The shape of a region in a client side image map.]]></description>
           <name>shape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Names the frame that should display content generated by invoking this action.]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a vertical menu structure with support for nested menu items. 

The menu is rendered as unordered List. The menu-tree can be 
dynamically build using NavigationMenuItem(s). 

Unless otherwise specified, all attributes accept static values or EL expressions.

Many thanks to the guys from Swiss Federal Institute of Intellectual Property and Marc Bouquet
for helping to develop this component.]]></description>
        <tag-name>panelNavigation2</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelNavigationMenu</component-type>
            <renderer-type>org.apache.myfaces.NavigationMenu</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The CSS class of closed navigation items.]]></description>
           <name>itemClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class of open navigation items.]]></description>
           <name>openItemClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class of open navigation items.]]></description>
           <name>activeItemClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for the td element of a separator.]]></description>
           <name>separatorClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style of closed navigation items.]]></description>
           <name>itemStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style of open navigation items.]]></description>
           <name>openItemStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style of the active navigation item.]]></description>
           <name>activeItemStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS Style for the td element of a separator.]]></description>
           <name>separatorStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA['table' or 'list' Layout (default is 'table')]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If set to true all Items are expanded from the beginning and never closed.]]></description>
           <name>expandAll</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If set to true all Items are rendered and other methods, like 
 CSS should be used to hide them as necessary]]></description>
           <name>renderAll</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[standard html colspan attribute for table cell]]></description>
           <name>colspan</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a Javascript Menu. Nested NavigationMenuItem(s) are rendered 
as Javascript Menu. 

<p>
This component is based based on the excellent
<a href="http://jscook.sourceforge.net/JSCookMenu">JSCookMenu</a>
by Heng Yuan.
</p>

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>jscookMenu</tag-name>
        <component>
            <component-type>org.apache.myfaces.JSCookMenu</component-type>
            <renderer-type>org.apache.myfaces.JSCookMenu</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[]]></description>
           <name>layout</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>theme</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods
are fired instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Model for a table in multiple balanced columns.

The newspaperTable tag allows a long, narrow table to be wrapped
so that it becomes a short, wide table. This allows more information
to be shown on a single screen. This is commonly used to present
checkboxes for a long list of items.
 
A data table for rendering long skinny tables as short wide 
table by wrapping the table over a specified number of columns. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>newspaperTable</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlNewspaperTable</component-type>
            <renderer-type>org.apache.myfaces.HtmlNewspaperTable</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Set the number of columns the table will be divided over.
In other words, the number of columns to wrap the table over. Default: 1]]></description>
           <name>newspaperColumns</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[The orientation of the newspaper columns in the newspaper 
table - "horizontal" or "vertical". Default: vertical]]></description>
           <name>newspaperOrientation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSV of several row index to start (and end a previous) tbody element]]></description>
           <name>bodyrows</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each column.]]></description>
           <name>columnClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to footer cells.]]></description>
           <name>footerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class to be applied to header cells.]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to td elements in
each row.]]></description>
           <name>rowClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A comma separated list of CSS class names to apply to all captions.
If there are less classes than the number of rows, apply the same
sequence of classes to the remaining captions, so the pattern is repeated.
More than one class can be applied to a row by separating the classes
with a space.]]></description>
           <name>captionClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The CSS class to be applied to the Caption.]]></description>
           <name>captionStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An EL expression that specifies the data model that backs this table.
<p>
The value referenced by the EL expression can be of any type.
</p>
<ul>
<li>A value of type DataModel is used directly.</li>
<li>Array-like parameters of type array-of-Object, java.util.List, java.sql.ResultSet or
javax.servlet.jsp.jstl.sql.Result are wrapped in a corresponding DataModel that knows how to iterate over the
elements.</li>
<li>Other values are wrapped in a DataModel as a single row.</li>
</ul>
<p>
Note in particular that unordered collections, eg Set are not supported. Therefore if the value expression
references such an object then the table will be considered to contain just one element - the collection itself.
</p>]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the index of the first row to be displayed, starting from 0.]]></description>
           <name>first</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the maximum number of rows of data to be displayed.
<p>
Specify zero to display all rows from the "first" row to the end of available data.
</p>]]></description>
           <name>rows</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Defines the name of the request-scope variable that will hold the current row during iteration.
<p>
During rendering of child components of this UIData, the variable with this name can be read to learn what the
"rowData" object for the row currently being rendered is.
</p>
<p>
This value must be a static value, ie an EL expression is not permitted.
</p>]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether the state for a component in each row should not be 
discarded before the datatable is rendered again.

This property is similar to tomahawk t:dataTable preserveRowStates

This will only work reliable if the datamodel of the 
datatable did not change either by sorting, removing or 
adding rows. Default: false]]></description>
           <name>rowStatePreserved</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A stack of panels, to switch panels dynamically. 

Manage a stack of JSF components and allow for one child component to be choosen for rendering. The behaviour
is similar to the CardLayout of Java Swing. Property <code>selectedPanel</code> defines the id of the child
to be rendered. If no child panel is selected or if the selected panel can not be found the first child is rendered.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>panelStack</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelStack</component-type>
            <renderer-type>org.apache.myfaces.PanelStack</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[]]></description>
           <name>selectedPanel</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A picklist component that allows to select items from one list to another
<p>
In other words, is a selection component where a set of items 
can be selected from a list that contains all the available items to a list
that contains the selected items.
</p>
<p>
The component is based on the t:selectManyListbox component, so it contains
the same attributes. Soon, more specific attributes will be added.
</p>]]></description>
        <tag-name>selectManyPicklist</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSelectManyPicklist</component-type>
            <renderer-type>org.apache.myfaces.PicklistRenderer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Define the text that goes inside the add button]]></description>
           <name>addButtonText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Define the text that goes inside the add all button]]></description>
           <name>addAllButtonText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Define the text that goes inside the remove button]]></description>
           <name>removeButtonText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Define the text that goes inside the remove all button]]></description>
           <name>removeAllButtonText</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be applied to the add button]]></description>
           <name>addButtonStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be applied to the add all button]]></description>
           <name>addAllButtonStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be applied to the remove button]]></description>
           <name>removeButtonStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS style to be applied to the remove all button]]></description>
           <name>removeAllButtonStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS styleClass to be applied to the add button]]></description>
           <name>addButtonStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS styleClass to be applied to the add all button]]></description>
           <name>addAllButtonStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS styleClass to be applied to the remove button]]></description>
           <name>removeButtonStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS styleClass to be applied to the remove all button]]></description>
           <name>removeAllButtonStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Specifies the value type of the selectable items. This attribute is
similar to the collectionType attribute introduced in JSF 2.0. 
It can be used to declare the type of the selectable items when using
a Collection to store the values in the managed bean, because it is 
not possible in Java to get the value type of a type-safe Collection
(in contrast to arrays where this is possible).]]></description>
           <name>valueType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[see JSF Spec.]]></description>
           <name>size</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>collectionType</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a popup which displays on a mouse event. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>popup</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPopup</component-type>
            <renderer-type>org.apache.myfaces.Popup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element. Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Pop the panel up in horizontal distance of x pixels from event.]]></description>
           <name>displayAtDistanceX</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Pop the panel up in vertical distance of y pixels from event.]]></description>
           <name>displayAtDistanceY</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Close the popup when the triggering element is left.]]></description>
           <name>closePopupOnExitingElement</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Close the popup when the popup itself is left.]]></description>
           <name>closePopupOnExitingPopup</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. If the value is "none", no tag is
rendered on the output and instead, onmouseover and onmouseout properties are modified
for children components. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[This tag is used in conjunction with the extended selectOneRadio 
tag when the "spread" layout is selected. It specifies the 
position within the document that the radio button corresponding 
to a specific SelectItem should be rendered. All HTML pass-through 
attributes for this input are taken from the associated 
selectOneRadio. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>radio</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlRadio</component-type>
            <renderer-type>org.apache.myfaces.Radio</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The id of the referenced extended selectOneRadio component. 
This value is resolved to the particular component using 
the standard UIComponent.findComponent() searching algorithm.]]></description>
           <name>for</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The index of the corresponding SelectItem, where 0 represents the first SelectItem.]]></description>
           <name>index</name>
           <required>true</required>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[If this property is set to true, the id generated for the input html markup
will be the logical id composed from the clientId of the associated 
selectOneRadio and the index of this component (for example 'myComp:2').

<p>
NOTE: This is provided only for backward compatibility with tomahawk 1.2.
Activate this behavior will make client behaviors added to 
t:selectOneRadio like f:ajax or others fail, because the logical id 
has no counterpart in the component tree.
</p>]]></description>
           <name>renderLogicalId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a 
browser that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[(DEPRECATED: use JSF 2 View Scope or Conversational Beans to store this state)
Provides the ability to store a model value inside the view's component tree.
<p>
JSF provides three scopes for managed beans and therefore all the model
objects that the managed beans reference:  request, session, application.
However a common requirement is a way for a model object to have a scope
that is tied to the duration of the current view; that is longer than the
request scope but shorter than session scope.
</p> 
<p>
This component simply holds a reference to an arbitrary object (specified
by the value property). Because this object is an ordinary component whose
scope is the current view, the reference to the model automatically has that
same scope.
</p> 
<p>
When the value is an EL expression, then after the view is restored the
recreated target object is stored at the specified location.
</p>
<p>
The object being saved must either:
</p>
<ul>
<li>implement java.io.Serializable, or</li>
<li>implement javax.faces.component.StateHolder and have a default
  constructor.</li>
</ul>
<p>
Note that the saved object can be "chained" from view to view
in order to extend its lifetime from a single view to a sequence
of views if desired. A UISaveState component with an EL expression
such as "#{someBean}" will save the object state after render, and
restore it on postback. If navigation occurs to some other view
and that view has a UISaveState component with the same EL expression
then the object will simply be saved into the new view, thus extending
its lifetime.
</p>]]></description>
        <tag-name>saveState</tag-name>
        <component>
            <component-type>org.apache.myfaces.SaveState</component-type>
        </component>
        <attribute>
           <description><![CDATA[The value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A schedule component similar to the ones found in Outlook or Evolution
<p> 
Renders a schedule component, showing appointments and events
in a day, workweek, week or month view, similar to the schedule
part of MS Outlook or Evolution.
</p><p>
The component is backed by an implementation of the
ScheduleModel interface. Creating a custom model can be easily
achieved by implementing this interface, or by overriding
the AbstractScheduleModel class.
</p><p>
AbstractHtmlSchedule class holds all properties specific to the HTML version of the Schedule component.
</p>]]></description>
        <tag-name>schedule</tag-name>
        <component>
            <component-type>org.apache.myfaces.Schedule</component-type>
            <renderer-type>org.apache.myfaces.Schedule</renderer-type>
            <handler-class>org.apache.myfaces.custom.schedule.ScheduleTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[]]></description>
           <name>backgroundClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>columnClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>contentClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>dateClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>dayClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>entryClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>entryRenderer</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>evenClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>foregroundClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>freeClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>gutterClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>holidayClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hoursClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>inactiveDayClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>minutesClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>monthClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>selectedClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>selectedEntryClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>subtitleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>textClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>titleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>unevenClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[the css class of the table representing a week in the compact mode (default: week)]]></description>
           <name>weekClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets Specifies the action to take when this command is invoked.
        If the value is an expression, it is expected to be a method
        binding EL expression that identifies an action method. An action method
        accepts no parameters and has a String return value, called the action
        outcome, that identifies the next view displayed. The phase that this
        event is fired in can be controlled via the immediate attribute.

        If the value is a string literal, it is treated as a navigation outcome
        for the current view.  This is functionally equivalent to a reference to
        an action method that returns the string literal.]]></description>
           <name>action</name>
           <method-signature>java.lang.String myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>mouseListener</name>
           <method-signature>void myMethod( org.apache.myfaces.custom.schedule.ScheduleMouseEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>splitWeekend</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Should the parent form of this schedule be submitted when the user
clicks on a day? Note that this will only work when the readonly
property is set to false.]]></description>
           <name>submitOnClick</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>compactMonthRowHeight</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>compactWeekRowHeight</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>detailedRowHeight</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>expandToFitEntries</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerDateFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>renderZeroLengthEntries</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>theme</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>tooltip</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>visibleEndHour</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>visibleStartHour</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>workingEndHour</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>workingStartHour</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[<p>
Show dates in 24 hour notation or 12 hour notation.
</p>]]></description>
           <name>hourNotation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>compactMonthDayOfWeekDateFormat</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A localized list of countries choose box. The value binds to the 
country ISO 3166 code. This is the same code as for 
java.util.Locale.getCountry(). The official codes list is 
available here : 

http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectOneCountry</tag-name>
        <component>
            <component-type>org.apache.myfaces.SelectOneCountry</component-type>
            <renderer-type>org.apache.myfaces.SelectOneCountryRenderer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Integer equals to the maximum number of characters in the country name.]]></description>
           <name>maxLength</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Integer equals to the maximum number of characters in the country name.]]></description>
           <name>emptySelection</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A localized list of languages choose box. The value binds to the 
language ISO 639 code (lowercase). This is the same code as 
for java.util.Locale.getLanguage(). The official codes 
list is available here : 

http://www.loc.gov/standards/iso639-2/englangn.html 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>selectOneLanguage</tag-name>
        <component>
            <component-type>org.apache.myfaces.SelectOneLanguage</component-type>
            <renderer-type>org.apache.myfaces.SelectOneLanguageRenderer</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Integer equals to the maximum number of characters in the language name.]]></description>
           <name>maxLength</name>
           <type>java.lang.Integer</type>
        </attribute>
        <attribute>
           <description><![CDATA[Label and value to be used when displaying an empty selection]]></description>
           <name>emptySelection</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, renders only the value of the component, 
 but no input widget. Default is false.]]></description>
           <name>displayValueOnly</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class used when displayValueOnly is true.]]></description>
           <name>displayValueOnlyStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether rendered markup should be escaped. Default: true]]></description>
           <name>escape</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A display name for this component.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>disabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class assigned to the label element for enabled choices.]]></description>
           <name>enabledClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>hideNoSelectionOption</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Enhancement for a data-table to select one Row with a radio button. The row-index is stored in the vealu-binding]]></description>
        <tag-name>selectOneRow</tag-name>
        <component>
            <component-type>org.apache.myfaces.SelectOneRow</component-type>
            <renderer-type>org.apache.myfaces.SelectOneRow</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The Name of the radio-button-group to use. If EL expressions are used,
note that every time this is evaluated should lead to the same value
in the scope used, that means the UIData instance used, otherwise
it could lead to unwanted side effects.]]></description>
           <name>groupName</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, indicates that this component cannot be modified by the user.
The element may receive focus unless it has also been disabled.]]></description>
           <name>readonly</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is modified.]]></description>
           <name>onchange</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element is selected.]]></description>
           <name>onselect</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods are fired
instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether an input value is required.
<p>
If this value is true and no input value is provided by a postback operation, then the "requiredMessage" text is
registered as a FacesMessage for the request, and validation fails.
</p>
<p>
Default value: false.
</p>]]></description>
           <name>required</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when conversion of a submitted value to the target type
fails.
<p>
</p>]]></description>
           <name>converterMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Text to be displayed to the user as an error message when this component is marked as "required" but no input
data is present during a postback (ie the user left the required field blank).]]></description>
           <name>requiredMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method-binding EL expression which is invoked during the validation phase for this component.
<p>
The invoked method is expected to check the submitted value for this component, and if not acceptable then report
a validation error for the component.
</p>
<p>
The method is expected to have the prototype
</p>
<code>public void aMethod(FacesContext, UIComponent,Object)</code>]]></description>
           <name>validator</name>
           <method-signature>void myMethod( javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Text which will be shown if validation fails.]]></description>
           <name>validatorMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A method which is invoked during postback processing for the current view if the submitted value for this
component is not equal to the value which the "value" expression for this component returns.
<p>
The phase in which this method is invoked can be controlled via the immediate attribute.
</p>]]></description>
           <name>valueChangeListener</name>
           <method-signature>void myMethod( javax.faces.event.ValueChangeEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[An extended version of the standard UISelectItems. Populates the 
SelectItem collection from the given value automatically using 
the itemLabel and itemValue attributes. By using the component 
there is no need to manually create a SelectItem collection 
because component automatically populates SelectItem objects 
from types like Collection, Map and etc..]]></description>
        <tag-name>selectItems</tag-name>
        <component>
            <component-type>org.apache.myfaces.UISelectItems</component-type>
        </component>
        <attribute>
           <description><![CDATA[name of the iterator]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[name of the selectitem]]></description>
           <name>itemLabel</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[value of the selectitem]]></description>
           <name>itemValue</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[indicate if the label should be escaped of the selectitem]]></description>
           <name>itemLabelEscaped</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[name of the selectitem]]></description>
           <name>itemDescription</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[disabled state of the selectitem]]></description>
           <name>itemDisabled</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Only applies when value points to a map. Use the Entry instance instead
the value for resolve EL Expressions]]></description>
           <name>useEntryAsItem</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Clickable sort column header. 

Must be nested inside an extended data_table tag. This tag is 
derived from the standard command_link tag and has the additional 
attributes columnName and arrow. 

Note: In contrast to normal command links, the default for the 
"immediate" attribute is "true". This is desirable as it avoids 
validating all input fields in the enclosing form when the column 
sort order changes. HOWEVER when the table contains input 
components "immediate" must be set to false; otherwise input 
fields will render blank after a sort, or will show their old 
values (ie will not appear to sort though output fields in the 
table will sort) when sort ordering is changed. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>commandSortHeader</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlCommandSortHeader</component-type>
            <renderer-type>org.apache.myfaces.SortHeader</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The name of this column. This name must uniquely identify this 
column among all other (sortable) columns in the same 
data_table. The sortColumn attribute of the embedding 
data_table reflects the current sort column (see extended 
data_table).]]></description>
           <name>columnName</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The property name associated with this column. This name must 
be one of the properties of the row object by which the sorting 
should be performed. The sortProperty attribute of the 
embedding data_table reflects the current sort property 
(see extended data_table).]]></description>
           <name>propertyName</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicates whether an arrow, that shows the sort direction 
should be rendered. Default: false]]></description>
           <name>arrow</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Comma separated list of subForm-ids for which validation 
 and model update should take place when this command is 
 executed. You need to wrap your input components in 
 org.apache.myfaces.custom.subform.SubForm instances for 
 this to work.]]></description>
           <name>actionFor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[When set instead of a Hyperlink a span tag is rendered in the corresponding Component]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Attribute to render when disabled is true]]></description>
           <name>disabledStyle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[CSS-Style Class to use when disabled is true]]></description>
           <name>disabledStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the character encoding of the linked resource.]]></description>
           <name>charset</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The coordinates of regions within a client side image map.]]></description>
           <name>coords</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The language of the linked resource.]]></description>
           <name>hreflang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The relationship between the current document and
the linked resource.]]></description>
           <name>rel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The type(s) describing the reverse link for the linked
resource.]]></description>
           <name>rev</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The shape of a region in a client side image map.]]></description>
           <name>shape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Names the frame that should display content generated by invoking this action.]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that identifies the phase during which action events
should fire.
<p>
During normal event processing, action methods and action listener methods are fired during the
"invoke application" phase of request processing. If this attribute is set to "true", these methods
are fired instead at the end of the "apply request values" phase.
</p>]]></description>
           <name>immediate</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The text to display to the user for this command component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[The action to take when this command is invoked.
<p>
If the value is an expression, it is expected to be a method binding EL expression that identifies
an action method. An action method accepts no parameters and has a String return value, called the
action outcome, that identifies the next view displayed. The phase that this event is fired in
can be controlled via the immediate attribute.
</p>
<p> 
If the value is a string literal, it is treated as a navigation outcome for the current view. This
is functionally equivalent to a reference to an action method that returns the string literal.
</p>]]></description>
           <name>action</name>
           <method-signature>java.lang.Object myMethod(  )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>actionListener</name>
           <method-signature>void myMethod( javax.faces.event.ActionEvent )</method-signature>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders the path to a common CSS-file]]></description>
        <tag-name>stylesheet</tag-name>
        <component>
            <component-type>org.apache.myfaces.Stylesheet</component-type>
            <renderer-type>org.apache.myfaces.Stylesheet</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[URL for CSS-file.
<p>
If this path starts with a slash, then the webapp context path will be prepended to it.
This makes it simple to reference stylesheets at an absolute path within the webapp.
A value like "/styles/style.css" becomes "/webappname/styles/style.css".
</p>
<p>
If this path does not start with a slash, then it is output unaltered. This supports
absolute urls ("http://host/path/style.css"). It also supports having css files relative
to the current page ("style.css" or "styles/style.css") but this needs to be used with
care as the standard JSF postback/internal-forward navigation style can cause browsers
to use an inappropriate base url when resolving relative references.
</p>]]></description>
           <name>path</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Inline the stylesheet file content as in contrast to referencing it as a link.
<p>
The file referenced by the path attribute is loaded, and its content is written
to the page wrapped in an &lt;script&gt; tag.
</p>
<p>
When this option is enabled, the path property must contain an absolute path
within the current webapp. External urls ("http://*") and paths relative to the
current page are not supported.
</p>]]></description>
           <name>inline</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Cause EL expressions in the stylesheet to be evaluated.
<p>
When true, any EL expression in the stylesheet will be evaluated and replaced
by its string representation on the first access. The stylesheet will be
processed only once. Every subsequent request will get a cached view.
</p>]]></description>
           <name>filtered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Define the target media of the styles:
    <dl>
      <dt>screen</dt>
      <dd>Intended for non-paged computer screens.</dd>
      <dt>tty</dt>
      <dd>Intended for media using a fixed-pitch character grid, such
        as teletypes, terminals, or portable devices with limited
        display capabilities.</dd>
      <dt>tv</dt>
      <dd>Intended for television-type devices (low resolution,
        color, limited scrollability).</dd>
      <dt>projection</dt>
      <dd>Intended for projectors.</dd>
      <dt>handheld</dt>
      <dd>Intended for handheld devices (small screen, monochrome,
        bitmapped graphics, limited bandwidth).</dd>
      <dt>print</dt>
      <dd>Intended for paged, opaque material and for documents
        viewed on screen in print preview mode.</dd>
      <dt>braille</dt>
      <dd>Intended for braille tactile feedback devices.</dd>
      <dt>aural</dt>
      <dd>Intended for speech synthesizers.</dd>
      <dt>all</dt>
      <dd>Suitable for all devices.</dd>
    </dl>
    Could be a comma separated list.
    See also http://www.w3.org/TR/REC-html40/types.html#type-media-descriptors]]></description>
           <name>media</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A SubForm which will allow for partial validation
and model update.
<p>
A subform to an existing form. Inputs in this form will only be 
validated and updated, if a t:commandButton or t:commandLink 
has been clicked with an actionFor attribute which references 
the client-id of this subform. Optionally, the validation will 
trigger if a commandButton or commandLink embedded in this 
subform has been clicked, except if this command is a 
t:commandButton or t:commandLink with an actionFor attribute 
which doesn't reference the client-id of this subform.
</p>
<p>
Components will be validated and updated only if
either a child-component of this form caused
the submit of the form, or an extended commandLink
or commandButton with the actionFor attribute set
to the client-id of this component was used.
</p>
<p>
You can have several comma-separated entries in
the actionFor-attribute - with this it's possible to
validate and update more than one subForm at once.
</p>]]></description>
        <tag-name>subform</tag-name>
        <component>
            <component-type>org.apache.myfaces.SubForm</component-type>
            <renderer-type>org.apache.myfaces.SubForm</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[true|false - set to false if you submit other subforms and would like to 
have your subform reflecting any model update. Default: true]]></description>
           <name>preserveSubmittedValues</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>swapImage</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlSwapImage</component-type>
            <renderer-type>org.apache.myfaces.SwapImage</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels. Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The amount of white space to be inserted to the left and 
right of this element, in undefined units. 
Deprecated in HTML 4.01.]]></description>
           <name>hspace</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The amount of white space to be inserted above and 
 below this element, in undefined units. 
 Deprecated in HTML 4.01.]]></description>
           <name>vspace</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[the url of the image displayed onmouseover]]></description>
           <name>swapImageUrl</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[activeImage will be rendered if: swapImage is a direct 
child of commandNavigation and the commandNavigation.isActive]]></description>
           <name>activeImageUrl</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies alternative text that can be used by a browser 
that can't show this element.]]></description>
           <name>alt</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Overrides the natural height of this image, by specifying 
height in pixels.]]></description>
           <name>height</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies server-side image map handling for this image.]]></description>
           <name>ismap</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A link to a long description of the image.]]></description>
           <name>longdesc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies an image map to use with this image.]]></description>
           <name>usemap</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Overrides the natural width of this image, by 
specifying width in pixels.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alias for the "value" attribute.]]></description>
           <name>url</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The URL of the image.
<p>
If the URL starts with a '/', it is relative to the context path of the web application.
</p>]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[TODO: Document this component.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>panelTab</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelTab</component-type>
            <renderer-type>javax.faces.Group</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[Label of this tab.]]></description>
           <name>label</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[TODO: Document this component.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>panelTabbedPane</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlPanelTabbedPane</component-type>
            <renderer-type>org.apache.myfaces.TabbedPane</renderer-type>
            <handler-class>org.apache.myfaces.custom.tabbedpane.HtmlPanelTabbedPaneTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[Boolean Variable that is set in request scope when 
rendering a panelTab. True means that the currently 
rendered panelTab is active.]]></description>
           <name>activePanelTabVar</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Index of tab that is selected by default.]]></description>
           <name>selectedIndex</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class of the active tab cell.]]></description>
           <name>activeTabStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class of the inactive tab cells.]]></description>
           <name>inactiveTabStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class of the active tab sub cell.]]></description>
           <name>activeSubStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class of the inactive tab sub cells.]]></description>
           <name>inactiveSubStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class of the active tab content cell.]]></description>
           <name>tabContentStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Style class of the disabled tab cells.]]></description>
           <name>disabledTabStyleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Toggle client-side/server-side tab switches.]]></description>
           <name>serverSideTabSwitch</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Define if the process validation and update model phases
should be executed before change between tabs, when
serverSideTabSwitch = true (if is false, the switch
is done by other way so this property does not have any
effect).

Note that if this property is set as false, only a tab 
change is done if all input fields inside the form are valid 
(including input components outside this panel). 

By default is true, so both phases are not executed.]]></description>
           <name>immediateTabChange</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datafld</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>datasrc</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Reserved for future use.]]></description>
           <name>dataformatas</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The background color of this element.]]></description>
           <name>bgcolor</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the width of the border of this element, in pixels.  Deprecated in HTML 4.01.]]></description>
           <name>border</name>
           <type>int</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of empty space between the cell border and
its contents.  It can be either a pixel length or a percentage.]]></description>
           <name>cellpadding</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the amount of space between the cells of the table.
It can be either a pixel length or a percentage of available 
space.]]></description>
           <name>cellspacing</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls what part of the frame that surrounds a table is 
visible.  Values include:  void, above, below, hsides, lhs, 
rhs, vsides, box, and border.]]></description>
           <name>frame</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Controls how rules are rendered between cells.  Values include:
none, groups, rows, cols, and all.]]></description>
           <name>rules</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Provides a summary of the contents of the table, for
accessibility purposes.]]></description>
           <name>summary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the desired width of the table, as a pixel length or
a percentage of available space.]]></description>
           <name>width</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the horizontal alignment of this element. Deprecated in HTML 4.01.]]></description>
           <name>align</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Container class allows user to toggle between view/edit mode.

Extends PanelGroup. Allows user to have several toggleLink in a group. 
When the togglePanel is toggled, the toggleGroup will be hidden.]]></description>
        <tag-name>toggleGroup</tag-name>
        <component>
            <component-type>org.apache.myfaces.ToggleGroup</component-type>
            <renderer-type>org.apache.myfaces.ToggleGroup</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[HTML: Flag to define the toggle status.]]></description>
           <name>toggled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Extends standard outputLink but links to a dynamically rendered resource (image, file, ...).

Should be nested within an HtmlToggleGroup component. Controls nested within
this component will be displayed in 'view' mode, controls outside this
component (within the parent HtmlToggleGroup) will be displayed in 'edit'
mode.]]></description>
        <tag-name>toggleLink</tag-name>
        <component>
            <component-type>org.apache.myfaces.ToggleLink</component-type>
            <renderer-type>org.apache.myfaces.ToggleLink</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[The class which implements 
org.apache.myfaces.custom.dynamicResources.ResourceRenderer. 
The resource renderer is responsible for resource the image. 
The class must have a default constructor. 
Any request scoped attribute or managed bean is not available when 
this resource renderer is instantiated and used. 
The resource renderer must render the binary data for the resource 
by using the parameters passed by nested f:param elements and/or 
using session or application scoped beans.]]></description>
           <name>for</name>
           <required>true</required>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: When true, this element cannot receive focus.]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Id of the component that will be focused when toggleLink is clicked]]></description>
           <name>onClickFocusId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If true, this component will force the use of the specified id when rendering.]]></description>
           <name>forceId</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If false, this component will not append a '[n]' suffix 
 (where 'n' is the row index) to components that are 
 contained within a "list." This value will be true by 
 default and the value will be ignored if the value of 
 forceId is false (or not specified.)]]></description>
           <name>forceIdIndex</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
normally. If not, no hyperlink is rendered but all nested 
tags (=body) are rendered.]]></description>
           <name>enabledOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[If user is in given role, this component will be rendered 
 normally. If not, nothing is rendered and the body of this 
 tag will be skipped.]]></description>
           <name>visibleOnUserRole</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the position of this element within the tab order of the document.]]></description>
           <name>tabindex</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element loses focus.]]></description>
           <name>onblur</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies a script to be invoked when the element receives focus.]]></description>
           <name>onfocus</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Sets the access key for this element.]]></description>
           <name>accesskey</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Specifies the character encoding of the linked resource.]]></description>
           <name>charset</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The coordinates of regions within a client side image map.]]></description>
           <name>coords</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The language of the linked resource.]]></description>
           <name>hreflang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The relationship between the current document and
the linked resource.]]></description>
           <name>rel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The type(s) describing the reverse link for the linked
resource.]]></description>
           <name>rev</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The shape of a region in a client side image map.]]></description>
           <name>shape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Names the frame that should display content generated by invoking this action.]]></description>
           <name>target</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: A hint to the user agent about the content type of the linked resource.]]></description>
           <name>type</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets The initial value of this component.]]></description>
           <name>value</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[An expression that specifies the Converter for this component.
<p>
The value can either be a static value (ID) or an EL expression. When a static id is
specified, an instance of the converter type registered with that id is used. When this
is an EL expression, the result of evaluating the expression must be an object that
implements the Converter interface.
</p>]]></description>
           <name>converter</name>
           <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Container class allows user to toggle between view/edit mode.

Extends PanelGroup. Allows user to toggle between 'view' mode and 'edit' mode. 
In the togglePanel, include a toggleLink. When the toggleLink is clicked, 
the rest of the group is shown, and the link is hidden.]]></description>
        <tag-name>togglePanel</tag-name>
        <component>
            <component-type>org.apache.myfaces.TogglePanel</component-type>
            <renderer-type>org.apache.myfaces.TogglePanel</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[You can set toggled to true to force the toggleGroup to always be in toggle 
mode. Default is false.]]></description>
           <name>toggled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>disabled</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is clicked.]]></description>
           <name>onclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the element is double-clicked.]]></description>
           <name>ondblclick</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed down over this element.]]></description>
           <name>onkeydown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is pressed over this element.]]></description>
           <name>onkeypress</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when a key is released over this element.]]></description>
           <name>onkeyup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is pressed over this element.]]></description>
           <name>onmousedown</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved while it is in this element.]]></description>
           <name>onmousemove</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moves out of this element.]]></description>
           <name>onmouseout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is moved into this element.]]></description>
           <name>onmouseover</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: Script to be invoked when the pointing device is released over this element.]]></description>
           <name>onmouseup</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The direction of text display, either 'ltr' (left-to-right) or 'rtl' (right-to-left).]]></description>
           <name>dir</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: The base language of this document.]]></description>
           <name>lang</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: An advisory title for this element.  Often used by the user agent as a tooltip.]]></description>
           <name>title</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[HTML: CSS styling instructions.]]></description>
           <name>style</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Transforms XML using and XSL stylesheet.

Used to transform XML (from either a String or URL) using either XSLT or
Velocity.]]></description>
        <tag-name>xmlTransform</tag-name>
        <component>
            <component-type>org.apache.myfaces.tomahawk.XmlTransform</component-type>
        </component>
        <attribute>
           <description><![CDATA[String containing the XML content to be transformed.]]></description>
           <name>content</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[String containing the location of the XML content to be transformed.]]></description>
           <name>contentLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[String containing the XSL information to use in the transformation.]]></description>
           <name>stylesheet</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Value binding expression referencing an InputStream from which the XML content is to be read.]]></description>
           <name>contentStream</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[String containing the location of the XSL stylesheet to use in the transformation.]]></description>
           <name>stylesheetLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Value binding expression referencing an InputStream from which the XSL stylesheet is to be read.]]></description>
           <name>styleStream</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a HTML input of type "treeCheckbox". 

The associated comes from the treeCheckbox itemLabel and itemValue. 
The selected items come from an extended selectManyCheckbox 
component with layout "spread". The selectManyCheckbox is 
referenced by the "for" attribute. 

All HTML pass-through attributes for this input are taken from 
the associated selectManyCheckbox. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>treeCheckbox</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlTreeCheckbox</component-type>
            <renderer-type>org.apache.myfaces.HtmlTreeCheckbox</renderer-type>
        </component>
        <attribute>
           <description><![CDATA[id of the referenced extended selectManyCheckbox component]]></description>
           <name>for</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The initial value of this component.]]></description>
           <name>value</name>
           <type>javax.faces.model.SelectItem</type>
        </attribute>
        <attribute>
           <description><![CDATA[Determine whether this item can be chosen by the user. When true, this item cannot be chosen by the user. If this
method is ever called, then any EL-binding for the disabled property will be ignored.]]></description>
           <name>itemDisabled</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The escape setting for the label of this selection item.]]></description>
           <name>escape</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[For use in development tools.]]></description>
           <name>itemDescription</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The string which will be presented to the user for this option.]]></description>
           <name>itemLabel</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The value for this Item.]]></description>
           <name>itemValue</name>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Indicate this component represent no selection option. 
Default value is false.]]></description>
           <name>noSelectionOption</name>
           <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A tree data component. 
Unless otherwise specified, all attributes accept static values or EL expressions.
<p>
Tree implementation based on javax.swing.JTree.
</p>
<p>
The tree model is assigned by using a value binding named <code>model</code>
and is not stored in view state.
</p>
<p>
A hierarchy of {@link HtmlTreeNode}objects is used to represent the current
expanded state of the tree. The root node is held as a faces named * 
<code>rootNode</code>.
</p>]]></description>
        <tag-name>tree</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlTree</component-type>
            <renderer-type>org.apache.myfaces.HtmlTree</renderer-type>
            <handler-class>org.apache.myfaces.custom.tree.taglib.TreeTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[]]></description>
           <name>value</name>
           <required>true</required>
           <type>org.apache.myfaces.custom.tree.model.TreeModel</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconLine</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNoline</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconChildFirst</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconChildMiddle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconChildLast</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeOpen</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeOpenFirst</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeOpenMiddle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeOpenLast</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeClose</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeCloseFirst</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeCloseMiddle</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconNodeCloseLast</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>nodeClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>rowClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>columnClasses</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>selectedNodeClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>iconClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Time interval the tree will remain registered as a TreeModelListener 
without being accessed]]></description>
           <name>expireListeners</name>
           <type>long</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>headerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>footerClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>expandRoot</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[The type of layout markup to use when rendering this group. If the value is "block"
the renderer must produce an HTML "div" element. Otherwise HTML "span" element must be produced.]]></description>
           <name>layout</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[The CSS class for this element.  Corresponds to the HTML 'class' attribute.]]></description>
           <name>styleClass</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Renders a HTML input of type "treeColumn". 
<p>
This tag outlines the column where the tree structure will be 
render as part of the tree table. Unless otherwise specified, 
all attributes accept static values or EL expressions.
</p>
<p>
Tree column model. This column is used to provide the place holder for the
tree.  This is used in conjunction with the table format display.
</p>]]></description>
        <tag-name>treeColumn</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlTreeColumn</component-type>
        </component>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[Represents "tree data" in an HTML format.  Also provides a mechanism for maintaining expand/collapse
state of the nodes in the tree.

A component that provides an HTML-based tree from data supplied by a 
backing bean. The tree is highly customizable and allows for 
fine-grained control over the appearance of each of the nodes 
depending on their type. 

Almost any type of JSF component (text, image, checkbox, etc.) can 
be rendered inside the nodes and there is an option for client-side 
or server-side toggling of the expand/collapse state. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>tree2</tag-name>
        <component>
            <component-type>org.apache.myfaces.HtmlTree2</component-type>
            <renderer-type>org.apache.myfaces.HtmlTree2</renderer-type>
            <handler-class>org.apache.myfaces.custom.tree2.HtmlTreeTagHandler</handler-class>
        </component>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>

   <!-- Converter tags -->

   <!-- Validator tags -->
    <tag>
        <description><![CDATA[A custom validator for creditCards, based upon Jakarta Commons. 

Unless otherwise specified, all attributes accept static values or EL expressions]]></description>
        <tag-name>validateCreditCard</tag-name>
        <validator>
            <validator-id>org.apache.myfaces.validator.CreditCard</validator-id>
            <handler-class>org.apache.myfaces.validator.ValidatorBaseTagHandler</handler-class>
        </validator>
        <attribute>
           <description><![CDATA[american express cards]]></description>
           <name>amex</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[validation for discover]]></description>
           <name>discover</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[validation for mastercard]]></description>
           <name>mastercard</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[none of the given cardtypes is allowed.]]></description>
           <name>none</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[validation for visa]]></description>
           <name>visa</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>summaryMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>message</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>detailMessage</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A custom validator for email address format, based upons Jakarta Commons.

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>validateEmail</tag-name>
        <validator>
            <validator-id>org.apache.myfaces.validator.Email</validator-id>
            <handler-class>org.apache.myfaces.validator.ValidatorBaseTagHandler</handler-class>
        </validator>
        <attribute>
           <description><![CDATA[]]></description>
           <name>summaryMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>message</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>detailMessage</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A custom validator for validations against foreign component values. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>validateEqual</tag-name>
        <validator>
            <validator-id>org.apache.myfaces.validator.Equal</validator-id>
            <handler-class>org.apache.myfaces.validator.ValidatorBaseTagHandler</handler-class>
        </validator>
        <attribute>
           <description><![CDATA[the id of the foreign component, which is needed for the validation

In JSF 2.0 facelets mode is used to identify the components this 
validator should be applied to when using composite components.
Please use forId in that case instead.]]></description>
           <name>for</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[the id of the foreign component, which is needed for the validation]]></description>
           <name>forId</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>summaryMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>message</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>detailMessage</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>
    <tag>
        <description><![CDATA[A custom validator for reg. expr., based upons Jakarta Commons. 

Unless otherwise specified, all attributes accept static values or EL expressions.]]></description>
        <tag-name>validateRegExpr</tag-name>
        <validator>
            <validator-id>org.apache.myfaces.validator.RegExpr</validator-id>
            <handler-class>org.apache.myfaces.validator.ValidatorBaseTagHandler</handler-class>
        </validator>
        <attribute>
           <description><![CDATA[the pattern, which is the base of the validation]]></description>
           <name>pattern</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>summaryMessage</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>message</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>detailMessage</name>
           <type>java.lang.String</type>
        </attribute>
    </tag>

   <!-- Behavior tags -->
    
   <!-- Single Tags -->
   <tag>
        <description><![CDATA[Tag to add a tab change listeners to a {@link org.apache.myfaces.custom.tabbedpane.HtmlPanelTabbedPane}]]></description>
      <tag-name>tabChangeListener</tag-name>
      <handler-class>org.apache.myfaces.custom.tabbedpane.TabChangeListenerTagHandler</handler-class>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
   </tag>
   <tag>
        <description><![CDATA[]]></description>
      <tag-name>iconProvider</tag-name>
      <handler-class>org.apache.myfaces.custom.tree.taglib.IconProviderTagHandler</handler-class>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
   </tag>
   <tag>
        <description><![CDATA[Tag to add a tree selection listeners to a {@link HtmlTree}]]></description>
      <tag-name>treeSelectionListener</tag-name>
      <handler-class>org.apache.myfaces.custom.tree.taglib.TreeSelectionListenerTagHandler</handler-class>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
   </tag>
   <tag>
        <description><![CDATA[Registers an org.apache.myfaces.custom.updateactionlistener.UpdateActionListener 
at the parent component (which must be an ActionSource). 

When the parent's action fires the specified value is evaluated, 
then written into the specified property. 

Unless otherwise specified, all attributes accept static values or EL expressions. 

JSF 1.2 introduces a "setPropertyActionListener" with the same functionality like this.]]></description>
      <tag-name>updateActionListener</tag-name>
      <handler-class>org.apache.myfaces.custom.updateactionlistener.UpdateActionListenerTagHandler</handler-class>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
   </tag>

    <!-- Facelet Tags -->
   <tag>
        <description><![CDATA[Adds to a command link or button a javascript that enable automatic scrolling 
behavior after the event is invoked.<p></p>]]></description>

      <tag-name>autoScroll</tag-name>
    <behavior>
        <behavior-id>org.apache.myfaces.custom.autoscroll.AutoscrollBehavior</behavior-id>
        <handler-class>org.apache.myfaces.custom.autoscroll.AutoscrollBehaviorTagHandler</handler-class>
    </behavior>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
   </tag>
   <tag>
        <description><![CDATA[Adds to UICommand components that implements ClientBehaviorHolder interface an
AutoscrollBehavior.
<p>
Use it in this way to ensure proper operation:
</p>
<code>
&lt;f:metadata&gt;
  &lt;t:autoScrollPage/&gt;
&lt;/f:metadata&gt;
</code>
<p>
Or in this way:
</p>
<code>
&lt;h:body&gt;
  &lt;t:autoScrollPage/&gt;
</code>
<p>
It is possible to use it at start of the page too, but note this tag attach a listener to
PostAddToViewEvent, so previous components added to the view before apply this TagHandler
will not be taken into account.
</p>]]></description>

      <tag-name>autoScrollPage</tag-name>
    <handler-class>org.apache.myfaces.custom.autoscroll.AutoscrollPageTagHandler</handler-class>
        <attribute>
           <description><![CDATA[Perform client-side toggling of expand/collapse state via javascript (default is true.)]]></description>
           <name>clientSideToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets]]></description>
           <name>varNodeToggler</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the "plus" and "minus" navigation icons (default is true.) 
Value is ignored if clientSideToggle is true.]]></description>
           <name>showNav</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Show the connecting lines (default is true.)]]></description>
           <name>showLines</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Include the root node when rendering the tree (default is true.)]]></description>
           <name>showRootNode</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Preserve changes in client-side toggle information between 
requests (default is true.)]]></description>
           <name>preserveToggle</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find javascript resources. 
 If no values is specified, javascript will be loaded 
 from the resources directory using AddResource and 
 ExtensionsFilter.]]></description>
           <name>javascriptLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find image resources. If no 
values is specified, images will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>imageLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[An alternate location to find stylesheet resources. If no 
values is specified, stylesheets will be loaded from the 
resources directory using AddResource and ExtensionsFilter.]]></description>
           <name>styleLocation</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>javascriptLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>imageLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[]]></description>
           <name>styleLibrary</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Gets the value of the TreeData.]]></description>
           <name>value</name>
           <required>true</required>
           <type>java.lang.Object</type>
        </attribute>
        <attribute>
           <description><![CDATA[Return the request-scope attribute under which the data object for the current node will be exposed
when iterating. This property is not enabled for value binding expressions.]]></description>
           <name>var</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[Get a string which uniquely identifies this UIComponent within the scope of the nearest ancestor NamingContainer
component. The id is not necessarily unique across all components in the current view.]]></description>
           <name>id</name>
           <type>java.lang.String</type>
        </attribute>
        <attribute>
           <description><![CDATA[A boolean value that indicates whether this component should be rendered. Default value: true.]]></description>
           <name>rendered</name>
           <type>boolean</type>
        </attribute>
        <attribute>
           <description><![CDATA[Identifies a backing bean property (of type UIComponent or appropriate subclass) to bind " + "to this component instance. This value must be an EL expression.]]></description>
           <name>binding</name>
           <type>javax.faces.component.UIComponent</type>
        </attribute>
   </tag>

   <!-- Facelets Functions -->
</facelet-taglib>
