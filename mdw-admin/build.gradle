apply plugin: "osgi"
apply plugin: "war"

version = "${mdwVersion}"

libsDirName = "../../${mdwOutputDir}"

sourceSets {
    main {
        java {
            srcDir "src"
        }
        output.classesDir = "build/classes"
    }
}

repositories {
    maven {
        url devRepoUrl
    }
}
   
dependencies {
    compile fileTree(dir: "./web/WEB-INF/lib", includes: ["*.jar"])

    compile group: "org.slf4j", name: "slf4j-api", version: "1.6.6"
    compile(group: "log4j", name: "log4j", version: "1.2.15") { exclude(module: "jmxtools"); exclude(module: "jmxri") }
    compile group: "commons-beanutils", name: "commons-beanutils", version: "1.8.3"
    compile group: "commons-logging", name: "commons-logging", version: "1.1.1"
    compile group: "org.json", name: "json", version: "20090211"
	//For Cloud Oauth
	compile group: "org.apache.oltu.oauth2", name: "org.apache.oltu.oauth2.common", version: "1.0.1"
	compile group: "org.apache.oltu.oauth2", name: "org.apache.oltu.oauth2.client", version: "1.0.1"
	compile group: "org.apache.oltu.oauth2", name: "org.apache.oltu.oauth2.resourceserver", version: "1.0.1"
	compile group: "org.apache.oltu.oauth2", name: "org.apache.oltu.oauth2.authzserver", version: "1.0.1"

    providedCompile group: "javax.servlet", name: "servlet-api", version: "2.5"
}

task buildMdwCommon(type: GradleBuild) {
    buildFile = "${mdwFrameworkDir}/build.gradle"
    tasks = [":mdw-common:build"]
}

// gets schemas and common (temporary until they're 6.0)
task getMdwCommon(type: Copy) {
    dependsOn buildMdwCommon
    from "../${mdwFrameworkDir}/deploy/app/mdw-schemas-${mdwFrameworkVersion}.jar"
    from "../${mdwFrameworkDir}/deploy/app/mdw-common-${mdwFrameworkVersion}.jar"
    into "./web/WEB-INF/lib"
}

task cleanDist(type: Delete) {
    delete "dist"    
}

clean {
    dependsOn(cleanDist, cleanWar)
}

task buildDist(type: Exec) {
	if (System.properties["os.name"].startsWith("Windows"))
		commandLine 'cmd', '/c', 'grunt', '--no-color'
    else
		commandLine 'grunt', '--no-color'
}

war {
    dependsOn buildDist
    
    from("dist") {
      include "**/*"
      exclude "WEB-INF/lib/*.jar"  // already included as compile dependencies
    }
    from("src") {
        include "META-INF/mdw/**"
        filter{ it.replaceAll('@mdw.version@', mdwVersion) }
    }

    webXml = file("web/WEB-INF/web.xml")
    rootSpec.exclude "WEB-INF/web.xml"  // specified above
    
    manifest = osgiManifest {
        classesDir = sourceSets.main.output.classesDir
        classpath = configurations.runtime
        symbolicName = "com.centurylink.mdw.admin"
      instruction "Web-ContextPath",
          "mdw-admin"
      instruction "Export-Package",
          "com.centurylink.mdw.admin.*"
      instruction "Import-Package",
          "*"
      instruction "DynamicImport-Package",
          "schemaorg_apache_xmlbeans.*"
      instruction "Bundle-ClassPath",
          ".",
          "META-INF/mdw",
          "WEB-INF/classes"
   }
}