/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.designer.model;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.xml.bind.DatatypeConverter;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.eclipse.core.resources.IFolder;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.PluginUtil;
import com.centurylink.mdw.plugin.designer.model.ElementChangeEvent.ChangeType;
import com.centurylink.mdw.plugin.project.model.WorkflowProject;
import com.centurylink.mdw.designer.testing.TestCase;
import com.centurylink.mdw.model.value.user.UserActionVO.Entity;

public class RegressionTestSuite extends WorkflowElement
{
  public static final String TEST_CASES_DIR_PREFS_KEY = "TestCasesDir";
  public static final String TEST_RESULTS_DIR_PREFS_KEY = "TestResultsDir";

  private WorkflowProject workflowProject;
  public WorkflowProject getWorkflowProject() { return workflowProject; }
  public void setWorkflowProject(WorkflowProject workflowProject)
  {
    this.workflowProject = workflowProject;

    String tcDirLoc = workflowProject.getPersistentProperty(TEST_CASES_DIR_PREFS_KEY);
    if (tcDirLoc == null)
      tcDirLoc = getDefaultTestCasesDir();
    testCasesDir = new File(tcDirLoc);

    String trDirLoc = workflowProject.getPersistentProperty(TEST_RESULTS_DIR_PREFS_KEY);
    if (trDirLoc == null)
      trDirLoc = getDefaultTestResultsDir();
    resultsDir = new File(trDirLoc);
  }

  public Entity getActionEntity()
  {
    return Entity.Folder;
  }

  private File testCasesDir;
  public File getTestCasesDir() { return testCasesDir; }
  public void setTestCasesDir(File testCasesDir)
  {
    this.testCasesDir = testCasesDir;
    workflowProject.setPersistentProperty(TEST_CASES_DIR_PREFS_KEY, testCasesDir.toString());
  }

  public IFolder getTestCasesFolder()
  {
    String testCasesDir = getTestCasesDir().toString();
    String projectDir = workflowProject.getProjectDir().toString();
    String relativePath = testCasesDir.substring(projectDir.length() + 1).replace('\\', '/');
    if (workflowProject.isRemote() || workflowProject.isCloudProject())
      return workflowProject.getSourceProject().getFolder(relativePath);
    else
      return workflowProject.getEarProject().getFolder(relativePath);
  }

  private File resultsDir;
  public File getResultsDir() { return resultsDir; }
  public void setResultsDir(File resultsDir)
  {
    this.resultsDir = resultsDir;
    workflowProject.setPersistentProperty(TEST_RESULTS_DIR_PREFS_KEY, resultsDir.toString());
  }

  private List<?> testCasesStr;
  public List<?> getTestCasesStr() { return testCasesStr; }
  public void setTestCasesStr(List<?> testCasesStr) { this.testCasesStr = testCasesStr; }

  private Map<?,?> testCaseCountsStrMap;
  public Map<?,?> getTestCaseCountsStrMap() { return testCaseCountsStrMap; }
  public void setTestCaseCountsStrMap(Map<?,?> testCaseCountsStrMap) { this.testCaseCountsStrMap = testCaseCountsStrMap; }


  private boolean loadTest;
  public boolean isLoadTest() { return loadTest; }
  public void setLoadTest(boolean loadTest) { this.loadTest = loadTest; }

  private int threadCount;
  public int getThreadCount() { return threadCount; }
  public void setThreadCount(int threadCount) { this.threadCount = threadCount; }

  private int runCount;
  public int getRunCount() { return runCount; }
  public void setRunCount(int runCount) { this.runCount = runCount; }

  private int threadInterval;
  public int getThreadInterval() { return threadInterval; }
  public void setThreadInterval(int threadInterval) { this.threadInterval = threadInterval; }

  private boolean verbose;
  public boolean isVerbose() { return verbose; }
  public void setVerbose(boolean verbose) { this.verbose = verbose; }

  private boolean stubbing;
  public boolean isStubbing() { return stubbing; }
  public void setStubbing(boolean stubbing) { this.stubbing = stubbing; }

  private boolean singleServer;
  public boolean isSingleServer() { return singleServer; }
  public void setSingleServer(boolean singleServer) { this.singleServer = singleServer; }

  private List<RegressionTestCase> testCases;
  public List<RegressionTestCase> getTestCases() { return testCases; }
  public void setTestCases(List<RegressionTestCase> testCases) { this.testCases = testCases; }

  private boolean running;
  public boolean isRunning() { return running; }
  public void setRunning(boolean running)
  {
    this.running = running;

    String suiteStatus = TestCase.STATUS_NOT_RUN;
    if (running)
    {
      suiteStatus = TestCase.STATUS_RUNNING;
    }
    else
    {
      // find the most severe test case status
      for (RegressionTestCase regrTestCase : testCases)
      {
        if (regrTestCase.isErrored())
        {
          suiteStatus = TestCase.STATUS_ERROR;
          break;
        }
        else if (regrTestCase.isFailed())
        {
          if (!suiteStatus.equals(TestCase.STATUS_ERROR))
            suiteStatus = TestCase.STATUS_FAIL;
        }
        else if (regrTestCase.isSuccess())
        {
          if (!suiteStatus.equals(TestCase.STATUS_ERROR) && !suiteStatus.equals(TestCase.STATUS_FAIL))
            suiteStatus = TestCase.STATUS_PASS;
        }
      }
    }

    fireElementChangeEvent(ChangeType.STATUS_CHANGE, suiteStatus);
  }

  public RegressionTestSuite()
  {
  }
  public RegressionTestSuite(WorkflowProject workflowProject)
  {
    setWorkflowProject(workflowProject);
  }

  public boolean hasTestCasesDir()
  {
    return testCasesDir != null && testCasesDir.exists() && testCasesDir.isDirectory();
  }
  public boolean hasErrors()
  {
    for (RegressionTestCase testCase : testCases)
    {
      if (testCase.isErrored())
        return true;
    }
    return false;
  }

  public boolean hasFailures()
  {
    for (RegressionTestCase testCase : testCases)
    {
      if (testCase.isFailed())
        return true;
    }
    return false;
  }

  public boolean isSuccess()
  {
    for (RegressionTestCase testCase : testCases)
    {
      if (!testCase.isSuccess())
        return false;
    }
    return true;
  }

  public boolean isStopped()
  {
    for (RegressionTestCase testCase : testCases)
    {
      if (testCase.isStopped())
        return true;
    }
    return false;
  }

  public boolean isFinished()
  {
    for (RegressionTestCase testCase : testCases)
    {
      if (!testCase.isFinished())
        return false;
    }
    return true;
  }

  @Override
  public String getTitle()
  {
    return "Test Suite";
  }

  @Override
  public Long getId()
  {
    return new Long(-1); // TODO
  }

  @Override
  public String getName()
  {
    return getWorkflowProject().getLabel();
  }

  private String label;
  public void setLabel(String label) { this.label = label; }
  public String getLabel()
  {
    if (label == null)
      return getName() + " " + getTitle();
    else
      return label;
  }

  @Override
  public String getPath()
  {
    String path = getProjectPrefix();
    if (getWorkflowProject() != null)
      path += "Tests/";
    return path;
  }

  private String icon = "tsuite.gif";
  public void setIcon(String icon) { this.icon = icon; }
  public String getIcon()
  {
    if (icon.equals("tsuite.gif"))
    {
      if (hasErrors())
        return "tsuiteerror.gif";
      else if (hasFailures())
        return "tsuitefail.gif";
      else if (isRunning())
        return "tsuiterun.gif";
      else if (isSuccess())
        return "tsuiteok.gif";
      else
        return icon;
    }
    else
    {
      return icon;
    }
  }

  @Override
  public boolean hasInstanceInfo()
  {
    return false;
  }

  @Override
  public boolean isReadOnly()
  {
    return false;
  }

  public String getDefaultTestCasesDir()
  {
    if (workflowProject.isRemote() || workflowProject.isCloudProject())
      return workflowProject.getSourceProject().getFolder("testCases").getRawLocation().toOSString();
    else
      return workflowProject.getEarProject().getFolder("testCases").getRawLocation().toOSString();
  }

  public String getDefaultTestResultsDir()
  {
    if (workflowProject.isRemote() || workflowProject.isCloudProject())
      return workflowProject.getSourceProject().getFolder("testResults").getRawLocation().toOSString();
    else
      return workflowProject.getEarProject().getFolder("testResults").getRawLocation().toOSString();
  }

  public boolean readCases()
  {
    testCases = new ArrayList<RegressionTestCase>();
    if (testCasesDir.exists() && testCasesDir.isDirectory())
    {
      File[] caseDirs = testCasesDir.listFiles(new FileFilter()
      {
        public boolean accept(File file)
        {
          if (!file.isDirectory())
            return false;
          if (file.getName().equalsIgnoreCase("CVS") || file.getName().equals(".metadata"))
            return false;
          for (String commandsFileName : TestCase.TEST_CASE_LANGUAGES.values())
          {
            if (new File(file.toString() + "/" + commandsFileName).exists())
              return true;
          }
          return false;
        }
      });

      for (File caseDir : caseDirs)
      {
        TestCase tc = new TestCase(caseDir);
        RegressionTestCase testCase = new RegressionTestCase(getWorkflowProject(), this, tc);
        testCases.add(testCase);
      }

      File suiteResults = getTestSuiteResultsFile();
      if (suiteResults != null && suiteResults.exists())
      {
        FileInputStream inputStream = null;
        try
        {
          inputStream = new FileInputStream(suiteResults);
          InputSource src = new InputSource(inputStream);
          SAXParserFactory parserFactory = SAXParserFactory.newInstance();

          SAXParser parser = parserFactory.newSAXParser();
          parser.parse(src, new DefaultHandler()
          {
            RegressionTestCase currentTestCase = null;
            // attributes for workflow project
            public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException
            {
              if (qName.equals("testcase"))
              {
                String name = attrs.getValue("name");
                for (RegressionTestCase testCase : testCases)
                {
                  if (testCase.getName().equals(name))
                  {
                    currentTestCase = testCase;
                    String timestampStr = attrs.getValue("timestamp");
                    if (timestampStr != null)
                    {
                      Calendar cal = DatatypeConverter.parseDateTime(timestampStr);
                      testCase.setStartTime(cal.getTime());
                      String timeStr = attrs.getValue("time");
                      if (timeStr != null)
                      {
                        int ms = (int) Float.parseFloat(timeStr) * 1000;
                        cal.add(Calendar.MILLISECOND, ms);
                        testCase.setEndTime(cal.getTime());
                        testCase.setStatus(TestCase.STATUS_PASS); // assume pass
                      }
                    }
                  }
                }
              }
              else if (qName.equals("failure"))
              {
                if (currentTestCase != null)
                {
                  currentTestCase.setStatus(TestCase.STATUS_FAIL);
                  currentTestCase.setMessage(attrs.getValue("message"));
                }
              }
              else if (qName.equals("error"))
              {
                if (currentTestCase != null)
                {
                  currentTestCase.setStatus(TestCase.STATUS_ERROR);
                  currentTestCase.setMessage(attrs.getValue("message"));
                }
              }
            }
          });
        }
        catch (Exception ex)
        {
          PluginMessages.log(ex);
        }
        finally
        {
          if (inputStream != null)
          {
            try
            {
              inputStream.close();
            }
            catch (IOException ex)
            {
              PluginMessages.log(ex);
            }
          }
        }
      }

      return true;
    }
    return false;
  }

  public File getTestSuiteResultsFile()
  {
    if (getResultsDir() != null && getResultsDir().exists() && getResultsDir().isDirectory())
      return new File(getResultsDir() + "/TestSuiteResults.xml");
    else
      return null;
  }

  public File getLoadTestResultsFile()
  {
    if (getResultsDir() != null && getResultsDir().exists() && getResultsDir().isDirectory())
      return new File(getResultsDir() + "/LoadTestResults.xml");
    else
      return null;
  }

  public void clearCases()
  {
    for (RegressionTestCase testCase : testCases)
      testCase.clear();
  }

  public boolean equals(Object o)
  {
    if (!(o instanceof RegressionTestSuite) || o == null)
      return false;
    RegressionTestSuite other = (RegressionTestSuite) o;

    if (!workflowProject.equals(other.getWorkflowProject()))
      return false;

    return getName().equals(other.getName());
  }

  public void fireTestCaseStatusChange(RegressionTestCase testCase, String newStatus)
  {
    fireElementChangeEvent(testCase, ChangeType.STATUS_CHANGE, newStatus);
  }

  public void writeTestCaseResults(RegressionTestCase exeTestCase)
  {
    int errors = 0;
    int failures = 0;
    int completed = 0;

    StringBuffer suiteBuf = new StringBuffer();
    suiteBuf.append("<testsuite ");
    suiteBuf.append("name=\"").append(workflowProject.getLabel()).append("\" ");
    suiteBuf.append("tests=\"").append(workflowProject.getRegressionTestSuite().testCases.size()).append("\" ");

    StringBuffer results = new StringBuffer();
    for (RegressionTestCase testCase : workflowProject.getRegressionTestSuite().testCases)
    {
      if (exeTestCase.getName().equals(testCase.getName()))
        workflowProject.getRegressionTestSuite().fireTestCaseStatusChange(testCase, testCase.getStatus());

      results.append("  <testcase ");
      results.append("name=\"").append(testCase.getName()).append("\" ");
      Date start = testCase.getStartTime();
      if (start != null)
      {
        Calendar startCal = Calendar.getInstance();
        startCal.setTime(start);
        results.append("timestamp=\"").append(DatatypeConverter.printDateTime(startCal)).append("\" ");
        Date end = testCase.getEndTime();
        if (end != null)
        {
          long ms = end.getTime() - start.getTime();
          results.append("time=\"").append(ms/1000).append("\" ");
        }
      }
      if (testCase.isFinished())
        completed++;
      if (testCase.isErrored())
      {
        errors++;
        results.append(">\n");
        results.append("    <error ");
        if (testCase.getMessage() != null)
          results.append("message=\"").append(testCase.getMessage()).append("\" ");
        results.append("/>\n");
        results.append("  </testcase>\n");
      }
      else if (testCase.isFailed())
      {
        failures++;
        results.append(">\n");
        results.append("    <failure ");
        if (testCase.getMessage() != null)
          results.append("message=\"").append(testCase.getMessage().replaceAll("\"", "&quot;").replaceAll("\n", "&#10;")).append("\" ");
        results.append("/>\n");
        results.append("  </testcase>\n");
      }
      else
      {
        results.append("/>\n");
      }
    }
    suiteBuf.append("completed=\"").append(completed).append("\" ");
    suiteBuf.append("errors=\"").append(errors).append("\" ");
    suiteBuf.append("failures=\"").append(failures).append("\" ");
    suiteBuf.append(">\n");
    suiteBuf.append(results);
    suiteBuf.append("</testsuite>");

    try
    {
      PluginUtil.writeFile(getTestSuiteResultsFile(), suiteBuf.toString().getBytes());
    }
    catch (IOException ex)
    {
      PluginMessages.log(ex);
    }
  }

  public void writeLoadTestResults(int totalPrepared, int totalCompleted, int totalActivityStarted, int totalActivityCompleted,
      String finalStartTime, String finalEndTime,int totalProcessStarted,double speed,String resultDirectory)
  {
    StringBuffer suiteBuf = new StringBuffer();
    suiteBuf.append("<LoadTestResults>\n");
    suiteBuf.append(" <testsuite ");
    suiteBuf.append("name=\"").append(workflowProject.getLabel()).append("\" ");
    suiteBuf.append("tests=\"").append(workflowProject.getRegressionTestSuite().testCases.size())
        .append("\" ");
    suiteBuf.append(">\n");

    StringBuffer results = new StringBuffer();
    results.append("  <CasesPrepared>").append(totalPrepared).append("</CasesPrepared>\n");
    results.append("  <CasesCompleted>").append(totalCompleted).append("</CasesCompleted>\n");
    results.append("  <ProcessesStarted>").append(totalProcessStarted)
        .append("</ProcessesStarted>\n");
    results.append("  <ActivitiesStarted>").append(totalActivityStarted)
        .append("</ActivitiesStarted>\n");
    results.append("  <ActivitiesCompleted>").append(totalActivityCompleted)
        .append("</ActivitiesCompleted>\n");
    results.append("  <StartTime>").append(finalStartTime).append("</StartTime>\n");
    results.append("  <EndTime>").append(finalEndTime).append("</EndTime>\n");
    results.append("  <ActivitiesPerHour>").append(speed).append("</ActivitiesPerHour>\n");

    suiteBuf.append(results);
    suiteBuf.append(" </testsuite>\n");
    suiteBuf.append("</LoadTestResults>");

    try
    {
      PluginUtil.writeFile(getLoadTestResultsFile(), suiteBuf.toString().getBytes());
    }
    catch (IOException ex)
    {
      PluginMessages.log(ex);
    }

  }
}
