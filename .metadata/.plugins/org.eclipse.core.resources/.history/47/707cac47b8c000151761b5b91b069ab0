/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.launch;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.debug.core.ILaunch;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.model.LaunchConfigurationDelegate;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.IViewPart;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;

import com.centurylink.mdw.plugin.MdwPlugin;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase;
import com.centurylink.mdw.plugin.designer.model.RegressionTestSuite;
import com.centurylink.mdw.plugin.designer.views.RegressionTestView;
import com.centurylink.mdw.plugin.project.WorkflowProjectManager;
import com.centurylink.mdw.plugin.project.model.WorkflowProject;
import com.centurylink.mdw.designer.testing.TestCase;

public class RegressionTestLaunchConfiguration extends LaunchConfigurationDelegate
{
  public static final String WORKFLOW_PROJECT = "workflowProject";
  public static final String TEST_CASES_DIRECTORY = "testCasesDirectory";
  public static final String RESULTS_DIRECTORY = "resultsDirectory";
  public static final String THREAD_COUNT = "threadCount";
  public static final String THREAD_INTERVAL = "threadInterval";
  public static final String RUN_COUNT = "runCount";
  public static final String RUN_INTERVAL = "runInterval";
  public static final String TEST_CASES = "testCases";
  public static final String VERBOSE = "verbose";
  public static final String STUBBING = "stubbing";
  public static final String SINGLE_SERVER = "singleServer";
  public static final String IS_LOAD_TEST = "isLoadTest";
  public static final String TESTCASE_COUNTS_MAP = "testCaseCountsMap";
  public static final String LOAD_TEST = "loadTest";
  public static final String REGRESSION_TEST = "regressionTest";

  private RegressionTestSuite testSuite;

  public void launch(ILaunchConfiguration launchConfig, String mode, ILaunch launch, IProgressMonitor monitor) throws CoreException
  {
    WorkflowProject workflowProject = WorkflowProjectManager.getInstance().getWorkflowProject(launchConfig.getAttribute(WORKFLOW_PROJECT, ""));

    boolean isLoadTest = launchConfig.getAttribute(IS_LOAD_TEST, false);
    String attrPrefix = isLoadTest ? LOAD_TEST : REGRESSION_TEST;

    File testCasesDir = new File(launchConfig.getAttribute(attrPrefix + "_" + TEST_CASES_DIRECTORY, ""));

    File resultsDir = null;
    String resultsDirStr = launchConfig.getAttribute(attrPrefix + "_" + RESULTS_DIRECTORY, "");
    if (resultsDirStr.length() > 0)
      resultsDir = new File(resultsDirStr);
    else
      resultsDir = new File(testCasesDir.getParent() + "/testResults");

    int threadCount = launchConfig.getAttribute(attrPrefix + "_" + THREAD_COUNT, 5);

    int runCount = launchConfig.getAttribute(attrPrefix + "_" + RUN_COUNT, 100);
    int threadInterval = launchConfig.getAttribute(attrPrefix + "_" + THREAD_INTERVAL, 2);
    int runInterval = launchConfig.getAttribute(attrPrefix + "_" + RUN_INTERVAL, 2);
    boolean verbose = launchConfig.getAttribute(attrPrefix + "_" + VERBOSE, true);
    boolean stubbing = launchConfig.getAttribute(attrPrefix + "_" + STUBBING, false);
    boolean singleServer = launchConfig.getAttribute(attrPrefix + "_" + SINGLE_SERVER, false);

    testSuite = new RegressionTestSuite(workflowProject);
    testSuite.setTestCasesDir(testCasesDir);
    testSuite.setResultsDir(resultsDir);
    testSuite.setLoadTest(isLoadTest);
    testSuite.setThreadCount(threadCount);
    testSuite.setRunCount(runCount);
    if (isLoadTest)
      testSuite.setThreadInterval(runInterval);
    else
      testSuite.setThreadInterval(threadInterval);
    testSuite.setVerbose(verbose);
    testSuite.setStubbing(stubbing);
    testSuite.setSingleServer(singleServer);
    Map<?,?> testCaseCountsStrMap = launchConfig.getAttribute(attrPrefix + "_" + TESTCASE_COUNTS_MAP, new HashMap<String,String>());
    testSuite.setTestCaseCountsStrMap(testCaseCountsStrMap);

    if (!testSuite.getResultsDir().exists())
      testSuite.getResultsDir().mkdirs();

    List<RegressionTestCase> testCases = new ArrayList<RegressionTestCase>();
    List<?> testCasesStr = launchConfig.getAttribute(attrPrefix + "_" + TEST_CASES, new ArrayList<String>());
    testSuite.setTestCasesStr(testCasesStr);
    for (Object testCaseStr : testCasesStr)
    {
      TestCase testCase = new TestCase(new File(testCasesDir + "/" + testCaseStr));
      RegressionTestCase regressionTestCase = new RegressionTestCase(workflowProject, testSuite, testCase);
      if (!regressionTestCase.getResultsDir().exists())
        regressionTestCase.getResultsDir().mkdirs();
      testCases.add(regressionTestCase);
    }

    testSuite.setTestCases(testCases);


    showResultsView();
  }

  private void showResultsView()
  {
    MdwPlugin.getDisplay().asyncExec(new Runnable()
    {
      public void run()
      {
        IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
        try
        {
          IViewPart viewPart = page.showView("mdw.views.launch.regressionTest");
          if (viewPart != null)
          {
            RegressionTestView testView = (RegressionTestView) viewPart;
            if (testView.isLocked())
            {
              MessageDialog.openError(page.getActivePart().getSite().getShell(), "Test Exec", "A test appears to be already running. Please stop the current test or wait for it to complete before launching another one.");
              return;
            }
            testView.setTestSuite(testSuite);
            if (testSuite.isLoadTest())
              testView.runLoadTests();
            else
              testView.runTests();
          }
        }
        catch (PartInitException ex)
        {
          PluginMessages.uiError(ex, "Test Results", testSuite.getWorkflowProject());
        }
      }
    });
  }
}
