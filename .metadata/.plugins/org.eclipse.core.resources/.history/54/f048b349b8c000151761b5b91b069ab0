/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.launch;

import java.util.Arrays;
import java.util.List;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Spinner;

import com.centurylink.mdw.plugin.MdwPlugin;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase;

public class RegressionTestLaunchTab extends TestSuiteLaunchTab
{
  private Spinner threadCountSpinner;
  private Spinner threadIntervalSpinner;

  private Image image = MdwPlugin.getImageDescriptor("icons/regr_test.gif").createImage();

  @Override
  public void activated(ILaunchConfigurationWorkingCopy workingCopy)
  {
    workingCopy.setAttribute(RegressionTestLaunchConfiguration.IS_LOAD_TEST, new Boolean(false));
    super.activated(workingCopy);
  }

  public void createControl(Composite parent)
  {
    Composite composite = new Composite(parent, SWT.NONE);
    setControl(composite);

    GridLayout topLayout = new GridLayout();
    topLayout.numColumns = 2;
    composite.setLayout(topLayout);

    createWorkflowProjectSection(composite);
    createLocationsSection(composite);
    createThreadsSection(composite);
    createServerSection(composite);
    createTestCasesSection(composite);
  }

  public String getName()
  {
    return "Functional Testing";
  }

  public Image getImage()
  {
    return image;
  }

  public void initializeFrom(ILaunchConfiguration launchConfig)
  {
    super.initializeFrom(launchConfig);

    try
    {
      int threadCount = launchConfig.getAttribute(getAttrPrefix() + RegressionTestLaunchConfiguration.THREAD_COUNT, 5);
      threadCountSpinner.setSelection(threadCount);
      int threadInterval = launchConfig.getAttribute(getAttrPrefix() + RegressionTestLaunchConfiguration.THREAD_INTERVAL, 2);
      threadIntervalSpinner.setSelection(threadInterval);
    }
    catch (CoreException ex)
    {
      PluginMessages.uiError(ex, "Launch Init", getWorkflowProject());
    }
    validatePage();
  }

  public void performApply(ILaunchConfigurationWorkingCopy launchConfig)
  {
    super.performApply(launchConfig);
    launchConfig.setAttribute(getAttrPrefix() + RegressionTestLaunchConfiguration.THREAD_COUNT, threadCountSpinner.getSelection());
    launchConfig.setAttribute(getAttrPrefix() + RegressionTestLaunchConfiguration.THREAD_INTERVAL, threadIntervalSpinner.getSelection());
  }

  public void setDefaults(ILaunchConfigurationWorkingCopy launchConfig)
  {
    launchConfig.setAttribute(getAttrPrefix() + RegressionTestLaunchConfiguration.THREAD_COUNT, 5);
    launchConfig.setAttribute(getAttrPrefix() + RegressionTestLaunchConfiguration.THREAD_INTERVAL, 2);
  }

  private void createThreadsSection(Composite parent)
  {
    Group threadsGroup = new Group(parent, SWT.NONE);
    threadsGroup.setText("Threads");
    GridLayout gl = new GridLayout();
    gl.numColumns = 5;
    threadsGroup.setLayout(gl);
    GridData gd = new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.HORIZONTAL_ALIGN_FILL);
    gd.horizontalSpan = 2;
    threadsGroup.setLayoutData(gd);

    new Label(threadsGroup, SWT.NONE).setText("Thread Count");
    threadCountSpinner = new Spinner(threadsGroup, SWT.BORDER);
    threadCountSpinner.setMinimum(1);
    threadCountSpinner.setMaximum(20);
    threadCountSpinner.setIncrement(1);
    threadCountSpinner.addSelectionListener(new SelectionAdapter()
    {
      public void widgetSelected(SelectionEvent e)
      {
        setDirty(true);
        validatePage();
      }
    });

    Label spacer = new Label(threadsGroup, SWT.NONE);
    gd = new GridData(GridData.CENTER);
    gd.widthHint = 20;
    spacer.setLayoutData(gd);

    new Label(threadsGroup, SWT.NONE).setText("Interval (Seconds)");
    threadIntervalSpinner = new Spinner(threadsGroup, SWT.BORDER);
    threadIntervalSpinner.setMinimum(1);
    threadIntervalSpinner.setMaximum(20);
    threadIntervalSpinner.setIncrement(1);
    threadIntervalSpinner.addSelectionListener(new SelectionAdapter()
    {
      public void widgetSelected(SelectionEvent e)
      {
        setDirty(true);
        validatePage();
      }
    });
  }

  public void dispose()
  {
    super.dispose();
    image.dispose();
  }

  protected String getAttrPrefix()
  {
    return RegressionTestLaunchConfiguration.REGRESSION_TEST + "_";
  }

  protected void validatePage()
  {
    super.validatePage();

    if (getErrorMessage() == null)
    {
      List<String> selectedCases = Arrays.asList(getTestCases());
      boolean hasNonGherkin = false;
      boolean hasGherkin = false;
      // warn if mixed launch
      for (RegressionTestCase regressionTestCase: getWorkflowProject().getRegressionTestSuite().getTestCases())
      {
        if (selectedCases.contains(regressionTestCase.getName()))
        {
          if (regressionTestCase.isGherkin())
            hasGherkin = true;
          else
            hasNonGherkin = true;
        }
      }
      if (hasGherkin && hasNonGherkin)
      {
        setErrorMessage("Mixed Gherkin/non-Gherkin test selections not currently supported.");
      }
      else
      {
        setErrorMessage(null);
      }
      updateLaunchConfigurationDialog();
    }
  }
}
