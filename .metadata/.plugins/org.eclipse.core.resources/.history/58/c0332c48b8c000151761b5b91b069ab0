/**
 * Copyright (c) 2015 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.designer.wizards;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.viewers.ILabelProviderListener;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.m2e.core.MavenPlugin;
import org.eclipse.m2e.core.project.IProjectConfigurationManager;
import org.eclipse.m2e.core.project.ResolverConfiguration;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.IImportWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.dialogs.ListSelectionDialog;

import com.centurylink.mdw.designer.testing.TestCase;
import com.centurylink.mdw.plugin.MdwPlugin;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.PluginUtil;
import com.centurylink.mdw.plugin.codegen.Generator;
import com.centurylink.mdw.plugin.codegen.JetAccess;
import com.centurylink.mdw.plugin.codegen.JetConfig;
import com.centurylink.mdw.plugin.designer.DesignerPerspective;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase;
import com.centurylink.mdw.plugin.designer.model.RegressionTestSuite;
import com.centurylink.mdw.plugin.designer.model.WorkflowElement;
import com.centurylink.mdw.plugin.project.WorkflowProjectManager;
import com.centurylink.mdw.plugin.project.assembly.ProjectConfigurator;
import com.centurylink.mdw.plugin.project.model.WorkflowProject;

public class ImportTestCaseWizard extends Wizard implements IImportWizard
{
  public static final String WEBLOGIC_SUITES_TOKEN = "<A HREF=\"";
  public static final String WEBLOGIC_SUITES_END = "/\">";
  public static final String APACHE_SUITES_TOKEN = "<li><a href=\"";
  public static final String APACHE_SUITES_END = "/\">";
  public static final String TOMCAT_SUITES_TOKEN = "<a href=\"/Discovery/Regression%20Test%20Suites/";
  public static final String TOMCAT_SUITES_END = "/\">";
  public static final String SHAREPOINT_SUITES_TOKEN = "escapeProperly\\(&quot;/sites/MDW/Releases/Regression Test Suites/";
  public static final String SHAREPOINT_SUITES_END = "&quot;\\)";

  private RegressionTestSuite testSuite;
  public RegressionTestSuite getTestSuite() { return testSuite; }

  private String importLocation;
  public String getImportLocation() { return importLocation; }
  public void setImportLocation(String loc) { this.importLocation = loc; }

  private ImportTestCasePage importTestCasePage;
  private ImportTestCaseSelectPage importTestCaseSelectPage;
  public ImportTestCaseSelectPage getTestCaseSelectPage() { return importTestCaseSelectPage; }

  private String testSuiteName;
  public String getTestSuiteName() { return testSuiteName; }
  public void setTestSuiteName(String name) { this.testSuiteName = name; }

  private List<String> testCaseList;
  public List<String> getTestCaseList() { return testCaseList; }
  public void setTestCaseList(List<String> testCases) { this.testCaseList = testCases; }

  private List<String> testCasesToImport;
  public List<String> getTestCasesToImport() { return testCasesToImport; }
  public void setTestCasesToImport(List<String> cases) { this.testCasesToImport = cases; }

  private IWorkbenchWindow activeWindow;

  public enum TestSuitePageFormat {
    Apache,
    SharePoint,
    Tomcat,
    WebLogic
  }
  private TestSuitePageFormat pageFormat = TestSuitePageFormat.Tomcat;
  public TestSuitePageFormat getPageFormat() { return pageFormat; }
  public void setPageFormat(TestSuitePageFormat format) { this.pageFormat = format; }
  private boolean isGherkin = false;


  public void init(IWorkbench workbench, IStructuredSelection selection)
  {
    setDefaultPageImageDescriptor(MdwPlugin.getImageDescriptor("icons/mdw_wiz.png"));
    setNeedsProgressMonitor(true);
    activeWindow = workbench.getActiveWorkbenchWindow();

    WorkflowProject workflowProject = null;

    if (selection != null)
    {
      if (selection.getFirstElement() instanceof WorkflowProject)
      {
        workflowProject = (WorkflowProject) selection.getFirstElement();
      }
      else if (selection.getFirstElement() instanceof WorkflowElement)
      {
        workflowProject = ((WorkflowElement)selection.getFirstElement()).getWorkflowProject();
      }
      else
      {
        WorkflowProject wfp = WorkflowProjectManager.getInstance().findWorkflowProject(selection);
        if (wfp != null)
          workflowProject = wfp;
      }
    }

    testSuite = new RegressionTestSuite(workflowProject);
  }

  @Override
  public boolean performFinish()
  {
    List<String> existingCasesToOverwrite = new ArrayList<String>();

    for (String testCaseName : getTestCasesToImport())
    {
      boolean alreadyInProject = false;
      for (RegressionTestCase existingCase : getTestSuite().getTestCases())
      {
        if (existingCase.getName().equals(testCaseName))
        {
          alreadyInProject = true;
          break;
        }
      }
      if (alreadyInProject)
        existingCasesToOverwrite.add(testCaseName);
    }

    try
    {
      if (!existingCasesToOverwrite.isEmpty())
      {
        String text = "Please confirm that the following test cases should be overwritten:";
        ListSelectionDialog lsd = new ListSelectionDialog(getShell(), existingCasesToOverwrite, new ExistingTestCaseContentProvider(), new TestCaseLabelProvider(), text);
        lsd.setTitle("Existing Test Cases");
        lsd.setInitialSelections(existingCasesToOverwrite.toArray(new String[0]));
        lsd.open();
        Object[] results = (Object[]) lsd.getResult();
        if (results == null)
          return false;

        for (String existing : existingCasesToOverwrite)
        {
          boolean include = false;
          for (Object included : results)
          {
            if (existing.equals((String)included))
              include = true;
          }
          if (include)
          {
            File tcDir = new File(getTestSuite().getTestCasesDir() + "/" + existing);
            PluginUtil.deleteDirectory(tcDir);
          }
          else
          {
            testCasesToImport.remove(existing);
          }
        }
      }

      if (testCasesToImport.isEmpty())
      {
        MessageDialog.openInformation(getShell(), "Import Test Cases", "No test cases to import.");
        return true;
      }

      getContainer().run(true, true, new IRunnableWithProgress()
      {
        public void run(IProgressMonitor monitor) throws InvocationTargetException
        {
          try
          {
            if (importLocation.startsWith("http"))
            {
              downloadTestCases(monitor);
            }
            else
            {
              copyTestCases(monitor);
            }
            if (isGherkin)
              convertToCucumberProject(monitor);
            testSuite.getWorkflowProject().refreshRegressionTestSuite();
          }
          catch (Exception ex)
          {
            throw new InvocationTargetException(ex);
          }
        }
      });
    }
    catch (InterruptedException ex)
    {
      MessageDialog.openInformation(getShell(), "Import Test Cases", "Import cancelled.");
    }
    catch (Exception ex)
    {
      PluginMessages.uiError(getShell(), ex, "Import Test Cases", getTestSuite().getWorkflowProject());
    }

    DesignerPerspective.promptForShowPerspective(activeWindow, getTestSuite());
    return true;
  }

  @Override
  public void addPages()
  {
    importTestCasePage = new ImportTestCasePage();
    addPage(importTestCasePage);
    importTestCaseSelectPage = new ImportTestCaseSelectPage();
    addPage(importTestCaseSelectPage);
  }

  public void initializeTestCaseSelectPage()
  {
    importTestCaseSelectPage.initialize();
  }


  class ExistingTestCaseContentProvider implements IStructuredContentProvider
  {
    @SuppressWarnings("unchecked")
    public Object[] getElements(Object inputElement)
    {
      List<String> testCases = (List<String>) inputElement;
      return testCases.toArray(new String[0]);
    }

    public void dispose()
    {
    }

    public void inputChanged(Viewer viewer, Object oldInput, Object newInput)
    {
    }
  }

  class TestCaseLabelProvider implements ILabelProvider
  {
    ImageDescriptor descriptor = MdwPlugin.getImageDescriptor("icons/test.gif");
    Image image;

    public TestCaseLabelProvider()
    {
      image = descriptor.createImage();
    }

    public Image getImage(Object element)
    {
      return image;
    }

    public String getText(Object element)
    {
      return (String)element;
    }

    public void addListener(ILabelProviderListener listener)
    {
    }

    public void dispose()
    {
      if (image != null)
        image.dispose();
    }

    public boolean isLabelProperty(Object element, String property)
    {
      return false;
    }

    public void removeListener(ILabelProviderListener listener)
    {
    }
  }

  public void downloadTestCases(IProgressMonitor monitor) throws IOException
  {
    monitor.beginTask("Downloading Test Case Artifacts", testCasesToImport.size() + 1);
    monitor.worked(1);

    for (String caseName : testCasesToImport)
    {
      String escapedCaseName = caseName.replaceAll(" ", "%20");
      URL caseUrl = new URL(getImportLocation() + "/" + escapedCaseName);
      String casePage = PluginUtil.downloadContent(caseUrl);

      String artifactsToken = TOMCAT_SUITES_TOKEN;  // assume tomcat
      String endToken = "\"";
      if (pageFormat == TestSuitePageFormat.WebLogic)
        artifactsToken = WEBLOGIC_SUITES_TOKEN;
      if (pageFormat == TestSuitePageFormat.Apache)
        artifactsToken = APACHE_SUITES_TOKEN;
      if (pageFormat == TestSuitePageFormat.SharePoint)
        artifactsToken = "href=\"/sites/MDW/Releases/Regression Test Suites/" + testSuiteName + "/" + caseName + "/";

      Pattern artifactsPattern = Pattern.compile(artifactsToken + ".*?" + endToken);
      Matcher matcher = artifactsPattern.matcher(casePage);
      while (matcher.find())
      {
        String match = matcher.group();
        String artifactName = match.substring(artifactsToken.replaceAll("\\\\", "").length(), match.length() - endToken.replaceAll("\\\\", "").length());
        artifactName = artifactName.replaceAll("%20", " ");
        if (!artifactName.equalsIgnoreCase("CVS") && !artifactName.equals(".metadata") && !artifactName.contains("Regression Test Suites") && !artifactName.startsWith("?") && !artifactName.equals(getTestSuiteName() + "/"))
        {
          String caseSuitePath = getTestSuiteName().replaceAll("%20", " ") + "/" + caseName + "/";
          if (artifactName.startsWith(caseSuitePath))
            artifactName = artifactName.substring(caseSuitePath.length());
          String artifactUrl = caseUrl + "/" + artifactName.replaceAll(" ", "%20");
          String artifactLoc = getTestSuite().getTestCasesDir() + "/" + caseName + "/" + artifactName;
          monitor.subTask(caseName + "/" + artifactName);
          new File(getTestSuite().getTestCasesDir() + "/" + caseName).mkdirs();
          PluginUtil.downloadToFile(new URL(artifactUrl), new File(artifactLoc));
          if (!isGherkin && new File(getTestSuite().getTestCasesDir() + "/" + caseName + "/" + TestCase.TEST_CASE_LANGUAGES.get(TestCase.LANGUAGE_GHERKIN)).exists())
            isGherkin = true;
        }
      }
      monitor.worked(1);
    }
    monitor.done();
  }

  /*
   * This function copies steps.groovy if there are gherkin test cases in imported test cases
   *
   * */
  private void convertToCucumberProject(IProgressMonitor monitor) throws Exception
  {
    File stepsDotGroovy = new File(getTestSuite().getTestCasesDir() + "/steps.groovy");
    if (!stepsDotGroovy.exists())
    {
      // create from template
      URL localUrl = PluginUtil.getLocalResourceUrl("templates/test/steps.groovy");
      File templateFile = new File(new URI(localUrl.toString()));
      PluginUtil.writeFile(stepsDotGroovy, PluginUtil.readFile(templateFile));
      getTestSuite().getTestCasesFolder().refreshLocal(IResource.DEPTH_ONE, new NullProgressMonitor());
    }
    //Caution: This code is doing pom.xml replacement every time a gherkin testCases are imported.
    if (getTestSuite().getWorkflowProject().isRemote()) { // for local project we could add a sample_pom.xml which will have all cucumber dependencies
      ProjectConfigurator projConf = new ProjectConfigurator(getTestSuite().getWorkflowProject(), MdwPlugin.getSettings());
      projConf.setJava(monitor);
      // pom.xml
      IProject sourceProject = getTestSuite().getWorkflowProject().getSourceProject();
      Generator generator = new Generator(null);

      String template = getTestSuite().getWorkflowProject().checkRequiredVersion(5, 5) ? "cucumber/remote_pom.xmljet" : "cucumber/52/remote_pom.xmljet";
      JetAccess jet = getJet(template, sourceProject, "pom.xml");
      generator.createFile(jet, monitor);
      addMavenNature(monitor);  // force maven refresh
    }
  }
  protected JetAccess getJet(String jetFile, IProject targetProject, String targetPath)
  {
    JetConfig jetConfig = new JetConfig();
    jetConfig.setModel(getTestSuite().getWorkflowProject());
    jetConfig.setSettings(MdwPlugin.getSettings());
    jetConfig.setPluginId(MdwPlugin.getPluginId());
    jetConfig.setTargetFolder(targetProject.getName());
    jetConfig.setTargetFile(targetPath);
    jetConfig.setTemplateRelativeUri("templates/" + jetFile);
    return new JetAccess(jetConfig);
  }
  @SuppressWarnings("deprecation")
  public void addMavenNature(IProgressMonitor monitor) throws CoreException
  {
    ResolverConfiguration configuration = new ResolverConfiguration();
    configuration.setResolveWorkspaceProjects(false);
    configuration.setActiveProfiles("");

    IProjectConfigurationManager configurationManager = MavenPlugin.getProjectConfigurationManager();
    configurationManager.enableMavenNature(getTestSuite().getWorkflowProject().getSourceProject(), configuration, monitor);
    configurationManager.updateProjectConfiguration(getTestSuite().getWorkflowProject().getSourceProject(), monitor);
  }

  public void copyTestCases(IProgressMonitor monitor) throws IOException
  {
    monitor.beginTask("Copying Test Case Artifact", testCasesToImport.size() + 1);
    monitor.worked(1);

    File sourceSuiteDir = new File(importLocation);

    for (String caseName : testCasesToImport)
    {
      File sourceCaseDir = new File(sourceSuiteDir + "/" + caseName);
      for (File artifactFile : sourceCaseDir.listFiles())
      {
        String artifactName = artifactFile.getName();
        if (!artifactFile.isDirectory() && !artifactName.equalsIgnoreCase("CVS") && !artifactName.equals(".metadata"))
        {
          String artifactLoc = getTestSuite().getTestCasesDir() + "/" + caseName + "/" + artifactName;
          monitor.subTask(caseName + "/" + artifactName);
          new File(getTestSuite().getTestCasesDir() + "/" + caseName).mkdirs();
          PluginUtil.copyFile(artifactFile, new File(artifactLoc));
          if (!isGherkin && new File(getTestSuite().getTestCasesDir() + "/" + caseName + "/" + TestCase.TEST_CASE_LANGUAGES.get(TestCase.LANGUAGE_GHERKIN)).exists())
            isGherkin = true;
        }
      }
    }
    monitor.done();
  }
}
