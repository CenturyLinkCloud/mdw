/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.designer.views;

import java.io.File;

import org.eclipse.core.resources.IFile;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.GroupMarker;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.actions.ActionGroup;

import com.centurylink.mdw.designer.testing.TestFile;
import com.centurylink.mdw.designer.testing.TestFileLine;
import com.centurylink.mdw.model.value.process.ProcessInstanceVO;
import com.centurylink.mdw.model.value.process.ProcessVO;
import com.centurylink.mdw.plugin.MdwPlugin;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.actions.WorkflowElementActionHandler;
import com.centurylink.mdw.plugin.designer.model.ProcessVersion;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase.ExpectedResult;
import com.centurylink.mdw.plugin.designer.model.RegressionTestSuite;
import com.centurylink.mdw.plugin.designer.model.WorkflowElement;
import com.centurylink.mdw.plugin.project.model.WorkflowProject;

public class RegressionTestActionGroup extends ActionGroup
{
  private RegressionTestView view;
  private WorkflowElementActionHandler actionHandler;
  public WorkflowElementActionHandler getActionHandler() { return actionHandler; }

  private IAction rerunAction;
  public IAction getRerunAction() { return rerunAction; }

  private IAction rerunSelectionAction;
  public IAction getRerunSelectionAction() { return rerunSelectionAction; }

  private IAction stopAction;
  public IAction getStopAction() { return stopAction; }

  private IAction formatRegressionTestResultsAction;
  public IAction getFormatRegressionTestResultsAction() { return formatRegressionTestResultsAction; }

  private IAction formatLoadTestResultsAction;
  public IAction getFormatLoadTestResultsAction() { return formatLoadTestResultsAction; }

  private IAction compareResultsAction;
  public IAction getCompareResultsAction() { return compareResultsAction; }

  private IAction openProcessInstanceAction;
  public IAction getOpenProcessInstanceAction() { return openProcessInstanceAction; }

  private IAction openCommandsAction;
  public IAction getOpenCommandsAction() { return openCommandsAction; }

  private IAction openExpectedAction;
  public IAction getOpenExpectedAction() { return openExpectedAction; }


  public RegressionTestActionGroup(RegressionTestView view)
  {
    this.view = view;

    rerunAction = createRerunAction();
    enableRerunAction(false);
    rerunSelectionAction = createRerunSelectionAction();
    stopAction = createStopAction();
    enableStopAction(false);
    formatRegressionTestResultsAction = createFormatRegressionTestResultsAction();
    formatLoadTestResultsAction = createFormatLoadTestResultsAction();
    enableFormatRegressionTestResults(false);
    enableFormatLoadTestResults(false);
    openCommandsAction = createOpenCommandsAction();
    openExpectedAction = createOpenExpectedAction();
    compareResultsAction = createCompareResultsAction();
    openProcessInstanceAction = createOpenProcessInstanceAction();

    actionHandler = new WorkflowElementActionHandler();
  }

  public void enableRerunAction(boolean enabled)
  {
    rerunAction.setEnabled(enabled);
  }

  public void enableStopAction(boolean enabled)
  {
    stopAction.setEnabled(enabled);
  }

  public void enableFormatRegressionTestResults(boolean enabled)
  {
    formatRegressionTestResultsAction.setEnabled(enabled);
  }

  public void enableFormatLoadTestResults(boolean enabled)
  {
    formatLoadTestResultsAction.setEnabled(enabled);
  }

  private IAction createRerunAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        view.handleRerun();
      }
    };
    action.setText("Rerun Test(s)");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/rerun.gif");
    action.setImageDescriptor(imageDesc);
    ImageDescriptor disabledImageDesc = MdwPlugin.getImageDescriptor("icons/rerun_disabled.gif");
    action.setDisabledImageDescriptor(disabledImageDesc);
    return action;
  }

  private IAction createRerunSelectionAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        view.handleRerunSelection();
      }
    };
    action.setText("Rerun Test(s)");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/rerun.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  private IAction createStopAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        view.handleStop();
      }
    };
    action.setText("Stop Test(s)");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/stop.gif");
    action.setImageDescriptor(imageDesc);
    ImageDescriptor disabledImageDesc = MdwPlugin.getImageDescriptor("icons/stop_disabled.gif");
    action.setDisabledImageDescriptor(disabledImageDesc);
    return action;
  }

  private IAction createFormatRegressionTestResultsAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        view.setTestSuite(view.getTestSuite().getWorkflowProject().getRegressionTestSuite());
        view.formatResults();
      }
    };
    action.setText("Format Regression Test Results");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/regr_test.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  private IAction createFormatLoadTestResultsAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        view.setLoadTestSuite(view.getLoadTestSuite().getWorkflowProject().getRegressionTestSuite());
        view.formatLoadTestResults();
      }
    };
    action.setText("Format Load Test Results");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/load_test.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  private IAction createOpenCommandsAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        if (openCommandsApplies(view.getSelectedItem()))
          actionHandler.open(view.getSelectedItem());
      }
    };
    action.setText("Open Command File");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/test.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  private IAction createOpenExpectedAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        if (openExpectedApplies(view.getSelectedItem()))
          actionHandler.open(view.getSelectedItem());
      }
    };
    action.setText("Open Expected Results");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/result.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  private IAction createCompareResultsAction()
  {
    IAction action = new Action()
    {
      @SuppressWarnings("restriction")
      public void run()
      {
        if (compareResultsApplies(view.getSelectedItem()))
        {
          ExpectedResult expectedResult = (ExpectedResult) view.getSelectedItem();
          Object[] items = new Object[2];
          items[0] = expectedResult.getExpectedResult();
          items[1] = expectedResult.getActualResult();
          if (items[1] == null || !((IFile)items[1]).exists())
          {
            MessageDialog.openWarning(view.getSite().getShell(), "No Results", "Unable to locate results file: " + ((IFile)items[1]).getLocation().toOSString());
            return;
          }
          StructuredSelection compareSelection = new StructuredSelection(items);
          ResultsCompareAction compareAction = new ResultsCompareAction(compareSelection);
          compareAction.run(compareSelection);
        }
      }
    };
    action.setText("Compare Results");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/compare.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  private IAction createOpenProcessInstanceAction()
  {
    IAction action = new Action()
    {
      public void run()
      {
        if (openProcessInstanceApplies(view.getSelectedItem()))
        {
          ExpectedResult expectedResult = (ExpectedResult) view.getSelectedItem();
          File resultsFile = expectedResult.getActualResultFile();
          if (resultsFile == null || !resultsFile.exists())
          {
            MessageDialog.openWarning(view.getSite().getShell(), "No Results", "Unable to locate results file: " + resultsFile);
            return;
          }
          try
          {
            TestFile testFile = new TestFile(null, resultsFile.getPath());
            testFile.load();
            TestFileLine line1 = testFile.getLines().get(0);
            Long procInstId = new Long(line1.getWord(3));
            WorkflowProject project = expectedResult.getWorkflowProject();
            ProcessInstanceVO procInst = project.getDataAccess().getProcessInstance(procInstId);
            Long processId = procInst.getProcessId();
            ProcessVO procVO = project.getProcessVersion(processId).getProcessVO();
            if (procVO == null)
              PluginMessages.uiError("Unable to locate process: " + processId, "Open Process Instance", project);
            ProcessVersion instance = new ProcessVersion(project, procVO);
            instance.setProcessInstance(procInst);
            actionHandler.open(instance);
          }
          catch (Exception ex)
          {
            PluginMessages.uiError(ex, "Open Process Instance", expectedResult.getWorkflowProject());
          }
        }
      }
    };
    action.setText("Open Process Instance");
    ImageDescriptor imageDesc = MdwPlugin.getImageDescriptor("icons/process.gif");
    action.setImageDescriptor(imageDesc);
    return action;
  }

  @Override
  public void fillActionBars(IActionBars actionBars)
  {
    super.fillActionBars(actionBars);
    IToolBarManager toolbar = actionBars.getToolBarManager();
    toolbar.add(new GroupMarker("mdw.toolbox.group"));
    toolbar.add(rerunAction);
    toolbar.add(stopAction);
    toolbar.add(formatRegressionTestResultsAction);
    toolbar.add(formatLoadTestResultsAction);
  }

  @Override
  public void fillContextMenu(IMenuManager menu)
  {
    final WorkflowElement selection = view.getSelectedItem();
    if (selection == null)
      return;

    // open commands
    if (openCommandsApplies(selection))
      menu.add(openCommandsAction);

    // rerun tests
    if (rerunApplies(selection))
      menu.add(rerunSelectionAction);

    // open expected
    if (openExpectedApplies(selection))
      menu.add(openExpectedAction);

    // compare results with expected
    if (compareResultsApplies(selection))
      menu.add(compareResultsAction);

    // open process instance
    if (openProcessInstanceApplies(selection))
      menu.add(openProcessInstanceAction);
  }

  public boolean openCommandsApplies(WorkflowElement selection)
  {
    if (selection instanceof RegressionTestCase)
      return true;
    else
      return false;
  }

  public boolean rerunApplies(WorkflowElement selection)
  {
    if (selection instanceof RegressionTestSuite)
    {
      RegressionTestSuite testSuite = (RegressionTestSuite) selection;
      return !testSuite.isRunning();
    }
    else if (selection instanceof RegressionTestCase)
    {
      RegressionTestCase testCase = (RegressionTestCase) selection;
      return !testCase.getTestSuite().isRunning();
    }
    else if (selection instanceof ExpectedResult)
    {
      ExpectedResult expectedResult = (ExpectedResult) selection.getFirstElement();
      return !expectedResult.getTestCase().getTestSuite().isRunning();
    }
    return false;
  }

  public boolean openExpectedApplies(WorkflowElement selection)
  {
    if (selection instanceof ExpectedResult)
      return true;
    else
      return false;
  }

  public boolean compareResultsApplies(IStructuredSelection selection)
  {
    if (selection.size() == 1)
    {
      if (selection.getFirstElement() instanceof ExpectedResult)
      {
        ExpectedResult expectedResult = (ExpectedResult) selection.getFirstElement();
        return !expectedResult.getTestCase().isRunning() && expectedResult.getActualResult().exists();
      }
    }
    return false;
  }

  public boolean openProcessInstanceApplies(WorkflowElement selection)
  {
      if (selection.size() == 1)
      {
        if (selection.getFirstElement() instanceof ExpectedResult)
        {
          ExpectedResult expectedResult = (ExpectedResult) selection.getFirstElement();
          return !expectedResult.getTestCase().isRunning() && expectedResult.getActualResult().exists();
        }
      }
      return false;
  }

  @SuppressWarnings("restriction")
  class ResultsCompareAction extends org.eclipse.compare.internal.CompareAction
  {
    public ResultsCompareAction(ISelection selection)
    {
      // prime the pump
      super.isEnabled(selection);
      setActivePart(compareResultsAction, view.getViewSite().getPart());
    }
  }

}