/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.designer.model;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;

import com.centurylink.mdw.designer.testing.TestCase;
import com.centurylink.mdw.designer.testing.TestCaseRun;
import com.centurylink.mdw.model.value.user.UserActionVO.Entity;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.project.model.WorkflowProject;

public class RegressionTestCase extends WorkflowElement
{
  private WorkflowProject workflowProject;
  public WorkflowProject getWorkflowProject() { return workflowProject; }
  public void setWorkflowProject(WorkflowProject workflowProject)
  {
    testSuite.setWorkflowProject(workflowProject);
    this.workflowProject = workflowProject;
  }

  private TestCase testCase;
  public TestCase getTestCase() { return testCase; }
  public void setTestCase(TestCase testCase)
  {
    this.testCase = testCase;

    expectedResults = new ArrayList<ExpectedResult>();
    files = new ArrayList<com.centurylink.mdw.plugin.designer.model.File>();

    if (getTestCasesDir() != null)
    {
      File[] testCaseFiles = getTestCasesDir().listFiles();
      if (testCaseFiles != null)
      {
        for (File file : getTestCasesDir().listFiles())
        {
          if (file.getName().startsWith("E_"))
            expectedResults.add(new ExpectedResult(file));
          else if (!TestCase.TEST_CASE_LANGUAGES.values().contains(file.getName()) && !file.isDirectory())
            files.add(new com.centurylink.mdw.plugin.designer.model.File(getWorkflowProject(), this, getTestCaseFolder().getFile(file.getName())));
        }
        Collections.sort(expectedResults);
        Collections.sort(files);
      }
    }
  }

  private RegressionTestSuite testSuite;
  public RegressionTestSuite getTestSuite() { return testSuite; }

  private List<ExpectedResult> expectedResults;
  public List<ExpectedResult> getExpectedResults() { return expectedResults; }

  private List<com.centurylink.mdw.plugin.designer.model.File> files = new ArrayList<com.centurylink.mdw.plugin.designer.model.File>();
  public List<com.centurylink.mdw.plugin.designer.model.File> getFiles() { return files; }

  public Entity getActionEntity()
  {
    return Entity.TestCase;
  }

  public RegressionTestCase(RegressionTestSuite testSuite)
  {
    this.testSuite = testSuite;
  }
  public RegressionTestCase(WorkflowProject workflowProject, RegressionTestSuite testSuite, TestCase testCase)
  {
    this.workflowProject = workflowProject;
    this.testSuite = testSuite;

    setTestCase(testCase);
  }

  public String getMasterRequestId()
  {
    return testCase.getMasterRequestId();
  }

  public void setMasterRequestId(String masterRequestId)
  {
    testCase.setMasterRequestId(masterRequestId);
  }

  public boolean isLoadTest()
  {
    return testSuite.isLoadTest();
  }

  public String getLabel()
  {
    return getName();  // TODO append completion time
  }

  @Override
  public String getPath()
  {
    String path = getProjectPrefix();
    if (getWorkflowProject() != null)
      path += "Tests/" + getName();
    return path;
  }

  @Override
  public String getName()
  {
    if (testCase == null)
      return null;
    return testCase.getCaseName();
  }

  @Override
  public String getIcon()
  {
    if (isErrored())
      return "testerr.gif";
    else if (isFailed())
      return "testfail.gif";
    else if (isRunning())
      return "testrun.gif";
    else if (isSuccess())
      return "testok.gif";
    else
      return "test.gif";
  }

  public File getTestCaseDirectory()
  {
    return testCase.getCaseDirectory();
  }

  public String getLanguage()
  {
    return testCase.getLanguage();
  }

  public String getStatus()
  {
    return testCase.getStatus();
  }

  public void setStatus(String status)
  {
    testCase.setStatus(status);
  }

  public Date getStartTime()
  {
    return testCase.getStartDate();
  }

  public void setStartTime(Date start)
  {
    testCase.setStartDate(start);
  }

  public Date getEndTime()
  {
    return testCase.getEndDate();
  }

  public void setEndTime(Date end)
  {
    testCase.setEndDate(end);
  }

  public int getTotalSteps()
  {
    return testCase.getTotalSteps();
  }

  public int getStepsCompleted()
  {
    if (testCase.getFirstRun() == null)
      return 0;
    return testCase.getFirstRun().getStepsCompleted();
  }

  public boolean isErrored()
  {
    return testCase.getStatus().equals(TestCase.STATUS_ERROR);
  }

  public void setErrored()
  {
    testCase.setStatus(TestCase.STATUS_ERROR);
  }

  public boolean isFailed()
  {
    return testCase.getStatus().equals(TestCase.STATUS_FAIL);
  }

  public boolean isSuccess()
  {
    return testCase.getStatus().equals(TestCase.STATUS_PASS);
  }

  public boolean isRunning()
  {
    return testCase.getStatus().equals(TestCase.STATUS_RUNNING);
  }

  public boolean isWaiting()
  {
    return testCase.getStatus().equals(TestCase.STATUS_WAITING);
  }

  public boolean isStopped()
  {
    return testCase.getStatus().equals(TestCase.STATUS_STOP);
  }

  public boolean isFinished()
  {
    return !isWaiting() && !isRunning() && !testCase.getStatus().equals(TestCase.STATUS_NOT_RUN);
  }

  private String message;

  public String getMessage()
  {
    if (testCase.getMessage() == null)
      return message;
    else
      return testCase.getMessage();
  }

  public void setMessage(String message)
  {
    this.message = message;
    TestCaseRun firstRun = testCase.getFirstRun();
    if (firstRun != null)
      firstRun.setMessage(message);
  }

  public File getResultsDir()
  {
    if (testSuite == null || testSuite.getResultsDir() == null)
      return null;
    return new File(testSuite.getResultsDir().toString() + "/" + getName());
  }

  public File getTestCasesDir()
  {
    if (testSuite == null || testSuite.getTestCasesDir() == null)
      return null;
    return new File(testSuite.getTestCasesDir().toString() + "/" + getName());
  }

  public IFile getCommandsFile()
  {
    return getExpectedResultsFolder().getFile(testCase.getCommandsFileName());
  }

  public boolean isGroovy()
  {
    return TestCase.LANGUAGE_GROOVY.equals(getLanguage());
  }

  public boolean isGherkin()
  {
    return TestCase.LANGUAGE_GHERKIN.equals(getLanguage());
  }

  public File getOutputFile()
  {
    if (getResultsDir() == null)
      return null;
    return new File(getResultsDir().getPath() + "/execute.log");
  }

  public IFolder getTestCaseFolder()
  {
    String testCaseDir = getTestCasesDir().toString();
    String projectDir = workflowProject.getProjectDir().toString();
    String relativePath = testCaseDir.substring(projectDir.length() + 1).replace('\\', '/');
    if (workflowProject.isRemote() || workflowProject.isCloudProject())
      return workflowProject.getSourceProject().getFolder(relativePath);
    else
      return workflowProject.getEarProject().getFolder(relativePath);
  }

  public IFolder getActualResultsFolder()
  {
    String resultsDir = getResultsDir().toString();
    String projectDir = workflowProject.getProjectDir().toString();
    String relativePath = resultsDir.substring(projectDir.length() + 1).replace('\\', '/');
    if (workflowProject.isRemote() || workflowProject.isCloudProject())
      return workflowProject.getSourceProject().getFolder(relativePath);
    else
      return workflowProject.getEarProject().getFolder(relativePath);
  }

  public IFolder getExpectedResultsFolder()
  {
    return getTestCaseFolder();
  }

  public void clear()
  {
    testCase.clear();
  }

  @Override
  public String getTitle()
  {
    return "Test Case";
  }

  @Override
  public Long getId()
  {
    return new Long(-1); // TODO
  }

  @Override
  public boolean hasInstanceInfo()
  {
    return false;
  }

  @Override
  public boolean isReadOnly()
  {
    return false;
  }

  public boolean isLocal()
  {
    return true;
  }

  public boolean equals(Object o)
  {
    if (!(o instanceof RegressionTestCase) || o == null)
      return false;
    RegressionTestCase other = (RegressionTestCase) o;

    if (!workflowProject.equals(other.getWorkflowProject()))
      return false;

    return getName().equals(other.getName());
  }

  public class ExpectedResult extends WorkflowElement implements Comparable<ExpectedResult>
  {
    private File expectedResultFile;
    public File getExpectedResultFile() { return expectedResultFile; }

    public ExpectedResult(File expectedResultFile)
    {
      this.expectedResultFile = expectedResultFile;
    }

    public String getTitle()
    {
      return "Expected Result";
    }

    @Override
    public WorkflowProject getWorkflowProject()
    {
      return RegressionTestCase.this.getWorkflowProject();
    }

    public String getName()
    {
      return getExpectedResultFileName().substring(2, getExpectedResultFileName().length() - 4);
    }

    public File getActualResultFile()
    {
      return getActualResult().getLocation().toFile();
    }

    public String getExpectedResultFileName()
    {
      return expectedResultFile.getName();
    }

    public String getActualResultFileName()
    {
      return getExpectedResultFileName().replaceFirst("E_", "R_");
    }

    public RegressionTestCase getTestCase()
    {
      return RegressionTestCase.this;
    }

    public IFile getExpectedResult()
    {
      return getExpectedResultsFolder().getFile(getExpectedResultFileName());
    }

    public IFile getActualResult()
    {
      try
      {
        getActualResultsFolder().refreshLocal(1, new NullProgressMonitor());
      }
      catch (CoreException ex)
      {
        PluginMessages.uiError(ex, "Actual Results", workflowProject);
      }
      return getActualResultsFolder().getFile(getActualResultFileName());
    }

    @Override
    public String getIcon()
    {
      IFile actual = getActualResult();
      if (actual != null && actual.exists())
        return "result_with.gif";
      else
        return "result.gif";
    }

    public Long getId()
    {
      return new Long(-1);
    }

    public boolean hasInstanceInfo()
    {
      return false;
    }

    public boolean isReadOnly()
    {
      return false;
    }

    public boolean isLocal()
    {
      return true;
    }

    public Entity getActionEntity()
    {
      return Entity.TestCase;
    }

    public boolean equals(Object o)
    {
      if (!(o instanceof ExpectedResult) || o == null)
        return false;
      ExpectedResult other = (ExpectedResult) o;

      if (!workflowProject.equals(other.getWorkflowProject()))
        return false;
      if (!RegressionTestCase.this.equals(other.getTestCase()))
        return false;

      return getName().equals(other.getName());
    }

    public int compareTo(ExpectedResult other)
    {
      return this.getName().compareTo(other.getName());
    }

  }

}
