/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.launch;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.DebugPlugin;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchConfigurationType;
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
import org.eclipse.debug.core.ILaunchManager;
import org.eclipse.debug.ui.DebugUITools;
import org.eclipse.debug.ui.IDebugUIConstants;
import org.eclipse.debug.ui.ILaunchShortcut;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IFileEditorInput;

import com.centurylink.mdw.plugin.MdwPlugin;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase;
import com.centurylink.mdw.plugin.designer.model.RegressionTestSuite;
import com.centurylink.mdw.plugin.designer.model.WorkflowElement;
import com.centurylink.mdw.plugin.project.WorkflowProjectManager;
import com.centurylink.mdw.plugin.project.model.WorkflowProject;

public class RegressionTestLaunchShortcut implements ILaunchShortcut
{
  public void launch(ISelection selection, String mode)
  {
    Object firstElement = ((StructuredSelection)selection).getFirstElement();
    if (firstElement instanceof IResource)
    {
      IResource resource = (IResource) firstElement;
      try
      {
        boolean prevEnablement = disableBuildBeforeLaunch();
        performLaunch(resource, mode);
        setBuildBeforeLaunch(prevEnablement);
      }
      catch (Exception ex)
      {
        WorkflowProject workflowProject = WorkflowProjectManager.getInstance().getWorkflowProject(resource.getProject());
        PluginMessages.uiError(ex, "Test Exec", workflowProject);
      }
    }
    else if (firstElement instanceof WorkflowProject || firstElement instanceof RegressionTestSuite)
    {
      WorkflowProject workflowProject = ((WorkflowElement)firstElement).getWorkflowProject();
      try
      {
        if (workflowProject.isRemote() || workflowProject.isCloudProject())
          performLaunch(workflowProject.getSourceProject(), mode);
        else
          performLaunch(workflowProject.getEarProject(), mode);
      }
      catch (Exception ex)
      {
        PluginMessages.uiError(ex, "Test Exec", workflowProject);
      }
    }
    else if (firstElement instanceof RegressionTestCase)
    {
      Object[] objects = ((StructuredSelection)selection).toArray();
      List<RegressionTestCase> testCases = new ArrayList<RegressionTestCase>();
      for (Object o : objects)
        testCases.add((RegressionTestCase)o);
      try
      {
        performLaunch(testCases, mode);
      }
      catch (Exception ex)
      {
        PluginMessages.uiError(ex, "Regression Test", ((WorkflowElement)objects[0]).getWorkflowProject());
      }
    }
    else if (firstElement instanceof com.centurylink.mdw.plugin.designer.model.File)
    {
      com.centurylink.mdw.plugin.designer.model.File file = (com.centurylink.mdw.plugin.designer.model.File) firstElement;
      try
      {
        performLaunch(file.getWorkspaceFile(), mode);
      }
      catch (Exception ex)
      {
        PluginMessages.uiError(ex, "Regression Test", file.getWorkflowProject());
      }
    }
  }

  public void launch(IEditorPart editor, String mode)
  {
    if (editor.getEditorInput() instanceof IFileEditorInput)
    {
      IFileEditorInput fileEditorInput = (IFileEditorInput) editor.getEditorInput();
      try
      {
        performLaunch(fileEditorInput.getFile(), mode);
      }
      catch (Exception ex)
      {
        WorkflowProject workflowProject = WorkflowProjectManager.getInstance().getWorkflowProject(fileEditorInput.getFile().getProject());
        PluginMessages.uiError(ex, "Regression Test", workflowProject);
      }
    }
  }

  private void performLaunch(IResource resource, String mode) throws InterruptedException, CoreException
  {
    ILaunchConfigurationWorkingCopy workingCopy = createLaunchConfiguration(resource);
    ILaunchConfiguration config = findExistingLaunchConfiguration(workingCopy);
    if (config == null)
    {
      // no existing found - create a new one
      config = workingCopy.doSave();
    }

    if (resource instanceof IFile)
    {
      DebugUITools.launch(config, mode);
    }
    else
    {
      IStructuredSelection selection = new StructuredSelection(config);
      String groupId = "com.centurylink.mdw.plugin.launch.group.regression";
      DebugUITools.openLaunchConfigurationDialogOnGroup(getShell(), selection, groupId);
    }
  }

  private void performLaunch(List<RegressionTestCase> cases, String mode) throws CoreException
  {
    WorkflowProject workflowProject = cases.get(0).getWorkflowProject();
    String testName = workflowProject.getName();
    String testCaseDir = cases.get(0).getTestSuite().getTestCasesDir().toString();
    List<String> testCases = new ArrayList<String>();
    for (RegressionTestCase testCase : cases)
      testCases.add(testCase.getName());

    ILaunchConfigurationWorkingCopy workingCopy = createLaunchConfiguration(workflowProject, testName, testCaseDir, testCases);
    ILaunchConfiguration config = findExistingLaunchConfiguration(workingCopy);
    if (config == null)
    {
      // no existing found - create a new one
      config = workingCopy.doSave();
    }
    else
    {
      workingCopy = config.getWorkingCopy();
      String prefix;
      if (workingCopy.getAttribute(RegressionTestLaunchConfiguration.IS_LOAD_TEST, false))
        prefix = RegressionTestLaunchConfiguration.LOAD_TEST;
      else
        prefix = RegressionTestLaunchConfiguration.REGRESSION_TEST;

      workingCopy.setAttribute(prefix + "_" + RegressionTestLaunchConfiguration.TEST_CASES, testCases);
      config = workingCopy.doSave();
    }
    IStructuredSelection selection = new StructuredSelection(config);
    String groupId = "com.centurylink.mdw.plugin.launch.group.regression";
    DebugUITools.openLaunchConfigurationDialogOnGroup(getShell(), selection, groupId);
  }

  private Shell getShell()
  {
    return MdwPlugin.getActiveWorkbenchWindow().getShell();
  }

  protected ILaunchConfigurationWorkingCopy createLaunchConfiguration(IResource resource) throws CoreException
  {
    String testName = null;
    String testCaseDir = null;
    List<String> testCases = new ArrayList<String>();

    WorkflowProject workflowProject = WorkflowProjectManager.getInstance().getWorkflowProject(resource.getProject());
    if (workflowProject == null)
      workflowProject = WorkflowProjectManager.getInstance().getRemoteWorkflowProject(resource.getProject());

    if (resource instanceof IFile)
    {
      IFile file = (IFile) resource;
      testName = file.getParent().getName();
      testCaseDir = file.getParent().getParent().getRawLocation().toOSString();
      testCases.add(testName);
    }
    else if (resource instanceof IFolder)
    {
      IFolder folder = (IFolder) resource;
      if (folder.getName().equals("testCases"))
      {
        testName = folder.getProject().getName();
        testCaseDir = folder.getRawLocation().toOSString();
        File dir = new File(testCaseDir);
        for (File file : dir.listFiles())
        {
          if (file.isDirectory() && !file.getName().equalsIgnoreCase("CVS") && !file.getName().equals(".metadata"))
            testCases.add(file.getName());
        }
      }
      else
      {
        testName = folder.getName();
        testCaseDir = folder.getParent().getRawLocation().toOSString();
        testCases.add(testName);
      }
    }
    else if (resource instanceof IProject)
    {
      IProject project = (IProject) resource;
      testName = project.getName();
      testCaseDir = project.getFolder("testCases").getRawLocation().toOSString();
      File dir = new File(testCaseDir);
      for (File file : dir.listFiles())
      {
        if (file.isDirectory() && !file.getName().equalsIgnoreCase("CVS") && !file.getName().equals(".metadata"))
          testCases.add(file.getName());
      }
    }


    return createLaunchConfiguration(workflowProject, testName, testCaseDir, testCases);
  }

  protected ILaunchConfigurationWorkingCopy createLaunchConfiguration(WorkflowProject workflowProject, String testName, String testCasesDir, List<String> testCases) throws CoreException
  {
    ILaunchConfigurationType configType = getLaunchManager().getLaunchConfigurationType("com.centurylink.mdw.plugin.launch.RegressionTest");
    ILaunchConfigurationWorkingCopy wc = configType.newInstance(workflowProject.getSourceProject(), getLaunchManager().generateLaunchConfigurationName(testName));

    wc.setAttribute(RegressionTestLaunchConfiguration.WORKFLOW_PROJECT, workflowProject.getName());
    wc.setAttribute(RegressionTestLaunchConfiguration.REGRESSION_TEST + "_" + RegressionTestLaunchConfiguration.TEST_CASES_DIRECTORY, testCasesDir);
    wc.setAttribute(RegressionTestLaunchConfiguration.REGRESSION_TEST + "_" + RegressionTestLaunchConfiguration.TEST_CASES, testCases);
    return wc;
  }

  private ILaunchConfiguration findExistingLaunchConfiguration(ILaunchConfigurationWorkingCopy workingCopy) throws CoreException
  {
    String wcWorkflowProject = workingCopy.getAttribute(RegressionTestLaunchConfiguration.WORKFLOW_PROJECT, "");
    String wcTestCaseDir = workingCopy.getAttribute(RegressionTestLaunchConfiguration.REGRESSION_TEST + "_" + RegressionTestLaunchConfiguration.TEST_CASES_DIRECTORY, "");

    ILaunchConfigurationType configType = workingCopy.getType();
    ILaunchConfiguration[] configs = getLaunchManager().getLaunchConfigurations(configType);
    for (ILaunchConfiguration launchConfig : configs)
    {
      String workflowProject = launchConfig.getAttribute(RegressionTestLaunchConfiguration.WORKFLOW_PROJECT, "");
      if (!wcWorkflowProject.equals(workflowProject))
        continue;
      String testCaseDir = launchConfig.getAttribute(RegressionTestLaunchConfiguration.REGRESSION_TEST + "_" + RegressionTestLaunchConfiguration.TEST_CASES_DIRECTORY, "");
      if (!wcTestCaseDir.equals(testCaseDir))
        continue;

      return launchConfig;

    }
    return null;
  }

  private ILaunchManager getLaunchManager()
  {
    return DebugPlugin.getDefault().getLaunchManager();
  }

  /**
   * Returns previous pref value.
   */
  protected boolean disableBuildBeforeLaunch()
  {
    boolean buildBeforeLaunchPref = MdwPlugin.getDefault().getPreferenceStore().getBoolean(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH);
    MdwPlugin.getDefault().getPreferenceStore().setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH, false);
    return buildBeforeLaunchPref;
  }

  protected void setBuildBeforeLaunch(boolean buildBeforeLaunchPref)
  {
    MdwPlugin.getDefault().getPreferenceStore().setValue(IDebugUIConstants.PREF_BUILD_BEFORE_LAUNCH, buildBeforeLaunchPref);
  }
}
