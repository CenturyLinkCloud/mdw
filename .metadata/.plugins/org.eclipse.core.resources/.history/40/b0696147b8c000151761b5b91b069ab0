/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.plugin.designer.wizards;

import java.io.ByteArrayInputStream;
import java.io.File;

import org.eclipse.core.resources.IFile;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.ide.IDE;

import com.centurylink.mdw.plugin.MdwPlugin;
import com.centurylink.mdw.plugin.PluginMessages;
import com.centurylink.mdw.plugin.designer.model.ElementChangeEvent.ChangeType;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase;
import com.centurylink.mdw.plugin.designer.model.RegressionTestCase.ExpectedResult;

public class NewExpectedResultWizard extends Wizard implements INewWizard
{
  private NewExpectedResultPage page;

  private RegressionTestCase testCase;
  public RegressionTestCase getTestCase() { return testCase; }

  public void init(IWorkbench workbench, IStructuredSelection selection)
  {
    setDefaultPageImageDescriptor(MdwPlugin.getImageDescriptor("icons/mdw_wiz.png"));
    setNeedsProgressMonitor(true);

    if (selection == null || !(selection.getFirstElement() instanceof RegressionTestCase))
      throw new IllegalStateException("Selection must be an MDW Test Case");

    testCase = (RegressionTestCase)selection.getFirstElement();
  }

  @Override
  public void addPages()
  {
    page = new NewExpectedResultPage();
    addPage(page);
  }

  @Override
  public boolean performFinish()
  {
    String filename = page.getFileName();
    ExpectedResult expectedResult = testCase.new ExpectedResult(new File(testCase.getTestCasesDir() + "/" + filename));
    testCase.getExpectedResults().add(expectedResult);
    IFile file = expectedResult.getExpectedResult();
    try
    {
      IWorkbenchPage activePage = MdwPlugin.getActivePage();
      file.create(new ByteArrayInputStream("".getBytes()), true, null);
      IDE.openEditor(activePage, file, true);
      expectedResult.addElementChangeListener(expectedResult.getWorkflowProject());
      expectedResult.fireElementChangeEvent(ChangeType.ELEMENT_CREATE, expectedResult);
    }
    catch (Exception ex)
    {
      PluginMessages.uiError(ex, "Create Expected Result");
    }
    return true;
  }
}