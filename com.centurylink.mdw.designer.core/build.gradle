dependencies {
    compile files("./classes")
    compile fileTree(dir: "lib", includes: ["*.jar"]) // some of these are only for compile (not eclipse dependencies)
    
}

task copyCompatibilityMappings(type: Copy) {
    from "${mdwOutputDir}/../../../mdw-common/src/META-INF/mdw"
    include "namespaces.map"
    include "variable-translators.map"
    include "variable-types.map"
    include "documentation-paths.map"
    include "activity-implementors.map"
    into "./META-INF/mdw"
}

task cleanMdwCommon(type: Delete) {
    delete fileTree("./classes") {
        include '**/*.class'
    }
}

// jars needed by designer
task copyMdwLibs(type: Copy) {
    from "${mdwOutputDir}/../designer_libs"
    include "*.jar"
    into "./lib"
}

// gets schemas, common
task getMdwCommon(type: Copy) {
    dependsOn(copyCompatibilityMappings, copyMdwLibs, cleanMdwCommon)
    from zipTree("${mdwOutputDir}/mdw-schemas-${mdwVersion}.jar").matching{exclude "META-INF/**"}
    from zipTree("${mdwOutputDir}/mdw-common-${mdwVersion}.jar").matching{exclude "META-INF/**"}
    into "./classes"
}

compileJava {
    dependsOn(getMdwCommon)
}

task cleanCompile(type: Delete) {
    delete sourceSets.main.output.classesDir
}

task cleanCommonClasses(type: Delete) {
    delete "./classes"
}

clean {
    dependsOn(cleanCompile, cleanJar, cleanCommonClasses)
}

// designer jar for repository (without mdw-common/mdw-schemas classes or libs)
task designerCoreJar(type: Jar) {
    archiveName = "mdw-designer-core-${version}.jar"
    
    from("./bin") {
        exclude "META-INF"
    }

    from(".") {
        include "META-INF/mdw/*"
    }

    manifest {
        attributes "MDW-Designer-Version": mdwDesignerVersion
    }
}

jar {
    dependsOn designerCoreJar
    archiveName = "${project.name}_${version}.jar"
    
    from(".") {
        include "classes/**/*"
        include "lib/*"
    }

    from(".") {
        include "images/**/*"
        include "META-INF/mdw/*"
        exclude "**/.*ignore";
        exclude "bin/META-INF"
    }

    manifest {
        from "META-INF/MANIFEST.MF"
        attributes "MDW-Version": mdwVersion
    }
}

// copy classes after eclipse build (schemas need to generate the jar)
task devGetMdwCommon(type: Copy) {
    dependsOn copyCompatibilityMappings
    from "${mdwOutputDir}/../../../mdw-common/build/classes"
    include "**/*.class"
    into "./classes"
}

task updateDesignerVersion << {
    File manifestFile = new File("./META-INF/MANIFEST.MF");
    ant.replaceregexp(file: manifestFile, match: "Bundle-Version:.*", replace: "Bundle-Version: ${version}", byline: true)
}
