task buildConfig(type: Zip) {
    destinationDir = file("../${mdwOutputDir}")
    archiveName = "mdw-config-${mdwVersion}.zip"
    from "config"
    include "*.cfg"
    include "*.properties"
}

task updateDesignerInTestingPkg(type: HttpGet) {
    fromUrl "${archivaUrl}/mdw-designer-core/${mdwDesignerVersion}/mdw-designer-core-${mdwDesignerVersion}.jar"
    into "../mdw-workflow/assets/com/centurylink/mdw/testing/mdw-designer-core.jar"
}
task updateDesignerInMdwWeb(type: HttpGet) {
    fromUrl "${archivaUrl}/mdw-designer-core/${mdwDesignerVersion}/mdw-designer-core-${mdwDesignerVersion}.jar"
    into "../mdw-web/web/WEB-INF/lib"
}
task updateDesignerInMdwHub(type: HttpGet) {
    fromUrl "${archivaUrl}/mdw-designer-core/${mdwDesignerVersion}/mdw-designer-core-${mdwDesignerVersion}.jar"
    into "../mdw-hub/web/WEB-INF/lib"
}
task updateDesignerCoreJar {
    dependsOn(updateDesignerInTestingPkg, updateDesignerInMdwWeb, updateDesignerInMdwHub)
}

task updateDesignerReportsJar(type: HttpGet) {
    fromUrl "${mdwDesignerUpdateSiteUrl}/plugins/com.centurylink.mdw.reports_${mdwDesignerVersion}.jar"
    into "../mdw-hub/web/WEB-INF/lib"
}

task buildAll(type: GradleBuild) {
    dependsOn buildConfig
    buildFile = "build.gradle"
    tasks = ["build"]
}

task buildSchemas(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = [":mdw-schemas:build"]
}

task cleanAll(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["clean"]
}

task packageSourcesAll(type: GradleBuild) {
    buildFile = "build.gradle"
    tasks = ["sourcesJar"]
}

// deploy a build for testing on lxdenvmtc143
task deployTomcatMdwdev(type: GradleBuild) {
    buildFile = "deploy.gradle"
    tasks = ["deployMdw"]
    def repoUrl = mdwVersion.endsWith("SNAPSHOT") ? archivaSnapshotUrl : archivaUrl
    startParameter.projectProperties = [testServerUrl: "${tomcatAccessUrl}"]
}

task testTomcatMdwdev(type: GradleBuild) {
    buildFile = "test.gradle"
    tasks = ["autoTestAndPublish"]
    startParameter.projectProperties = [testServerUrl: "${tomcatTestServerUrl}"]
}

task testFuseMdwdev(type: GradleBuild) {
    buildFile = "test.gradle"
    tasks = ["autoTest"]
    startParameter.projectProperties = [testServerUrl: "${fuseTestServerUrl}"]
}

task testLocalDev(type: GradleBuild) {
    buildFile = "test.gradle"
    tasks = ["autoTest"]
    startParameter.projectProperties = [testServerUrl: "${localTestServerUrl}"]
}

task testFuseRemote(type: GradleBuild) {
    buildFile = "test.gradle"
    tasks = ["remoteFuseTests"]
    startParameter.projectProperties = [testServerUrl: "${fuseTestServerUrl}"]
}

task exportAssetPackages(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["exportAssetPackages"]
    startParameter.projectProperties = [publishBaseUrl: "n/a", publishUser: "n/a", publishPassword: "n/a" ]
}

task publishArchiva(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["publishBuild"]
    startParameter.projectProperties = [publishBaseUrl: archivaUrl, publishUser: archivaUser, publishPassword: archivaPassword ]
}

task publishNexus(type: GradleBuild) {
  buildFile = "publish.gradle"
  tasks = ["publishBuild"]
  startParameter.projectProperties = [publishBaseUrl: nexusUrl, publishUser: nexusUser, publishPassword: nexusPassword ]
}

task publishMdw(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["publishBuild"]
    startParameter.projectProperties = [publishBaseUrl: mdwMavenRepoUrl, publishUser: mdwMavenUser, publishPassword: mdwMavenPassword ]
}

task publishArchivaSnapshot(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["publishBuild"]
    startParameter.projectProperties = [publishBaseUrl: archivaSnapshotUrl, publishUser: archivaUser, publishPassword: archivaPassword ]
}

task publishNexusSnapshot(type: GradleBuild) {
  buildFile = "publish.gradle"
  tasks = ["publishBuild"]
  startParameter.projectProperties = [publishBaseUrl: nexusSnapshotUrl, publishUser: nexusUser, publishPassword: nexusPassword ]
}

task publishMdwSnapshot(type: GradleBuild) {
    buildFile = "publish.gradle"
    tasks = ["publishBuild"]
    startParameter.projectProperties = [publishBaseUrl: mdwMavenRepoUrl, publishUser: mdwMavenUser, publishPassword: mdwMavenPassword ]
}

task publishSnapshot {
    dependsOn(publishNexusSnapshot, publishMdwSnapshot)
}

task publishFormal {
    dependsOn(publishNexus, publishMdw)
}

subprojects {
    apply plugin: "java"
    
    sourceCompatibility = 1.6
    version = "${mdwVersion}"

    libsDirName = "../../${mdwOutputDir}"

    sourceSets {
        main {
            java {
                srcDir "src"
            }
            output.classesDir = "build/classes"
        }
    }
    
    repositories {
        maven {
            url devRepoUrl
        }
    }
    
    // copy into output dir rather than including directly in jar
    // this works better in local development where deployment happens from build/classes
    task copyMeta(type: Copy) {
        from("src") {
            include "META-INF/mdw/**"
            include "META-INF/spring/**"
            exclude "META-INF/**/.metadata"
            exclude "META-INF/**/.*ignore"
        }
        into sourceSets.main.output.classesDir
    }
    
    processResources {
        dependsOn copyMeta
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
        exclude "META-INF"
        exclude "**/.metadata/"
        exclude "**/.*ignore"
    }    
}

task cleanJavadocs(type: Delete) {
    delete "../mdw-hub/web/javadoc"
}

task javadocs(type: Javadoc) {
    dependsOn "cleanJavadocs"
    source subprojects.collect {project -> project.sourceSets.main.java }
    classpath = files(subprojects.collect {project -> project.sourceSets.main.compileClasspath})
    title = "MDW 5.5 API JavaDocs"
    maxMemory = "256m"
    options.links "http://docs.oracle.com/javase/6/docs/api/"
    options.bottom "<i>Copyright &#169; 2014 CenturyLink, Inc.</i>"
    destinationDir = file('../mdw-hub/web/javadoc')
}

task versions << {
    println "Java Version: " + System.getProperty("java.version")
    println GradleVersion.current().prettyPrint()
    println "MDW Version: ${mdwVersion}"
}
