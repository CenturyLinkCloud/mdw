<%@ jet package="translated" imports="java.util.* com.centurylink.mdw.plugin.preferences.model.* com.centurylink.mdw.plugin.codegen.meta.*"
        class="ExternalEventHandlerJavaEmitter" %>
<% Map map = (Map) argument;
   EventHandler eventHandler = (EventHandler) map.get("model");
   MdwSettings mdwSettings = (MdwSettings) map.get("settings");%>
<%=mdwSettings.getCopyrightNotice()%>

package <%=eventHandler.getJavaPackage()%>;

import java.util.Map;

import com.centurylink.mdw.common.constant.OwnerType;
import com.centurylink.mdw.util.log.LoggerUtil;  
import com.centurylink.mdw.util.log.StandardLogger;
import com.centurylink.mdw.listener.ExternalEventHandlerBase;
import com.centurylink.mdw.model.listener.Listener;
import com.centurylink.mdw.event.EventHandlerException;
<%
if (eventHandler.isCreateDocument())
{
%>
import com.centurylink.mdw.model.value.variable.DocumentReference;
<%
}
%>

/**
 * External event handler for processing incoming requests.
 */
public class <%=eventHandler.getClassName()%> extends ExternalEventHandlerBase
{
  private static StandardLogger logger = LoggerUtil.getStandardLogger();

  /**
   * Processes the incoming external event message.  Perform custom logic like
   * parsing the request and extracting parameters as process variables, etc.
   * You might then launch a process instance or notify a waiting activity.
   *
   * @param request the raw request message
   * @param xmlObj the document parsed from request
   * @param metaInfo metadata for the request
   * @return a string containing the event response message
   */
  public String handleEventMessage(String request, Object xmlObj, Map<String,String> metaInfo)
      throws EventHandlerException
  {
    if (logger.isDebugEnabled())
      logger.debug("Event Request:\n" + request);
      
    Long eventInstanceId = new Long(metaInfo.get(Listener.METAINFO_DOCUMENT_ID));

<%
if (eventHandler.isCreateDocument())
{
%>
    // create a document
    String docType = "org.apache.xmlbeans.XmlObject";
    // TODO: parse the request to create a document object as follows
    // MyXmlBeanDocument myXmlBeanDoc = (MyXmlBeanDocument) xmlBean.changeType(MyXmlBeanDocument.type);      
    DocumentReference docRef = createDocument(docType, xmlObj, OwnerType.LISTENER_REQUEST, eventInstanceId, new Long(0), null, null);
<%
}
%>

<%
if (eventHandler.getProcess() != null)
{
%>
    try
    {
      // launch process
      Map<String, Object> processVarMap = new java.util.HashMap<String, Object>();
<%
if (eventHandler.isCreateDocument())
{
%>
      processVarMap.put("<%=eventHandler.getDocumentVariable()%>", docRef);
<%
}
%>
      // TODO: parse the request, populate process variable map and master request id
      String masterRequestId = "MyMasterRequestId";  
      logger.info("Launching Process: <%=eventHandler.getProcess()%>");

<%
if (eventHandler.isLaunchSynchronous())
{
%>      
      return invokeServiceProcess(getProcessId("<%=eventHandler.getProcess()%>"), eventInstanceId, masterRequestId, request, processVarMap);
<%
}
else
{
%>
      launchProcess(getProcessId("<%=eventHandler.getProcess()%>"), eventInstanceId, masterRequestId, processVarMap);
  
      // TODO: build success response
      return null;
<%
}
}
else if (eventHandler.getEvent() != null)
{
%>
    try
    {
      // event notify
      logger.info("Notifying event: <%=eventHandler.getEvent()%>");
      int status = notifyProcesses("<%=eventHandler.getEvent()%>", eventInstanceId, null, 0);      
      // TODO: build response
      return null;
<%
}
else
{
%>

    // TODO Auto-generated method stub
    return null;
<%
}
%>
    }
    catch (Exception ex)
    {
      logger.severeException(ex.getMessage(), ex);
      
      // TODO: build error response
      return null;
    }
  }
}

