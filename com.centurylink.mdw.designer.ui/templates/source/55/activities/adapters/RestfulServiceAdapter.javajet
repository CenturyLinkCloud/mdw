<%@ jet package="translated" imports="java.util.* com.centurylink.mdw.plugin.preferences.model.* com.centurylink.mdw.plugin.codegen.meta.*"
        class="RestfulServiceAdapterJavaEmitter" %>
<% Map map = (Map) argument;
   AdapterActivity adapterActivity = (AdapterActivity) map.get("model");
   MdwSettings mdwSettings = (MdwSettings) map.get("settings");%>
<%=mdwSettings.getCopyrightNotice()%>

package <%=adapterActivity.getJavaPackage()%>;

import java.net.HttpURLConnection;
import java.util.Map;

import com.centurylink.mdw.common.utilities.HttpHelper;
import com.centurylink.mdw.connector.adapter.AdapterException;
import com.centurylink.mdw.connector.adapter.ConnectionException;
import com.centurylink.mdw.activity.ActivityException;
import com.centurylink.mdw.workflow.adapter.rest.RestfulServiceAdapter;

/**
 * REST Web Service Adapter Activity.
 */
public class <%=adapterActivity.getClassName()%> extends RestfulServiceAdapter
{
  /**
   * Returns an HttpURLConnection based on the configured endpoint attribute, 
   * which includes the resource path. Override for HTTPS or other connection type.
   */
  @Override
  protected Object openConnection() throws ConnectionException
  {
    return super.openConnection();
  }

  /**
   * Override this method to build the request data (usually a string containing XML).
   * Request data is not applicable for HTTP GET and DELETE.
   */
  @Override
  protected Object getRequestData() throws ActivityException
  {
    // TODO Auto-generated method stub
    return "";
  }

  /**
   * Invokes the RESTful service by submitting an HTTP request against the configured
   * endpoint URI.  Override getRequestData() to provide the requestData value (usually a String).
   */
  @Override
  public Object invoke(Object conn, Object requestData, Map<String,String> headers) throws AdapterException
  {
    HttpHelper httpHelper = null;
    try
    {
      httpHelper = new HttpHelper((HttpURLConnection)conn);
<%
if (adapterActivity.getHttpMethod().equals("GET"))
{
%>       
      return httpHelper.get();
<%
}
else if (adapterActivity.getHttpMethod().equals("POST"))
{
%>
      return httpHelper.post(requestData.toString());
<%
}
else if (adapterActivity.getHttpMethod().equals("PUT"))
{
%>
      return httpHelper.put(requestData.toString());
<%
}
else if (adapterActivity.getHttpMethod().equals("DELETE"))
{
%>
      return httpHelper.delete();
<%
}
%>
    }
    catch (Exception ex)
    {
      throw new AdapterException(httpHelper.getResponseCode(), ex.getMessage() , ex);
    }
  }

  /**
   * Invoked by the runtime engine when the service has succeeded at the protocol level (ie: the
   * HTTP request/response went through okay). If there are business-related errors contained in the
   * response, this method should set the result code accordingly.
   * 
   * @param response by default a String containing the HTTP response
   */
  @Override
  protected void handleAdapterSuccess(Object response) throws ActivityException, AdapterException
  {
    // TODO Auto-generated method stub
  }

  /**
   * Invoked by the runtime engine when the service has failed at the protocol level.
   * A ControlledActivityException should be thrown to trigger the ERROR outcome.
   * 
   * @param errorCode the HTTP response code
   * @param errorCause exception which caused the failure
   */
  @Override
  protected void handleAdapterFailure(int errorCode, Throwable errorCause) throws ActivityException
  {
    String message = "<%=adapterActivity.getLabel()%> Failed.";
    throw new ActivityException(errorCode, message, errorCause);
  }
}
