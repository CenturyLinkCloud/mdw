<sql-queries>
    
    <!-- Reads all tasks associated with a workgroup -->
    <sql-query name="Task.GET_TASKS_FOR_WORKGROUP">
        SELECT t.TASK_ID,t.TASK_NAME,t.TASK_TYPE_ID,t.TASK_CATEGORY_ID,t.LOGICAL_ID,t.CREATE_USR,t.COMMENTS
        FROM TASK t, USER_GROUP ug, TASK_USR_GRP_MAPP tugm
        WHERE ug.GROUP_NAME = ?
        AND ug.USER_GROUP_ID = tugm.USER_GROUP_ID
        AND tugm.TASK_ID = t.TASK_ID
        ORDER BY t.TASK_NAME        
    </sql-query>
    
     <!-- Reads all template tasks associated with a workgroup -->
    <sql-query name="Task.GET_TEMPLATE_TASKS_FOR_WORKGROUP">
        SELECT   DISTINCT
         t.TASK_ID,
          t.TASK_NAME,
          t.TASK_TYPE_ID,
          t.TASK_CATEGORY_ID,
          t.LOGICAL_ID,
          t.CREATE_USR,
          t.COMMENTS
  			FROM   TASK_INST_GRP_MAPP tigm, TASK_INSTANCE ti, USER_GROUP ug, TASK t
 			WHERE       tigm.TASK_INSTANCE_ID = ti.TASK_INSTANCE_ID
         AND ug.GROUP_NAME = ?
         AND ug.USER_GROUP_ID = tigm.USER_GROUP_ID
         AND ti.TASK_ID = t.TASK_ID       
    </sql-query>
    
    <!-- Reads all the tasks created by an order -->
    <sql-query name="TaskInstance.READ_ALL_TASK_INSTANCE_VO_BY_MASTER_OWNER_ID_SQL">
        SELECT ti.TASK_INSTANCE_ID,ti.TASK_ID,ti.TASK_INSTANCE_STATUS,
            ti.TASK_INSTANCE_OWNER,ti.TASK_INSTANCE_OWNER_ID,ti.TASK_CLAIM_USER_ID,ti.COMMENTS,
            ti.TASK_START_DT,ti.TASK_END_DT,ti.TASK_INSTANCE_STATE,
            ti.TASK_INST_SECONDARY_OWNER,ti.TASK_INST_SECONDARY_OWNER_ID,ti.OWNER_APP_NAME,ti.ASSOCIATED_TASK_INST_ID,
          t.TASK_NAME, si.SLA_ESTM_COMP_DT, ui.CUID, tc.TASK_CATEGORY_CD, pi1.master_request_id,ti.TASK_INSTANCE_REFERRED_AS,ti.DUE_DATE,
          ti.PRIORITY,TI.MASTER_REQUEST_ID,
        (SELECT ai.status_message from activity_instance ai , process_instance pi2
          where ti.task_instance_owner_id = pi2.process_instance_id and pi2.secondary_owner ='ACTIVITY_INSTANCE'
            and ai.activity_instance_id = pi2.secondary_owner_id) taskMessage,
        (SELECT w.work_name from activity_instance ai, work w , process_instance pi2
          where ti.task_instance_owner_id = pi2.process_instance_id and pi2.secondary_owner ='ACTIVITY_INSTANCE'
            and ai.activity_instance_id = pi2.secondary_owner_id and ai.activity_id = w.work_id) activityName
        FROM TASK_INSTANCE ti, TASK t, SLA_INSTANCE si, USER_INFO ui, TASK_CATEGORY tc, process_instance pi1
        WHERE ti.TASK_ID = t.TASK_ID AND
             t.TASK_CATEGORY_ID = tc.TASK_CATEGORY_ID AND
             si.SLA_INST_OWNER_ID(+)= ti.TASK_INSTANCE_ID AND
                 si.SLA_INST_OWNER(+) = 'TASK_INSTANCE' AND
                 ui.USER_INFO_ID(+) = ti.TASK_CLAIM_USER_ID AND
             ti.TASK_INSTANCE_OWNER_ID  in
              (select process_instance_id from process_instance where master_request_id = ?)
             and ti.task_instance_owner_id = pi1.process_instance_id
    </sql-query>
    
    <!-- Reads the task actions for the user  -->
    <sql-query name="TaskAction.READ_ALL_BY_MAPPED_USER_ID">
        SELECT ta.TASK_ACTION_ID, ta.TASK_ACTION_NAME, ta.COMMENTS
        FROM TASK_ACTION ta, TASK_ACTN_USR_ROLE_MAPP taurm,
             USER_INFO ui, USER_ROLE ur, USER_ROLE_MAPPING urm
        WHERE ui.CUID = ? AND
             ui.USER_INFO_ID = urm.USER_ROLE_MAPPING_OWNER_ID AND
             urm.USER_ROLE_MAPPING_OWNER = 'USER' AND
            urm.USER_ROLE_ID = taurm.USER_ROLE_ID AND
            taurm.TASK_ACTION_ID = ta.TASK_ACTION_ID
    </sql-query>

     <!-- Reads the task actions for the user group(s) -->
    <sql-query name="TaskAction.READ_ALL_BY_MAPPED_USER_GROUPS">
        SELECT ta.TASK_ACTION_ID, ta.TASK_ACTION_NAME, ta.COMMENTS
        FROM TASK_ACTION ta, TASK_ACTN_USR_ROLE_MAPP taurm,
             USER_INFO ui, USER_GROUP_MAPPING ugm, USER_ROLE ur, USER_ROLE_MAPPING urm
        WHERE ui.CUID = ? AND
        ui.USER_INFO_ID = ugm.USER_INFO_ID AND
		ugm.USER_GROUP_ID = urm.USER_ROLE_MAPPING_OWNER_ID AND
		urm.USER_ROLE_MAPPING_OWNER = 'USER_GROUP' AND
		urm.USER_ROLE_ID = taurm.USER_ROLE_ID AND
		taurm.TASK_ACTION_ID = ta.TASK_ACTION_ID
    </sql-query>
    
        <!-- Query that pulls the report for task names by status and  count -->
    <sql-query name="TaskInstance.REPORT_BY_TASK_NAME">
        SELECT t.TASK_NAME, ti.TASK_INSTANCE_STATE, count(ti.TASK_INSTANCE_ID)
        FROM TASK_INSTANCE ti, TASK t
        WHERE ti.TASK_ID = t.TASK_ID
        GROUP BY t.TASK_NAME, ti.TASK_INSTANCE_STATE
        ORDER BY t.TASK_NAME, ti.TASK_INSTANCE_STATE
    </sql-query>

    <!-- Query that pulls report for task category by status and count -->
    <sql-query name="TaskInstance.REPORT_BY_TASK_CATEGORY">
    SELECT tc.TASK_CATEGORY_DESC, ti.TASK_INSTANCE_STATE, count(ti.TASK_INSTANCE_ID)
        FROM TASK_INSTANCE ti, TASK t, TASK_CATEGORY tc
        WHERE ti.TASK_ID = t.TASK_ID AND t.TASK_CATEGORY_ID = tc.TASK_CATEGORY_ID
        GROUP BY tc.TASK_CATEGORY_DESC, ti.TASK_INSTANCE_STATE
        ORDER BY tc.TASK_CATEGORY_DESC, ti.TASK_INSTANCE_STATE
    </sql-query>

    <!-- Query that pulls the report for user names by status and  count -->
    <sql-query name="TaskInstance.REPORT_BY_CUID">
        SELECT u.CUID, ti.TASK_INSTANCE_STATE, count(ti.TASK_INSTANCE_ID)
        FROM TASK_INSTANCE ti, USER_INFO u
        WHERE ti.TASK_CLAIM_USER_ID = u.USER_INFO_ID
        GROUP BY u.CUID, ti.TASK_INSTANCE_STATE
        ORDER BY u.CUID, ti.TASK_INSTANCE_STATE
    </sql-query>
    
    <!-- Get variable instances for a process instance -->
    <sql-query name="GET_PROCESS_INSTANCE_VARIABLES">
        SELECT vi.VARIABLE_INST_ID, v.VARIABLE_ID, v.VARIABLE_NAME, vi.VARIABLE_VALUE,
               vt.VARIABLE_TYPE_NAME
             FROM VARIABLE_INSTANCE vi, VARIABLE v, VARIABLE_TYPE vt
             WHERE vi.PROCESS_INST_ID = ? AND
               vi.VARIABLE_ID = v.VARIABLE_ID AND
               v.VARIABLE_TYPE_ID = vt.VARIABLE_TYPE_ID
    </sql-query>
    
    <!-- Get task instance variables -->
    <sql-query name="GET_TASK_INSTANCE_VARIABLES">
  		select tv.VARIABLE_NAME,tp.VARIABLE_VALUE,tv.VARIABLE_DATA_SOURCE, 
        		tv.VARIABLE_DATA_OPT_IND,tv.TRANSLATOR_CLASS_NAME,tp.PR_INST_ID, 
                tp.VAR_INST_ID,tv.VARIABLE_TYPE_NAME,tv.VAR_REFERRED_AS,tv.VARIABLE_ID 
        from (  select vm.DISPLAY_SEQ,vm.VARIABLE_MAPPING_ID,vm.VARIABLE_ID,
                      vm.VAR_REFERRED_AS,v.VARIABLE_NAME,vt.TRANSLATOR_CLASS_NAME,
                      vt.VARIABLE_TYPE_NAME,vm.VARIABLE_DATA_SOURCE,vm.VARIABLE_DATA_OPT_IND
                from VARIABLE_MAPPING vm, VARIABLE v, VARIABLE_TYPE vt 
                where vm.MAPPING_OWNER = 'TASK' and vm.mapping_owner_id = 
              			(select ti.TASK_ID from TASK_INSTANCE ti where ti.TASK_INSTANCE_ID = ?)
                    and vm.VARIABLE_ID = v.VARIABLE_ID
                    and v.VARIABLE_TYPE_ID = vt.VARIABLE_TYPE_ID ) tv,
             (  select pi.PROCESS_INSTANCE_ID PR_INST_ID,pi.OWNER_ID,pi.OWNER,vm.VARIABLE_ID,
                      vm.VARIABLE_MAPPING_ID,vi.VARIABLE_VALUE,vi.VARIABLE_INST_ID VAR_INST_ID
                from PROCESS_INSTANCE pi, VARIABLE_MAPPING vm, VARIABLE_INSTANCE vi
                where vm.mapping_owner = 'PROCESS' and vm.MAPPING_OWNER_ID in 
                       ( select distinct pr.PROCESS_ID from PROCESS pr
                         where pr.PROCESS_TYPE_ID = 1 and pr.PROCESS_ID = pi.PROCESS_ID )
                     and vm.VARIABLE_ID = vi.VARIABLE_ID
                     and vi.PROCESS_INST_ID = pi.PROCESS_INSTANCE_ID
                     and vi.PROCESS_INST_ID in 
                       ( select pii.PROCESS_INSTANCE_ID 
                         from PROCESS_INSTANCE pii 
                              start with pii.PROCESS_INSTANCE_ID = 
                                  (select ti.TASK_INSTANCE_OWNER_ID
                                   from TASK_INSTANCE ti
                                   where ti.TASK_INSTANCE_ID = ?)
                              connect by  pii.process_instance_id =  prior pii.OWNER_ID)) tp 
        where tv.VARIABLE_ID = tp.VARIABLE_ID(+) 
            and not (tv.VARIABLE_DATA_SOURCE = 'workflow' and tp.VARIABLE_VALUE is null) 
        order by tv.DISPLAY_SEQ asc
    </sql-query>
    
    <!-- Get owner process instance for a variable instance -->
    <sql-query name="GET_VARIABLE_INSTANCE_OWNER">
         select pi.PROCESS_INSTANCE_ID,pi.PROCESS_ID,pi.OWNER,pi.OWNER_ID,pi.MASTER_REQUEST_ID,
            pi.STATUS_CD,pi.SECONDARY_OWNER,pi.SECONDARY_OWNER_ID,pi.COMPCODE
         from PROCESS_INSTANCE pi, VARIABLE_MAPPING vm, VARIABLE v,
            ( select distinct pi3.PROCESS_INSTANCE_ID PROC_INST_ID, pi3.process_id PROC_ID
              from PROCESS_INSTANCE pi3
			      start with pi3.PROCESS_INSTANCE_ID = ?
			      connect by nocycle pi3.PROCESS_INSTANCE_ID = prior pi3.OWNER_ID) instances
         where pi.PROCESS_INSTANCE_ID = instances.PROC_INST_ID and v.VARIABLE_NAME = ?
              and v.VARIABLE_ID = vm.VARIABLE_ID and vm.MAPPING_OWNER = 'PROCESS'
              and vm.MAPPING_OWNER_ID = instances.PROC_ID
    </sql-query>
    
</sql-queries>
