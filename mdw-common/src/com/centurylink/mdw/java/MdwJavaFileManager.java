/**
 * Copyright (c) 2014 CenturyLink, Inc. All Rights Reserved.
 */
package com.centurylink.mdw.java;

import java.io.IOException;
import java.util.Hashtable;
import java.util.Map;

import javax.tools.FileObject;
import javax.tools.ForwardingJavaFileManager;
import javax.tools.JavaFileManager;
import javax.tools.JavaFileObject;
import javax.tools.JavaFileObject.Kind;

import com.centurylink.mdw.common.utilities.logger.LoggerUtil;
import com.centurylink.mdw.common.utilities.logger.StandardLogger;

public class MdwJavaFileManager <M extends JavaFileManager> extends ForwardingJavaFileManager<M> {

    private static StandardLogger logger = LoggerUtil.getStandardLogger();

    private static Map<String,JavaFileObject> jfoCache = new Hashtable<String,JavaFileObject>();

    public static JavaFileObject getJavaFileObject(String className) {
        return jfoCache.get(className);
    }

    public MdwJavaFileManager(M fileManager) {
        super(fileManager);
    }

    /**
     * Create a new Java file object which will be used by the compiler to
     * store the generated byte code. Also add a reference to the object to the
     * cache so it can be accessed by other parts of the application.
     */
    public JavaFileObject getJavaFileForOutput(Location location, String className, Kind kind, FileObject sibling)
    throws IOException {
        if (logger.isDebugEnabled())
            logger.debug("Loading Dynamic Java byte code from: " + (sibling == null ? null : sibling.toUri()));
        try {
            JavaFileObject jfo = new ByteArrayJavaFileObject(className, kind);
            jfoCache.put(className, jfo);
            return jfo;
        }
        catch (Exception ex) {
            logger.severeException(ex.getMessage(), ex);
            throw new IOException(ex.getMessage(), ex);
        }
    }
}

